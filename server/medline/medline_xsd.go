//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		dev.upstores.com.br/medline/medline.xsd
package medline

import (
	xsdt "github.com/metaleap/go-xsd/types"
)

type TpubStatus xsdt.String

//	This convenience method just performs a simple type conversion to TpubStatus's alias type xsdt.String.
func (me TpubStatus) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TpubStatus is just a simple String type, this merely sets the current value from the specified string.
func (me *TpubStatus) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TpubStatus is just a simple String type, this merely returns the current string value.
func (me TpubStatus) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_PubStatus_TpubStatus_ struct {
	PubStatus TpubStatus `xml:"PubStatus,attr"`
}

type XsdGoPkgHasAtts_AttlistPubMedPubDate struct {
	XsdGoPkgHasAttr_PubStatus_TpubStatus_
}

type TartIdType xsdt.String

//	Since TartIdType is just a simple String type, this merely sets the current value from the specified string.
func (me *TartIdType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TartIdType is just a simple String type, this merely returns the current string value.
func (me TartIdType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TartIdType's alias type xsdt.String.
func (me TartIdType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_IdType_TartIdType_Pubmed struct {
	IdType TartIdType `xml:"IdType,attr"`
}

//	Returns the default value for IdType -- "pubmed"
func (me XsdGoPkgHasAttr_IdType_TartIdType_Pubmed) IdTypeDefault() TartIdType {
	return TartIdType("pubmed")
}

type XsdGoPkgHasAtts_AttlistArticleId struct {
	XsdGoPkgHasAttr_IdType_TartIdType_Pubmed
}

type TisoLanguageCodes xsdt.Token

//	Returns true if the value of this enumerated TisoLanguageCodes is "VI".
func (me TisoLanguageCodes) IsVi() bool { return me.String() == "VI" }

//	Since TisoLanguageCodes is just a simple String type, this merely returns the current string value.
func (me TisoLanguageCodes) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TisoLanguageCodes is "DE".
func (me TisoLanguageCodes) IsDe() bool { return me.String() == "DE" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "ES".
func (me TisoLanguageCodes) IsEs() bool { return me.String() == "ES" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "HY".
func (me TisoLanguageCodes) IsHy() bool { return me.String() == "HY" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "IT".
func (me TisoLanguageCodes) IsIt() bool { return me.String() == "IT" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "RO".
func (me TisoLanguageCodes) IsRo() bool { return me.String() == "RO" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "RU".
func (me TisoLanguageCodes) IsRu() bool { return me.String() == "RU" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "AF".
func (me TisoLanguageCodes) IsAf() bool { return me.String() == "AF" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "EL".
func (me TisoLanguageCodes) IsEl() bool { return me.String() == "EL" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "HU".
func (me TisoLanguageCodes) IsHu() bool { return me.String() == "HU" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "SQ".
func (me TisoLanguageCodes) IsSq() bool { return me.String() == "SQ" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "ZH".
func (me TisoLanguageCodes) IsZh() bool { return me.String() == "ZH" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "CS".
func (me TisoLanguageCodes) IsCs() bool { return me.String() == "CS" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "HE".
func (me TisoLanguageCodes) IsHe() bool { return me.String() == "HE" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "KA".
func (me TisoLanguageCodes) IsKa() bool { return me.String() == "KA" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "ML".
func (me TisoLanguageCodes) IsMl() bool { return me.String() == "ML" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "PL".
func (me TisoLanguageCodes) IsPl() bool { return me.String() == "PL" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "PT".
func (me TisoLanguageCodes) IsPt() bool { return me.String() == "PT" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "SV".
func (me TisoLanguageCodes) IsSv() bool { return me.String() == "SV" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "AR".
func (me TisoLanguageCodes) IsAr() bool { return me.String() == "AR" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "FR".
func (me TisoLanguageCodes) IsFr() bool { return me.String() == "FR" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "JA".
func (me TisoLanguageCodes) IsJa() bool { return me.String() == "JA" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "SW".
func (me TisoLanguageCodes) IsSw() bool { return me.String() == "SW" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "DA".
func (me TisoLanguageCodes) IsDa() bool { return me.String() == "DA" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "IS".
func (me TisoLanguageCodes) IsIs() bool { return me.String() == "IS" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "MK".
func (me TisoLanguageCodes) IsMk() bool { return me.String() == "MK" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "PS".
func (me TisoLanguageCodes) IsPs() bool { return me.String() == "PS" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "TH".
func (me TisoLanguageCodes) IsTh() bool { return me.String() == "TH" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "TR".
func (me TisoLanguageCodes) IsTr() bool { return me.String() == "TR" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "UK".
func (me TisoLanguageCodes) IsUk() bool { return me.String() == "UK" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "AZ".
func (me TisoLanguageCodes) IsAz() bool { return me.String() == "AZ" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "BG".
func (me TisoLanguageCodes) IsBg() bool { return me.String() == "BG" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "FA".
func (me TisoLanguageCodes) IsFa() bool { return me.String() == "FA" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "FI".
func (me TisoLanguageCodes) IsFi() bool { return me.String() == "FI" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "IW".
func (me TisoLanguageCodes) IsIw() bool { return me.String() == "IW" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "NO".
func (me TisoLanguageCodes) IsNo() bool { return me.String() == "NO" }

//	Since TisoLanguageCodes is just a simple String type, this merely sets the current value from the specified string.
func (me *TisoLanguageCodes) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Returns true if the value of this enumerated TisoLanguageCodes is "EN".
func (me TisoLanguageCodes) IsEn() bool { return me.String() == "EN" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "KO".
func (me TisoLanguageCodes) IsKo() bool { return me.String() == "KO" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "NL".
func (me TisoLanguageCodes) IsNl() bool { return me.String() == "NL" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "SR".
func (me TisoLanguageCodes) IsSr() bool { return me.String() == "SR" }

//	This convenience method just performs a simple type conversion to TisoLanguageCodes's alias type xsdt.Token.
func (me TisoLanguageCodes) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TisoLanguageCodes is "IN".
func (me TisoLanguageCodes) IsIn() bool { return me.String() == "IN" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "LT".
func (me TisoLanguageCodes) IsLt() bool { return me.String() == "LT" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "SL".
func (me TisoLanguageCodes) IsSl() bool { return me.String() == "SL" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "SK".
func (me TisoLanguageCodes) IsSk() bool { return me.String() == "SK" }

type XsdGoPkgHasAttr_Lang_TisoLanguageCodes_ struct {
	Lang TisoLanguageCodes `xml:"lang,attr"`
}

type TAttlistUrlType xsdt.Token

//	Since TAttlistUrlType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistUrlType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistUrlType is just a simple String type, this merely returns the current string value.
func (me TAttlistUrlType) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistUrlType's alias type xsdt.Token.
func (me TAttlistUrlType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistUrlType is "FullText".
func (me TAttlistUrlType) IsFullText() bool { return me.String() == "FullText" }

//	Returns true if the value of this enumerated TAttlistUrlType is "summary".
func (me TAttlistUrlType) IsSummary() bool { return me.String() == "summary" }

//	Returns true if the value of this enumerated TAttlistUrlType is "fulltext".
func (me TAttlistUrlType) IsFulltext() bool { return me.String() == "fulltext" }

type XsdGoPkgHasAttr_Type_TAttlistUrlType_ struct {
	Type TAttlistUrlType `xml:"Type,attr"`
}

type XsdGoPkgHasAtts_AttlistUrl struct {
	XsdGoPkgHasAttr_Lang_TisoLanguageCodes_

	XsdGoPkgHasAttr_Type_TAttlistUrlType_
}

type XsdGoPkgHasAttr_Type_XsdtString_ struct {
	Type xsdt.String `xml:"Type,attr"`
}

type XsdGoPkgHasAtts_AttlistObject struct {
	XsdGoPkgHasAttr_Type_XsdtString_
}

type XsdGoPkgHasAttr_Name_XsdtString_ struct {
	Name xsdt.String `xml:"Name,attr"`
}

type XsdGoPkgHasAtts_AttlistParam struct {
	XsdGoPkgHasAttr_Name_XsdtString_
}

type TAttlistMedlineCitationOwner xsdt.Token

//	Returns true if the value of this enumerated TAttlistMedlineCitationOwner is "NASA".
func (me TAttlistMedlineCitationOwner) IsNasa() bool { return me.String() == "NASA" }

//	Returns true if the value of this enumerated TAttlistMedlineCitationOwner is "HSR".
func (me TAttlistMedlineCitationOwner) IsHsr() bool { return me.String() == "HSR" }

//	Returns true if the value of this enumerated TAttlistMedlineCitationOwner is "NOTNLM".
func (me TAttlistMedlineCitationOwner) IsNotnlm() bool { return me.String() == "NOTNLM" }

//	Returns true if the value of this enumerated TAttlistMedlineCitationOwner is "KIE".
func (me TAttlistMedlineCitationOwner) IsKie() bool { return me.String() == "KIE" }

//	Returns true if the value of this enumerated TAttlistMedlineCitationOwner is "HMD".
func (me TAttlistMedlineCitationOwner) IsHmd() bool { return me.String() == "HMD" }

//	Since TAttlistMedlineCitationOwner is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistMedlineCitationOwner) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistMedlineCitationOwner is just a simple String type, this merely returns the current string value.
func (me TAttlistMedlineCitationOwner) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistMedlineCitationOwner's alias type xsdt.Token.
func (me TAttlistMedlineCitationOwner) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistMedlineCitationOwner is "NLM".
func (me TAttlistMedlineCitationOwner) IsNlm() bool { return me.String() == "NLM" }

//	Returns true if the value of this enumerated TAttlistMedlineCitationOwner is "PIP".
func (me TAttlistMedlineCitationOwner) IsPip() bool { return me.String() == "PIP" }

type XsdGoPkgHasAttr_Owner_TAttlistMedlineCitationOwner_Nlm struct {
	Owner TAttlistMedlineCitationOwner `xml:"Owner,attr"`
}

//	Returns the default value for Owner -- "NLM"
func (me XsdGoPkgHasAttr_Owner_TAttlistMedlineCitationOwner_Nlm) OwnerDefault() TAttlistMedlineCitationOwner {
	return TAttlistMedlineCitationOwner("NLM")
}

type TAttlistMedlineCitationStatus xsdt.Token

//	Since TAttlistMedlineCitationStatus is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistMedlineCitationStatus) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TAttlistMedlineCitationStatus's alias type xsdt.Token.
func (me TAttlistMedlineCitationStatus) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistMedlineCitationStatus is "Completed".
func (me TAttlistMedlineCitationStatus) IsCompleted() bool { return me.String() == "Completed" }

//	Returns true if the value of this enumerated TAttlistMedlineCitationStatus is "PubMed-not-MEDLINE".
func (me TAttlistMedlineCitationStatus) IsPubMedNotMedline() bool {
	return me.String() == "PubMed-not-MEDLINE"
}

//	Returns true if the value of this enumerated TAttlistMedlineCitationStatus is "In-Data-Review".
func (me TAttlistMedlineCitationStatus) IsInDataReview() bool { return me.String() == "In-Data-Review" }

//	Since TAttlistMedlineCitationStatus is just a simple String type, this merely returns the current string value.
func (me TAttlistMedlineCitationStatus) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TAttlistMedlineCitationStatus is "In-Process".
func (me TAttlistMedlineCitationStatus) IsInProcess() bool { return me.String() == "In-Process" }

//	Returns true if the value of this enumerated TAttlistMedlineCitationStatus is "Publisher".
func (me TAttlistMedlineCitationStatus) IsPublisher() bool { return me.String() == "Publisher" }

//	Returns true if the value of this enumerated TAttlistMedlineCitationStatus is "MEDLINE".
func (me TAttlistMedlineCitationStatus) IsMedline() bool { return me.String() == "MEDLINE" }

//	Returns true if the value of this enumerated TAttlistMedlineCitationStatus is "OLDMEDLINE".
func (me TAttlistMedlineCitationStatus) IsOldmedline() bool { return me.String() == "OLDMEDLINE" }

type XsdGoPkgHasAttr_Status_TAttlistMedlineCitationStatus_ struct {
	Status TAttlistMedlineCitationStatus `xml:"Status,attr"`
}

type XsdGoPkgHasAttr_VersionID_XsdtString_ struct {
	VersionID xsdt.String `xml:"VersionID,attr"`
}

type XsdGoPkgHasAttr_VersionDate_XsdtString_ struct {
	VersionDate xsdt.String `xml:"VersionDate,attr"`
}

type XsdGoPkgHasAtts_AttlistMedlineCitation struct {
	XsdGoPkgHasAttr_VersionDate_XsdtString_

	XsdGoPkgHasAttr_Owner_TAttlistMedlineCitationOwner_Nlm

	XsdGoPkgHasAttr_Status_TAttlistMedlineCitationStatus_

	XsdGoPkgHasAttr_VersionID_XsdtString_
}

type TAttlistAbstractTextNlmCategory xsdt.Token

//	Returns true if the value of this enumerated TAttlistAbstractTextNlmCategory is "BACKGROUND".
func (me TAttlistAbstractTextNlmCategory) IsBackground() bool { return me.String() == "BACKGROUND" }

//	Returns true if the value of this enumerated TAttlistAbstractTextNlmCategory is "OBJECTIVE".
func (me TAttlistAbstractTextNlmCategory) IsObjective() bool { return me.String() == "OBJECTIVE" }

//	Returns true if the value of this enumerated TAttlistAbstractTextNlmCategory is "METHODS".
func (me TAttlistAbstractTextNlmCategory) IsMethods() bool { return me.String() == "METHODS" }

//	Returns true if the value of this enumerated TAttlistAbstractTextNlmCategory is "RESULTS".
func (me TAttlistAbstractTextNlmCategory) IsResults() bool { return me.String() == "RESULTS" }

//	Returns true if the value of this enumerated TAttlistAbstractTextNlmCategory is "CONCLUSIONS".
func (me TAttlistAbstractTextNlmCategory) IsConclusions() bool { return me.String() == "CONCLUSIONS" }

//	Since TAttlistAbstractTextNlmCategory is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistAbstractTextNlmCategory) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistAbstractTextNlmCategory is just a simple String type, this merely returns the current string value.
func (me TAttlistAbstractTextNlmCategory) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistAbstractTextNlmCategory's alias type xsdt.Token.
func (me TAttlistAbstractTextNlmCategory) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistAbstractTextNlmCategory is "UNASSIGNED".
func (me TAttlistAbstractTextNlmCategory) IsUnassigned() bool { return me.String() == "UNASSIGNED" }

type XsdGoPkgHasAttr_NlmCategory_TAttlistAbstractTextNlmCategory_ struct {
	NlmCategory TAttlistAbstractTextNlmCategory `xml:"NlmCategory,attr"`
}

type XsdGoPkgHasAttr_Label_XsdtString_ struct {
	Label xsdt.String `xml:"Label,attr"`
}

type XsdGoPkgHasAtts_AttlistAbstractText struct {
	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasAttr_NlmCategory_TAttlistAbstractTextNlmCategory_
}

type TAttlistArticlePubModel xsdt.Token

//	Since TAttlistArticlePubModel is just a simple String type, this merely returns the current string value.
func (me TAttlistArticlePubModel) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistArticlePubModel's alias type xsdt.Token.
func (me TAttlistArticlePubModel) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistArticlePubModel is "Print".
func (me TAttlistArticlePubModel) IsPrint() bool { return me.String() == "Print" }

//	Returns true if the value of this enumerated TAttlistArticlePubModel is "Print-Electronic".
func (me TAttlistArticlePubModel) IsPrintElectronic() bool { return me.String() == "Print-Electronic" }

//	Returns true if the value of this enumerated TAttlistArticlePubModel is "Electronic".
func (me TAttlistArticlePubModel) IsElectronic() bool { return me.String() == "Electronic" }

//	Returns true if the value of this enumerated TAttlistArticlePubModel is "Electronic-Print".
func (me TAttlistArticlePubModel) IsElectronicPrint() bool { return me.String() == "Electronic-Print" }

//	Returns true if the value of this enumerated TAttlistArticlePubModel is "Electronic-eCollection".
func (me TAttlistArticlePubModel) IsElectronicECollection() bool {
	return me.String() == "Electronic-eCollection"
}

//	Since TAttlistArticlePubModel is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistArticlePubModel) Set(s string) { (*xsdt.Token)(me).Set(s) }

type XsdGoPkgHasAttr_PubModel_TAttlistArticlePubModel_ struct {
	PubModel TAttlistArticlePubModel `xml:"PubModel,attr"`
}

type XsdGoPkgHasAtts_AttlistArticle struct {
	XsdGoPkgHasAttr_PubModel_TAttlistArticlePubModel_
}

type TAttlistArticleDateDateType xsdt.String

//	Since TAttlistArticleDateDateType is just a simple String type, this merely returns the current string value.
func (me TAttlistArticleDateDateType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistArticleDateDateType's alias type xsdt.String.
func (me TAttlistArticleDateDateType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TAttlistArticleDateDateType is "Electronic".
func (me TAttlistArticleDateDateType) IsElectronic() bool { return me.String() == "Electronic" }

//	Since TAttlistArticleDateDateType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistArticleDateDateType) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasAttr_DateType_TAttlistArticleDateDateType_Electronic struct {
	DateType TAttlistArticleDateDateType `xml:"DateType,attr"`
}

//	Returns the default value for DateType -- "Electronic"
func (me XsdGoPkgHasAttr_DateType_TAttlistArticleDateDateType_Electronic) DateTypeDefault() TAttlistArticleDateDateType {
	return TAttlistArticleDateDateType("Electronic")
}

type XsdGoPkgHasAtts_AttlistArticleDate struct {
	XsdGoPkgHasAttr_DateType_TAttlistArticleDateDateType_Electronic
}

type TAttlistAuthorValidYN xsdt.Token

//	Since TAttlistAuthorValidYN is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistAuthorValidYN) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistAuthorValidYN is just a simple String type, this merely returns the current string value.
func (me TAttlistAuthorValidYN) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistAuthorValidYN's alias type xsdt.Token.
func (me TAttlistAuthorValidYN) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistAuthorValidYN is "Y".
func (me TAttlistAuthorValidYN) IsY() bool { return me.String() == "Y" }

//	Returns true if the value of this enumerated TAttlistAuthorValidYN is "N".
func (me TAttlistAuthorValidYN) IsN() bool { return me.String() == "N" }

type XsdGoPkgHasAttr_ValidYN_TAttlistAuthorValidYN_Y struct {
	ValidYN TAttlistAuthorValidYN `xml:"ValidYN,attr"`
}

//	Returns the default value for ValidYN -- "Y"
func (me XsdGoPkgHasAttr_ValidYN_TAttlistAuthorValidYN_Y) ValidYNDefault() TAttlistAuthorValidYN {
	return TAttlistAuthorValidYN("Y")
}

type XsdGoPkgHasAtts_AttlistAuthor struct {
	XsdGoPkgHasAttr_ValidYN_TAttlistAuthorValidYN_Y
}

type TAttlistAuthorListCompleteYN xsdt.Token

//	Since TAttlistAuthorListCompleteYN is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistAuthorListCompleteYN) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistAuthorListCompleteYN is just a simple String type, this merely returns the current string value.
func (me TAttlistAuthorListCompleteYN) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistAuthorListCompleteYN's alias type xsdt.Token.
func (me TAttlistAuthorListCompleteYN) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistAuthorListCompleteYN is "Y".
func (me TAttlistAuthorListCompleteYN) IsY() bool { return me.String() == "Y" }

//	Returns true if the value of this enumerated TAttlistAuthorListCompleteYN is "N".
func (me TAttlistAuthorListCompleteYN) IsN() bool { return me.String() == "N" }

type XsdGoPkgHasAttr_CompleteYN_TAttlistAuthorListCompleteYN_Y struct {
	CompleteYN TAttlistAuthorListCompleteYN `xml:"CompleteYN,attr"`
}

//	Returns the default value for CompleteYN -- "Y"
func (me XsdGoPkgHasAttr_CompleteYN_TAttlistAuthorListCompleteYN_Y) CompleteYNDefault() TAttlistAuthorListCompleteYN {
	return TAttlistAuthorListCompleteYN("Y")
}

type TAttlistAuthorListType xsdt.Token

//	Since TAttlistAuthorListType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistAuthorListType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistAuthorListType is just a simple String type, this merely returns the current string value.
func (me TAttlistAuthorListType) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistAuthorListType's alias type xsdt.Token.
func (me TAttlistAuthorListType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistAuthorListType is "authors".
func (me TAttlistAuthorListType) IsAuthors() bool { return me.String() == "authors" }

//	Returns true if the value of this enumerated TAttlistAuthorListType is "editors".
func (me TAttlistAuthorListType) IsEditors() bool { return me.String() == "editors" }

type XsdGoPkgHasAttr_Type_TAttlistAuthorListType_Authors struct {
	Type TAttlistAuthorListType `xml:"Type,attr"`
}

//	Returns the default value for Type -- "authors"
func (me XsdGoPkgHasAttr_Type_TAttlistAuthorListType_Authors) TypeDefault() TAttlistAuthorListType {
	return TAttlistAuthorListType("authors")
}

type XsdGoPkgHasAtts_AttlistAuthorList struct {
	XsdGoPkgHasAttr_CompleteYN_TAttlistAuthorListCompleteYN_Y

	XsdGoPkgHasAttr_Type_TAttlistAuthorListType_Authors
}

type TAttlistCommentsCorrectionsRefType xsdt.Token

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "RetractionIn".
func (me TAttlistCommentsCorrectionsRefType) IsRetractionIn() bool {
	return me.String() == "RetractionIn"
}

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "UpdateIn".
func (me TAttlistCommentsCorrectionsRefType) IsUpdateIn() bool { return me.String() == "UpdateIn" }

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "UpdateOf".
func (me TAttlistCommentsCorrectionsRefType) IsUpdateOf() bool { return me.String() == "UpdateOf" }

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "SummaryForPatientsIn".
func (me TAttlistCommentsCorrectionsRefType) IsSummaryForPatientsIn() bool {
	return me.String() == "SummaryForPatientsIn"
}

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "ErratumFor".
func (me TAttlistCommentsCorrectionsRefType) IsErratumFor() bool { return me.String() == "ErratumFor" }

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "RetractionOf".
func (me TAttlistCommentsCorrectionsRefType) IsRetractionOf() bool {
	return me.String() == "RetractionOf"
}

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "PartialRetractionIn".
func (me TAttlistCommentsCorrectionsRefType) IsPartialRetractionIn() bool {
	return me.String() == "PartialRetractionIn"
}

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "RepublishedIn".
func (me TAttlistCommentsCorrectionsRefType) IsRepublishedIn() bool {
	return me.String() == "RepublishedIn"
}

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "ReprintOf".
func (me TAttlistCommentsCorrectionsRefType) IsReprintOf() bool { return me.String() == "ReprintOf" }

//	This convenience method just performs a simple type conversion to TAttlistCommentsCorrectionsRefType's alias type xsdt.Token.
func (me TAttlistCommentsCorrectionsRefType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "ErratumIn".
func (me TAttlistCommentsCorrectionsRefType) IsErratumIn() bool { return me.String() == "ErratumIn" }

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "OriginalReportIn".
func (me TAttlistCommentsCorrectionsRefType) IsOriginalReportIn() bool {
	return me.String() == "OriginalReportIn"
}

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "ReprintIn".
func (me TAttlistCommentsCorrectionsRefType) IsReprintIn() bool { return me.String() == "ReprintIn" }

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "Cites".
func (me TAttlistCommentsCorrectionsRefType) IsCites() bool { return me.String() == "Cites" }

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "AssociatedDataset".
func (me TAttlistCommentsCorrectionsRefType) IsAssociatedDataset() bool {
	return me.String() == "AssociatedDataset"
}

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "CommentOn".
func (me TAttlistCommentsCorrectionsRefType) IsCommentOn() bool { return me.String() == "CommentOn" }

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "AssociatedPublication".
func (me TAttlistCommentsCorrectionsRefType) IsAssociatedPublication() bool {
	return me.String() == "AssociatedPublication"
}

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "CommentIn".
func (me TAttlistCommentsCorrectionsRefType) IsCommentIn() bool { return me.String() == "CommentIn" }

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "PartialRetractionOf".
func (me TAttlistCommentsCorrectionsRefType) IsPartialRetractionOf() bool {
	return me.String() == "PartialRetractionOf"
}

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "RepublishedFrom".
func (me TAttlistCommentsCorrectionsRefType) IsRepublishedFrom() bool {
	return me.String() == "RepublishedFrom"
}

//	Since TAttlistCommentsCorrectionsRefType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistCommentsCorrectionsRefType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistCommentsCorrectionsRefType is just a simple String type, this merely returns the current string value.
func (me TAttlistCommentsCorrectionsRefType) String() string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_RefType_TAttlistCommentsCorrectionsRefType_ struct {
	RefType TAttlistCommentsCorrectionsRefType `xml:"RefType,attr"`
}

type XsdGoPkgHasAtts_AttlistCommentsCorrections struct {
	XsdGoPkgHasAttr_RefType_TAttlistCommentsCorrectionsRefType_
}

type TAttlistDataBankListCompleteYN xsdt.Token

//	This convenience method just performs a simple type conversion to TAttlistDataBankListCompleteYN's alias type xsdt.Token.
func (me TAttlistDataBankListCompleteYN) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistDataBankListCompleteYN is "Y".
func (me TAttlistDataBankListCompleteYN) IsY() bool { return me.String() == "Y" }

//	Returns true if the value of this enumerated TAttlistDataBankListCompleteYN is "N".
func (me TAttlistDataBankListCompleteYN) IsN() bool { return me.String() == "N" }

//	Since TAttlistDataBankListCompleteYN is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistDataBankListCompleteYN) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistDataBankListCompleteYN is just a simple String type, this merely returns the current string value.
func (me TAttlistDataBankListCompleteYN) String() string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_CompleteYN_TAttlistDataBankListCompleteYN_Y struct {
	CompleteYN TAttlistDataBankListCompleteYN `xml:"CompleteYN,attr"`
}

//	Returns the default value for CompleteYN -- "Y"
func (me XsdGoPkgHasAttr_CompleteYN_TAttlistDataBankListCompleteYN_Y) CompleteYNDefault() TAttlistDataBankListCompleteYN {
	return TAttlistDataBankListCompleteYN("Y")
}

type XsdGoPkgHasAtts_AttlistDataBankList struct {
	XsdGoPkgHasAttr_CompleteYN_TAttlistDataBankListCompleteYN_Y
}

type TAttlistDescriptorNameMajorTopicYN xsdt.Token

//	Since TAttlistDescriptorNameMajorTopicYN is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistDescriptorNameMajorTopicYN) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistDescriptorNameMajorTopicYN is just a simple String type, this merely returns the current string value.
func (me TAttlistDescriptorNameMajorTopicYN) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistDescriptorNameMajorTopicYN's alias type xsdt.Token.
func (me TAttlistDescriptorNameMajorTopicYN) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistDescriptorNameMajorTopicYN is "Y".
func (me TAttlistDescriptorNameMajorTopicYN) IsY() bool { return me.String() == "Y" }

//	Returns true if the value of this enumerated TAttlistDescriptorNameMajorTopicYN is "N".
func (me TAttlistDescriptorNameMajorTopicYN) IsN() bool { return me.String() == "N" }

type XsdGoPkgHasAttr_MajorTopicYN_TAttlistDescriptorNameMajorTopicYN_N struct {
	MajorTopicYN TAttlistDescriptorNameMajorTopicYN `xml:"MajorTopicYN,attr"`
}

//	Returns the default value for MajorTopicYN -- "N"
func (me XsdGoPkgHasAttr_MajorTopicYN_TAttlistDescriptorNameMajorTopicYN_N) MajorTopicYNDefault() TAttlistDescriptorNameMajorTopicYN {
	return TAttlistDescriptorNameMajorTopicYN("N")
}

type TAttlistDescriptorNameType xsdt.Token

//	Since TAttlistDescriptorNameType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistDescriptorNameType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistDescriptorNameType is just a simple String type, this merely returns the current string value.
func (me TAttlistDescriptorNameType) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistDescriptorNameType's alias type xsdt.Token.
func (me TAttlistDescriptorNameType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistDescriptorNameType is "Geographic".
func (me TAttlistDescriptorNameType) IsGeographic() bool { return me.String() == "Geographic" }

type XsdGoPkgHasAttr_Type_TAttlistDescriptorNameType_ struct {
	Type TAttlistDescriptorNameType `xml:"Type,attr"`
}

type XsdGoPkgHasAttr_Ui_XsdtString_ struct {
	Ui xsdt.String `xml:"UI,attr"`
}

type XsdGoPkgHasAtts_AttlistDescriptorName struct {
	XsdGoPkgHasAttr_MajorTopicYN_TAttlistDescriptorNameMajorTopicYN_N

	XsdGoPkgHasAttr_Type_TAttlistDescriptorNameType_

	XsdGoPkgHasAttr_Ui_XsdtString_
}

type TAttlistELocationIDValidYN xsdt.Token

//	Since TAttlistELocationIDValidYN is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistELocationIDValidYN) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistELocationIDValidYN is just a simple String type, this merely returns the current string value.
func (me TAttlistELocationIDValidYN) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistELocationIDValidYN's alias type xsdt.Token.
func (me TAttlistELocationIDValidYN) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistELocationIDValidYN is "Y".
func (me TAttlistELocationIDValidYN) IsY() bool { return me.String() == "Y" }

//	Returns true if the value of this enumerated TAttlistELocationIDValidYN is "N".
func (me TAttlistELocationIDValidYN) IsN() bool { return me.String() == "N" }

type XsdGoPkgHasAttr_ValidYN_TAttlistELocationIDValidYN_Y struct {
	ValidYN TAttlistELocationIDValidYN `xml:"ValidYN,attr"`
}

//	Returns the default value for ValidYN -- "Y"
func (me XsdGoPkgHasAttr_ValidYN_TAttlistELocationIDValidYN_Y) ValidYNDefault() TAttlistELocationIDValidYN {
	return TAttlistELocationIDValidYN("Y")
}

type TAttlistELocationIDEIdType xsdt.Token

//	Since TAttlistELocationIDEIdType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistELocationIDEIdType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistELocationIDEIdType is just a simple String type, this merely returns the current string value.
func (me TAttlistELocationIDEIdType) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistELocationIDEIdType's alias type xsdt.Token.
func (me TAttlistELocationIDEIdType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistELocationIDEIdType is "doi".
func (me TAttlistELocationIDEIdType) IsDoi() bool { return me.String() == "doi" }

//	Returns true if the value of this enumerated TAttlistELocationIDEIdType is "pii".
func (me TAttlistELocationIDEIdType) IsPii() bool { return me.String() == "pii" }

type XsdGoPkgHasAttr_EIdType_TAttlistELocationIDEIdType_ struct {
	EIdType TAttlistELocationIDEIdType `xml:"EIdType,attr"`
}

type XsdGoPkgHasAtts_AttlistELocationID struct {
	XsdGoPkgHasAttr_EIdType_TAttlistELocationIDEIdType_

	XsdGoPkgHasAttr_ValidYN_TAttlistELocationIDValidYN_Y
}

type TAttlistGeneralNoteOwner xsdt.Token

//	Returns true if the value of this enumerated TAttlistGeneralNoteOwner is "NLM".
func (me TAttlistGeneralNoteOwner) IsNlm() bool { return me.String() == "NLM" }

//	Returns true if the value of this enumerated TAttlistGeneralNoteOwner is "PIP".
func (me TAttlistGeneralNoteOwner) IsPip() bool { return me.String() == "PIP" }

//	Returns true if the value of this enumerated TAttlistGeneralNoteOwner is "NASA".
func (me TAttlistGeneralNoteOwner) IsNasa() bool { return me.String() == "NASA" }

//	Returns true if the value of this enumerated TAttlistGeneralNoteOwner is "KIE".
func (me TAttlistGeneralNoteOwner) IsKie() bool { return me.String() == "KIE" }

//	Returns true if the value of this enumerated TAttlistGeneralNoteOwner is "HSR".
func (me TAttlistGeneralNoteOwner) IsHsr() bool { return me.String() == "HSR" }

//	Returns true if the value of this enumerated TAttlistGeneralNoteOwner is "HMD".
func (me TAttlistGeneralNoteOwner) IsHmd() bool { return me.String() == "HMD" }

//	Since TAttlistGeneralNoteOwner is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistGeneralNoteOwner) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistGeneralNoteOwner is just a simple String type, this merely returns the current string value.
func (me TAttlistGeneralNoteOwner) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistGeneralNoteOwner's alias type xsdt.Token.
func (me TAttlistGeneralNoteOwner) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type XsdGoPkgHasAttr_Owner_TAttlistGeneralNoteOwner_Nlm struct {
	Owner TAttlistGeneralNoteOwner `xml:"Owner,attr"`
}

//	Returns the default value for Owner -- "NLM"
func (me XsdGoPkgHasAttr_Owner_TAttlistGeneralNoteOwner_Nlm) OwnerDefault() TAttlistGeneralNoteOwner {
	return TAttlistGeneralNoteOwner("NLM")
}

type XsdGoPkgHasAtts_AttlistGeneralNote struct {
	XsdGoPkgHasAttr_Owner_TAttlistGeneralNoteOwner_Nlm
}

type TAttlistGrantListCompleteYN xsdt.Token

//	Since TAttlistGrantListCompleteYN is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistGrantListCompleteYN) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistGrantListCompleteYN is just a simple String type, this merely returns the current string value.
func (me TAttlistGrantListCompleteYN) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistGrantListCompleteYN's alias type xsdt.Token.
func (me TAttlistGrantListCompleteYN) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistGrantListCompleteYN is "Y".
func (me TAttlistGrantListCompleteYN) IsY() bool { return me.String() == "Y" }

//	Returns true if the value of this enumerated TAttlistGrantListCompleteYN is "N".
func (me TAttlistGrantListCompleteYN) IsN() bool { return me.String() == "N" }

type XsdGoPkgHasAttr_CompleteYN_TAttlistGrantListCompleteYN_Y struct {
	CompleteYN TAttlistGrantListCompleteYN `xml:"CompleteYN,attr"`
}

//	Returns the default value for CompleteYN -- "Y"
func (me XsdGoPkgHasAttr_CompleteYN_TAttlistGrantListCompleteYN_Y) CompleteYNDefault() TAttlistGrantListCompleteYN {
	return TAttlistGrantListCompleteYN("Y")
}

type XsdGoPkgHasAtts_AttlistGrantList struct {
	XsdGoPkgHasAttr_CompleteYN_TAttlistGrantListCompleteYN_Y
}

type XsdGoPkgHasAttr_Source_XsdtString_ struct {
	Source xsdt.String `xml:"Source,attr"`
}

type XsdGoPkgHasAtts_AttlistIdentifier struct {
	XsdGoPkgHasAttr_Source_XsdtString_
}

type TAttlistIssnIssnType xsdt.Token

//	Since TAttlistIssnIssnType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistIssnIssnType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistIssnIssnType is just a simple String type, this merely returns the current string value.
func (me TAttlistIssnIssnType) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistIssnIssnType's alias type xsdt.Token.
func (me TAttlistIssnIssnType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistIssnIssnType is "Electronic".
func (me TAttlistIssnIssnType) IsElectronic() bool { return me.String() == "Electronic" }

//	Returns true if the value of this enumerated TAttlistIssnIssnType is "Print".
func (me TAttlistIssnIssnType) IsPrint() bool { return me.String() == "Print" }

type XsdGoPkgHasAttr_IssnType_TAttlistIssnIssnType_ struct {
	IssnType TAttlistIssnIssnType `xml:"IssnType,attr"`
}

type XsdGoPkgHasAtts_AttlistIssn struct {
	XsdGoPkgHasAttr_IssnType_TAttlistIssnIssnType_
}

type TAttlistInvestigatorValidYN xsdt.Token

//	This convenience method just performs a simple type conversion to TAttlistInvestigatorValidYN's alias type xsdt.Token.
func (me TAttlistInvestigatorValidYN) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistInvestigatorValidYN is "Y".
func (me TAttlistInvestigatorValidYN) IsY() bool { return me.String() == "Y" }

//	Returns true if the value of this enumerated TAttlistInvestigatorValidYN is "N".
func (me TAttlistInvestigatorValidYN) IsN() bool { return me.String() == "N" }

//	Since TAttlistInvestigatorValidYN is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistInvestigatorValidYN) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistInvestigatorValidYN is just a simple String type, this merely returns the current string value.
func (me TAttlistInvestigatorValidYN) String() string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_ValidYN_TAttlistInvestigatorValidYN_Y struct {
	ValidYN TAttlistInvestigatorValidYN `xml:"ValidYN,attr"`
}

//	Returns the default value for ValidYN -- "Y"
func (me XsdGoPkgHasAttr_ValidYN_TAttlistInvestigatorValidYN_Y) ValidYNDefault() TAttlistInvestigatorValidYN {
	return TAttlistInvestigatorValidYN("Y")
}

type XsdGoPkgHasAtts_AttlistInvestigator struct {
	XsdGoPkgHasAttr_ValidYN_TAttlistInvestigatorValidYN_Y
}

type TAttlistJournalIssueCitedMedium xsdt.Token

//	Since TAttlistJournalIssueCitedMedium is just a simple String type, this merely returns the current string value.
func (me TAttlistJournalIssueCitedMedium) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistJournalIssueCitedMedium's alias type xsdt.Token.
func (me TAttlistJournalIssueCitedMedium) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistJournalIssueCitedMedium is "Internet".
func (me TAttlistJournalIssueCitedMedium) IsInternet() bool { return me.String() == "Internet" }

//	Returns true if the value of this enumerated TAttlistJournalIssueCitedMedium is "Print".
func (me TAttlistJournalIssueCitedMedium) IsPrint() bool { return me.String() == "Print" }

//	Since TAttlistJournalIssueCitedMedium is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistJournalIssueCitedMedium) Set(s string) { (*xsdt.Token)(me).Set(s) }

type XsdGoPkgHasAttr_CitedMedium_TAttlistJournalIssueCitedMedium_ struct {
	CitedMedium TAttlistJournalIssueCitedMedium `xml:"CitedMedium,attr"`
}

type XsdGoPkgHasAtts_AttlistJournalIssue struct {
	XsdGoPkgHasAttr_CitedMedium_TAttlistJournalIssueCitedMedium_
}

type TAttlistKeywordMajorTopicYN xsdt.Token

//	Since TAttlistKeywordMajorTopicYN is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistKeywordMajorTopicYN) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistKeywordMajorTopicYN is just a simple String type, this merely returns the current string value.
func (me TAttlistKeywordMajorTopicYN) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistKeywordMajorTopicYN's alias type xsdt.Token.
func (me TAttlistKeywordMajorTopicYN) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistKeywordMajorTopicYN is "Y".
func (me TAttlistKeywordMajorTopicYN) IsY() bool { return me.String() == "Y" }

//	Returns true if the value of this enumerated TAttlistKeywordMajorTopicYN is "N".
func (me TAttlistKeywordMajorTopicYN) IsN() bool { return me.String() == "N" }

type XsdGoPkgHasAttr_MajorTopicYN_TAttlistKeywordMajorTopicYN_N struct {
	MajorTopicYN TAttlistKeywordMajorTopicYN `xml:"MajorTopicYN,attr"`
}

//	Returns the default value for MajorTopicYN -- "N"
func (me XsdGoPkgHasAttr_MajorTopicYN_TAttlistKeywordMajorTopicYN_N) MajorTopicYNDefault() TAttlistKeywordMajorTopicYN {
	return TAttlistKeywordMajorTopicYN("N")
}

type XsdGoPkgHasAtts_AttlistKeyword struct {
	XsdGoPkgHasAttr_MajorTopicYN_TAttlistKeywordMajorTopicYN_N
}

type TAttlistKeywordListOwner xsdt.Token

//	Since TAttlistKeywordListOwner is just a simple String type, this merely returns the current string value.
func (me TAttlistKeywordListOwner) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistKeywordListOwner's alias type xsdt.Token.
func (me TAttlistKeywordListOwner) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistKeywordListOwner is "NLM".
func (me TAttlistKeywordListOwner) IsNlm() bool { return me.String() == "NLM" }

//	Returns true if the value of this enumerated TAttlistKeywordListOwner is "NLM-AUTO".
func (me TAttlistKeywordListOwner) IsNlmAuto() bool { return me.String() == "NLM-AUTO" }

//	Returns true if the value of this enumerated TAttlistKeywordListOwner is "KIE".
func (me TAttlistKeywordListOwner) IsKie() bool { return me.String() == "KIE" }

//	Returns true if the value of this enumerated TAttlistKeywordListOwner is "NOTNLM".
func (me TAttlistKeywordListOwner) IsNotnlm() bool { return me.String() == "NOTNLM" }

//	Since TAttlistKeywordListOwner is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistKeywordListOwner) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Returns true if the value of this enumerated TAttlistKeywordListOwner is "NASA".
func (me TAttlistKeywordListOwner) IsNasa() bool { return me.String() == "NASA" }

//	Returns true if the value of this enumerated TAttlistKeywordListOwner is "PIP".
func (me TAttlistKeywordListOwner) IsPip() bool { return me.String() == "PIP" }

//	Returns true if the value of this enumerated TAttlistKeywordListOwner is "HHS".
func (me TAttlistKeywordListOwner) IsHhs() bool { return me.String() == "HHS" }

type XsdGoPkgHasAttr_Owner_TAttlistKeywordListOwner_Nlm struct {
	Owner TAttlistKeywordListOwner `xml:"Owner,attr"`
}

//	Returns the default value for Owner -- "NLM"
func (me XsdGoPkgHasAttr_Owner_TAttlistKeywordListOwner_Nlm) OwnerDefault() TAttlistKeywordListOwner {
	return TAttlistKeywordListOwner("NLM")
}

type XsdGoPkgHasAtts_AttlistKeywordList struct {
	XsdGoPkgHasAttr_Owner_TAttlistKeywordListOwner_Nlm
}

type XsdGoPkgHasAtts_AttlistNameOfSubstance struct {
	XsdGoPkgHasAttr_Ui_XsdtString_
}

type TAttlistOtherAbstractType xsdt.Token

//	Since TAttlistOtherAbstractType is just a simple String type, this merely returns the current string value.
func (me TAttlistOtherAbstractType) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TAttlistOtherAbstractType is "KIE".
func (me TAttlistOtherAbstractType) IsKie() bool { return me.String() == "KIE" }

//	Returns true if the value of this enumerated TAttlistOtherAbstractType is "PIP".
func (me TAttlistOtherAbstractType) IsPip() bool { return me.String() == "PIP" }

//	Returns true if the value of this enumerated TAttlistOtherAbstractType is "Publisher".
func (me TAttlistOtherAbstractType) IsPublisher() bool { return me.String() == "Publisher" }

//	Since TAttlistOtherAbstractType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistOtherAbstractType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TAttlistOtherAbstractType's alias type xsdt.Token.
func (me TAttlistOtherAbstractType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistOtherAbstractType is "AAMC".
func (me TAttlistOtherAbstractType) IsAamc() bool { return me.String() == "AAMC" }

//	Returns true if the value of this enumerated TAttlistOtherAbstractType is "AIDS".
func (me TAttlistOtherAbstractType) IsAids() bool { return me.String() == "AIDS" }

//	Returns true if the value of this enumerated TAttlistOtherAbstractType is "NASA".
func (me TAttlistOtherAbstractType) IsNasa() bool { return me.String() == "NASA" }

type XsdGoPkgHasAttr_Type_TAttlistOtherAbstractType_ struct {
	Type TAttlistOtherAbstractType `xml:"Type,attr"`
}

type XsdGoPkgHasAttr_Language_XsdtString_Eng struct {
	Language xsdt.String `xml:"Language,attr"`
}

//	Returns the default value for Language -- "eng"
func (me XsdGoPkgHasAttr_Language_XsdtString_Eng) LanguageDefault() xsdt.String {
	return xsdt.String("eng")
}

type XsdGoPkgHasAtts_AttlistOtherAbstract struct {
	XsdGoPkgHasAttr_Type_TAttlistOtherAbstractType_

	XsdGoPkgHasAttr_Language_XsdtString_Eng
}

type TAttlistOtherIDSource xsdt.Token

//	Since TAttlistOtherIDSource is just a simple String type, this merely returns the current string value.
func (me TAttlistOtherIDSource) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TAttlistOtherIDSource is "CPFH".
func (me TAttlistOtherIDSource) IsCpfh() bool { return me.String() == "CPFH" }

//	Returns true if the value of this enumerated TAttlistOtherIDSource is "NRCBL".
func (me TAttlistOtherIDSource) IsNrcbl() bool { return me.String() == "NRCBL" }

//	Returns true if the value of this enumerated TAttlistOtherIDSource is "NLM".
func (me TAttlistOtherIDSource) IsNlm() bool { return me.String() == "NLM" }

//	Returns true if the value of this enumerated TAttlistOtherIDSource is "QCIM".
func (me TAttlistOtherIDSource) IsQcim() bool { return me.String() == "QCIM" }

//	Returns true if the value of this enumerated TAttlistOtherIDSource is "POP".
func (me TAttlistOtherIDSource) IsPop() bool { return me.String() == "POP" }

//	Returns true if the value of this enumerated TAttlistOtherIDSource is "CPC".
func (me TAttlistOtherIDSource) IsCpc() bool { return me.String() == "CPC" }

//	Returns true if the value of this enumerated TAttlistOtherIDSource is "CLML".
func (me TAttlistOtherIDSource) IsClml() bool { return me.String() == "CLML" }

//	Returns true if the value of this enumerated TAttlistOtherIDSource is "KIE".
func (me TAttlistOtherIDSource) IsKie() bool { return me.String() == "KIE" }

//	Returns true if the value of this enumerated TAttlistOtherIDSource is "IND".
func (me TAttlistOtherIDSource) IsInd() bool { return me.String() == "IND" }

//	Returns true if the value of this enumerated TAttlistOtherIDSource is "NASA".
func (me TAttlistOtherIDSource) IsNasa() bool { return me.String() == "NASA" }

//	Returns true if the value of this enumerated TAttlistOtherIDSource is "PIP".
func (me TAttlistOtherIDSource) IsPip() bool { return me.String() == "PIP" }

//	Returns true if the value of this enumerated TAttlistOtherIDSource is "ARPL".
func (me TAttlistOtherIDSource) IsArpl() bool { return me.String() == "ARPL" }

//	Since TAttlistOtherIDSource is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistOtherIDSource) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TAttlistOtherIDSource's alias type xsdt.Token.
func (me TAttlistOtherIDSource) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type XsdGoPkgHasAttr_Source_TAttlistOtherIDSource_ struct {
	Source TAttlistOtherIDSource `xml:"Source,attr"`
}

type XsdGoPkgHasAtts_AttlistOtherID struct {
	XsdGoPkgHasAttr_Source_TAttlistOtherIDSource_
}

type XsdGoPkgHasAttr_Version_XsdtString_ struct {
	Version xsdt.String `xml:"Version,attr"`
}

type XsdGoPkgHasAtts_AttlistPmid struct {
	XsdGoPkgHasAttr_Version_XsdtString_
}

type TAttlistQualifierNameMajorTopicYN xsdt.Token

//	Since TAttlistQualifierNameMajorTopicYN is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistQualifierNameMajorTopicYN) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistQualifierNameMajorTopicYN is just a simple String type, this merely returns the current string value.
func (me TAttlistQualifierNameMajorTopicYN) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistQualifierNameMajorTopicYN's alias type xsdt.Token.
func (me TAttlistQualifierNameMajorTopicYN) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistQualifierNameMajorTopicYN is "Y".
func (me TAttlistQualifierNameMajorTopicYN) IsY() bool { return me.String() == "Y" }

//	Returns true if the value of this enumerated TAttlistQualifierNameMajorTopicYN is "N".
func (me TAttlistQualifierNameMajorTopicYN) IsN() bool { return me.String() == "N" }

type XsdGoPkgHasAttr_MajorTopicYN_TAttlistQualifierNameMajorTopicYN_N struct {
	MajorTopicYN TAttlistQualifierNameMajorTopicYN `xml:"MajorTopicYN,attr"`
}

//	Returns the default value for MajorTopicYN -- "N"
func (me XsdGoPkgHasAttr_MajorTopicYN_TAttlistQualifierNameMajorTopicYN_N) MajorTopicYNDefault() TAttlistQualifierNameMajorTopicYN {
	return TAttlistQualifierNameMajorTopicYN("N")
}

type XsdGoPkgHasAtts_AttlistQualifierName struct {
	XsdGoPkgHasAttr_MajorTopicYN_TAttlistQualifierNameMajorTopicYN_N

	XsdGoPkgHasAttr_Ui_XsdtString_
}

type TAttlistSupplMeshNameType xsdt.Token

//	Returns true if the value of this enumerated TAttlistSupplMeshNameType is "Disease".
func (me TAttlistSupplMeshNameType) IsDisease() bool { return me.String() == "Disease" }

//	Returns true if the value of this enumerated TAttlistSupplMeshNameType is "Protocol".
func (me TAttlistSupplMeshNameType) IsProtocol() bool { return me.String() == "Protocol" }

//	Since TAttlistSupplMeshNameType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistSupplMeshNameType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistSupplMeshNameType is just a simple String type, this merely returns the current string value.
func (me TAttlistSupplMeshNameType) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistSupplMeshNameType's alias type xsdt.Token.
func (me TAttlistSupplMeshNameType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type XsdGoPkgHasAttr_Type_TAttlistSupplMeshNameType_ struct {
	Type TAttlistSupplMeshNameType `xml:"Type,attr"`
}

type XsdGoPkgHasAtts_AttlistSupplMeshName struct {
	XsdGoPkgHasAttr_Type_TAttlistSupplMeshNameType_

	XsdGoPkgHasAttr_Ui_XsdtString_
}

type XsdGoPkgHasAttr_Book_XsdtString_ struct {
	Book xsdt.String `xml:"book,attr"`
}

type XsdGoPkgHasAttr_Part_XsdtString_ struct {
	Part xsdt.String `xml:"part,attr"`
}

type XsdGoPkgHasAttr_Sec_XsdtString_ struct {
	Sec xsdt.String `xml:"sec,attr"`
}

type XsdGoPkgHasAtts_Booklinkatts struct {
	XsdGoPkgHasAttr_Book_XsdtString_

	XsdGoPkgHasAttr_Part_XsdtString_

	XsdGoPkgHasAttr_Sec_XsdtString_
}

type XsdGoPkgHasAtts_AttlistBookTitle struct {
	XsdGoPkgHasAtts_Booklinkatts
}

type TAttlistLocationLabelType xsdt.Token

//	This convenience method just performs a simple type conversion to TAttlistLocationLabelType's alias type xsdt.Token.
func (me TAttlistLocationLabelType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistLocationLabelType is "part".
func (me TAttlistLocationLabelType) IsPart() bool { return me.String() == "part" }

//	Returns true if the value of this enumerated TAttlistLocationLabelType is "chapter".
func (me TAttlistLocationLabelType) IsChapter() bool { return me.String() == "chapter" }

//	Returns true if the value of this enumerated TAttlistLocationLabelType is "section".
func (me TAttlistLocationLabelType) IsSection() bool { return me.String() == "section" }

//	Since TAttlistLocationLabelType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistLocationLabelType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistLocationLabelType is just a simple String type, this merely returns the current string value.
func (me TAttlistLocationLabelType) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TAttlistLocationLabelType is "table".
func (me TAttlistLocationLabelType) IsTable() bool { return me.String() == "table" }

//	Returns true if the value of this enumerated TAttlistLocationLabelType is "box".
func (me TAttlistLocationLabelType) IsBox() bool { return me.String() == "box" }

//	Returns true if the value of this enumerated TAttlistLocationLabelType is "appendix".
func (me TAttlistLocationLabelType) IsAppendix() bool { return me.String() == "appendix" }

//	Returns true if the value of this enumerated TAttlistLocationLabelType is "figure".
func (me TAttlistLocationLabelType) IsFigure() bool { return me.String() == "figure" }

type XsdGoPkgHasAttr_Type_TAttlistLocationLabelType_ struct {
	Type TAttlistLocationLabelType `xml:"Type,attr"`
}

type XsdGoPkgHasAtts_AttlistLocationLabel struct {
	XsdGoPkgHasAttr_Type_TAttlistLocationLabelType_
}

type XsdGoPkgHasAttr_ListType_XsdtString_ struct {
	ListType xsdt.String `xml:"ListType,attr"`
}

type XsdGoPkgHasAtts_AttlistItemList struct {
	XsdGoPkgHasAttr_ListType_XsdtString_
}

type XsdGoPkgHasElem_Hour struct {
	Hour xsdt.String `xml:"Hour"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Hour function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Hour instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Hour instance.
func (me *XsdGoPkgHasElem_Hour) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Hour; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Minute struct {
	Minute xsdt.String `xml:"Minute"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Minute function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Minute instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Minute instance.
func (me *XsdGoPkgHasElem_Minute) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Minute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Second struct {
	Second xsdt.String `xml:"Second"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Second function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Second instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Second instance.
func (me *XsdGoPkgHasElem_Second) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Second; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Year struct {
	Year xsdt.String `xml:"Year"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Year function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Year instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Year instance.
func (me *XsdGoPkgHasElem_Year) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Year; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Month struct {
	Month xsdt.String `xml:"Month"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Month function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Month instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Month instance.
func (me *XsdGoPkgHasElem_Month) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Month; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Day struct {
	Day xsdt.String `xml:"Day"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Day function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Day instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Day instance.
func (me *XsdGoPkgHasElem_Day) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Day; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TnormalDate struct {
	XsdGoPkgHasElem_Second

	XsdGoPkgHasElem_Year

	XsdGoPkgHasElem_Month

	XsdGoPkgHasElem_Day

	XsdGoPkgHasElem_Hour

	XsdGoPkgHasElem_Minute
}

//	If the WalkHandlers.TnormalDate function is not nil (ie. was set by outside code), calls it with this TnormalDate instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TnormalDate instance.
func (me *TnormalDate) Walk() (err error) {
	if fn := WalkHandlers.TnormalDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Year.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Month.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Day.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Hour.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Minute.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Second.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPubMedPubDate struct {
	TnormalDate

	XsdGoPkgHasAtts_AttlistPubMedPubDate
}

//	If the WalkHandlers.TPubMedPubDate function is not nil (ie. was set by outside code), calls it with this TPubMedPubDate instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TPubMedPubDate instance.
func (me *TPubMedPubDate) Walk() (err error) {
	if fn := WalkHandlers.TPubMedPubDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TnormalDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PubMedPubDate struct {
	PubMedPubDates []*TPubMedPubDate `xml:"PubMedPubDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PubMedPubDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PubMedPubDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PubMedPubDate instance.
func (me *XsdGoPkgHasElems_PubMedPubDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PubMedPubDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PubMedPubDates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type THistory struct {
	XsdGoPkgHasElems_PubMedPubDate
}

//	If the WalkHandlers.THistory function is not nil (ie. was set by outside code), calls it with this THistory instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this THistory instance.
func (me *THistory) Walk() (err error) {
	if fn := WalkHandlers.THistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_PubMedPubDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_History struct {
	History *THistory `xml:"History"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_History function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_History instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_History instance.
func (me *XsdGoPkgHasElem_History) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_History; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.History.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PublicationStatus struct {
	PublicationStatus xsdt.String `xml:"PublicationStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PublicationStatus function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PublicationStatus instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PublicationStatus instance.
func (me *XsdGoPkgHasElem_PublicationStatus) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PublicationStatus; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TArticleId struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_AttlistArticleId
}

//	If the WalkHandlers.TArticleId function is not nil (ie. was set by outside code), calls it with this TArticleId instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TArticleId instance.
func (me *TArticleId) Walk() (err error) {
	if fn := WalkHandlers.TArticleId; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ArticleId struct {
	ArticleIds []*TArticleId `xml:"ArticleId"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ArticleId function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ArticleId instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ArticleId instance.
func (me *XsdGoPkgHasElems_ArticleId) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ArticleId; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ArticleIds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TArticleIdList struct {
	XsdGoPkgHasElems_ArticleId
}

//	If the WalkHandlers.TArticleIdList function is not nil (ie. was set by outside code), calls it with this TArticleIdList instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TArticleIdList instance.
func (me *TArticleIdList) Walk() (err error) {
	if fn := WalkHandlers.TArticleIdList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ArticleId.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ArticleIdList struct {
	ArticleIdList *TArticleIdList `xml:"ArticleIdList"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ArticleIdList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ArticleIdList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ArticleIdList instance.
func (me *XsdGoPkgHasElem_ArticleIdList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ArticleIdList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ArticleIdList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_B struct {
	Bs []xsdt.String `xml:"b"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_B function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_B instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_B instance.
func (me *XsdGoPkgHasElems_B) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_B; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_I struct {
	Is []xsdt.String `xml:"i"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_I function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_I instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_I instance.
func (me *XsdGoPkgHasElems_I) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_I; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Sup struct {
	Sups []xsdt.String `xml:"sup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Sup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sup instance.
func (me *XsdGoPkgHasElems_Sup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Sup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Sub struct {
	Subs []xsdt.String `xml:"sub"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Sub function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sub instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sub instance.
func (me *XsdGoPkgHasElems_Sub) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Sub; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_U struct {
	Us []xsdt.String `xml:"u"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_U function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_U instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_U instance.
func (me *XsdGoPkgHasElems_U) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_U; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Format struct {
	Formats []*Ttext `xml:"format"`

	XsdGoPkgHasElems_Sub

	XsdGoPkgHasElems_U

	XsdGoPkgHasElems_B

	XsdGoPkgHasElems_I

	XsdGoPkgHasElems_Sup
}

//	If the WalkHandlers.XsdGoPkgHasElems_Format function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Format instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Format instance.
func (me *XsdGoPkgHasElems_Format) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Format; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_I.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sub.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_U.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_B.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Ttext struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Format
}

//	If the WalkHandlers.Ttext function is not nil (ie. was set by outside code), calls it with this Ttext instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this Ttext instance.
func (me *Ttext) Walk() (err error) {
	if fn := WalkHandlers.Ttext; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Format.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TParam struct {
	Ttext

	XsdGoPkgHasAtts_AttlistParam
}

//	If the WalkHandlers.TParam function is not nil (ie. was set by outside code), calls it with this TParam instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TParam instance.
func (me *TParam) Walk() (err error) {
	if fn := WalkHandlers.TParam; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ttext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Param struct {
	Params []*TParam `xml:"Param"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Param function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Param instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Param instance.
func (me *XsdGoPkgHasElems_Param) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Param; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Params {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TObject struct {
	XsdGoPkgHasElems_Param

	XsdGoPkgHasAtts_AttlistObject
}

//	If the WalkHandlers.TObject function is not nil (ie. was set by outside code), calls it with this TObject instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TObject instance.
func (me *TObject) Walk() (err error) {
	if fn := WalkHandlers.TObject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Object struct {
	Objects []*TObject `xml:"Object"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Object function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Object instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Object instance.
func (me *XsdGoPkgHasElems_Object) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Object; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Objects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TObjectList struct {
	XsdGoPkgHasElems_Object
}

//	If the WalkHandlers.TObjectList function is not nil (ie. was set by outside code), calls it with this TObjectList instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TObjectList instance.
func (me *TObjectList) Walk() (err error) {
	if fn := WalkHandlers.TObjectList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Object.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ObjectList struct {
	ObjectList *TObjectList `xml:"ObjectList"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ObjectList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ObjectList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ObjectList instance.
func (me *XsdGoPkgHasElem_ObjectList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ObjectList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ObjectList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPubmedData struct {
	XsdGoPkgHasElem_ArticleIdList

	XsdGoPkgHasElem_ObjectList

	XsdGoPkgHasElem_History

	XsdGoPkgHasElem_PublicationStatus
}

//	If the WalkHandlers.TPubmedData function is not nil (ie. was set by outside code), calls it with this TPubmedData instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TPubmedData instance.
func (me *TPubmedData) Walk() (err error) {
	if fn := WalkHandlers.TPubmedData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ArticleIdList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ObjectList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_History.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PublicationStatus.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PubmedData struct {
	PubmedData *TPubmedData `xml:"PubmedData"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PubmedData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PubmedData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PubmedData instance.
func (me *XsdGoPkgHasElem_PubmedData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PubmedData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PubmedData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAbstractText struct {
	Ttext

	XsdGoPkgHasAtts_AttlistAbstractText
}

//	If the WalkHandlers.TAbstractText function is not nil (ie. was set by outside code), calls it with this TAbstractText instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TAbstractText instance.
func (me *TAbstractText) Walk() (err error) {
	if fn := WalkHandlers.TAbstractText; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ttext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AbstractText struct {
	AbstractTexts []*TAbstractText `xml:"AbstractText"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbstractText function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbstractText instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbstractText instance.
func (me *XsdGoPkgHasElems_AbstractText) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AbstractText; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AbstractTexts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CopyrightInformation struct {
	CopyrightInformation xsdt.String `xml:"CopyrightInformation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CopyrightInformation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CopyrightInformation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CopyrightInformation instance.
func (me *XsdGoPkgHasElem_CopyrightInformation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CopyrightInformation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAbstract struct {
	XsdGoPkgHasElems_AbstractText

	XsdGoPkgHasElem_CopyrightInformation
}

//	If the WalkHandlers.TAbstract function is not nil (ie. was set by outside code), calls it with this TAbstract instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TAbstract instance.
func (me *TAbstract) Walk() (err error) {
	if fn := WalkHandlers.TAbstract; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_AbstractText.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CopyrightInformation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Abstract struct {
	Abstract *TAbstract `xml:"Abstract"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Abstract function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Abstract instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Abstract instance.
func (me *XsdGoPkgHasElem_Abstract) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Abstract; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Abstract.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CollectiveName struct {
	CollectiveName *Ttext `xml:"CollectiveName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CollectiveName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CollectiveName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CollectiveName instance.
func (me *XsdGoPkgHasElem_CollectiveName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CollectiveName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CollectiveName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TIdentifier struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_AttlistIdentifier
}

//	If the WalkHandlers.TIdentifier function is not nil (ie. was set by outside code), calls it with this TIdentifier instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TIdentifier instance.
func (me *TIdentifier) Walk() (err error) {
	if fn := WalkHandlers.TIdentifier; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Identifier struct {
	Identifiers []*TIdentifier `xml:"Identifier"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Identifier function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Identifier instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Identifier instance.
func (me *XsdGoPkgHasElems_Identifier) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Identifier; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Identifiers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Affiliation struct {
	Affiliation *Ttext `xml:"Affiliation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Affiliation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Affiliation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Affiliation instance.
func (me *XsdGoPkgHasElem_Affiliation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Affiliation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Affiliation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAffiliationInfo struct {
	XsdGoPkgHasElem_Affiliation

	XsdGoPkgHasElems_Identifier
}

//	If the WalkHandlers.TAffiliationInfo function is not nil (ie. was set by outside code), calls it with this TAffiliationInfo instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TAffiliationInfo instance.
func (me *TAffiliationInfo) Walk() (err error) {
	if fn := WalkHandlers.TAffiliationInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Affiliation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Identifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AffiliationInfo struct {
	AffiliationInfos []*TAffiliationInfo `xml:"AffiliationInfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AffiliationInfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AffiliationInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AffiliationInfo instance.
func (me *XsdGoPkgHasElems_AffiliationInfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AffiliationInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AffiliationInfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LastName struct {
	LastName xsdt.String `xml:"LastName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LastName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LastName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LastName instance.
func (me *XsdGoPkgHasElem_LastName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LastName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ForeName struct {
	ForeName xsdt.String `xml:"ForeName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ForeName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ForeName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ForeName instance.
func (me *XsdGoPkgHasElem_ForeName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ForeName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Initials struct {
	Initials xsdt.String `xml:"Initials"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Initials function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Initials instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Initials instance.
func (me *XsdGoPkgHasElem_Initials) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Initials; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Suffix struct {
	Suffix *Ttext `xml:"Suffix"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Suffix function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Suffix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Suffix instance.
func (me *XsdGoPkgHasElem_Suffix) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Suffix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Suffix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAuthor struct {
	XsdGoPkgHasElems_Identifier

	XsdGoPkgHasElems_AffiliationInfo

	XsdGoPkgHasElem_LastName

	XsdGoPkgHasElem_ForeName

	XsdGoPkgHasElem_Initials

	XsdGoPkgHasElem_Suffix

	XsdGoPkgHasAtts_AttlistAuthor

	XsdGoPkgHasElem_CollectiveName
}

//	If the WalkHandlers.TAuthor function is not nil (ie. was set by outside code), calls it with this TAuthor instance as the single argument. Then calls the Walk() method on 7/8 embed(s) and 0/0 field(s) belonging to this TAuthor instance.
func (me *TAuthor) Walk() (err error) {
	if fn := WalkHandlers.TAuthor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_AffiliationInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LastName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ForeName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Initials.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Suffix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CollectiveName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Identifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Author struct {
	Authors []*TAuthor `xml:"Author"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Author function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Author instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Author instance.
func (me *XsdGoPkgHasElems_Author) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Author; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Authors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAuthorList struct {
	XsdGoPkgHasElems_Author

	XsdGoPkgHasAtts_AttlistAuthorList
}

//	If the WalkHandlers.TAuthorList function is not nil (ie. was set by outside code), calls it with this TAuthorList instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TAuthorList instance.
func (me *TAuthorList) Walk() (err error) {
	if fn := WalkHandlers.TAuthorList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AuthorList struct {
	AuthorList *TAuthorList `xml:"AuthorList"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AuthorList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AuthorList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AuthorList instance.
func (me *XsdGoPkgHasElem_AuthorList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AuthorList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthorList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Country struct {
	Country xsdt.String `xml:"Country"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Country function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Country instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Country instance.
func (me *XsdGoPkgHasElem_Country) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Country; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GrantID struct {
	GrantID xsdt.String `xml:"GrantID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GrantID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GrantID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_GrantID instance.
func (me *XsdGoPkgHasElem_GrantID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GrantID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Acronym struct {
	Acronym xsdt.String `xml:"Acronym"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Acronym function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Acronym instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Acronym instance.
func (me *XsdGoPkgHasElem_Acronym) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Acronym; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Agency struct {
	Agency xsdt.String `xml:"Agency"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Agency function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Agency instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Agency instance.
func (me *XsdGoPkgHasElem_Agency) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Agency; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGrant struct {
	XsdGoPkgHasElem_GrantID

	XsdGoPkgHasElem_Acronym

	XsdGoPkgHasElem_Agency

	XsdGoPkgHasElem_Country
}

//	If the WalkHandlers.TGrant function is not nil (ie. was set by outside code), calls it with this TGrant instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TGrant instance.
func (me *TGrant) Walk() (err error) {
	if fn := WalkHandlers.TGrant; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_GrantID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Agency.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Country.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Grant struct {
	Grants []*TGrant `xml:"Grant"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Grant function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Grant instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Grant instance.
func (me *XsdGoPkgHasElems_Grant) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Grant; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Grants {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGrantList struct {
	XsdGoPkgHasElems_Grant

	XsdGoPkgHasAtts_AttlistGrantList
}

//	If the WalkHandlers.TGrantList function is not nil (ie. was set by outside code), calls it with this TGrantList instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TGrantList instance.
func (me *TGrantList) Walk() (err error) {
	if fn := WalkHandlers.TGrantList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Grant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GrantList struct {
	GrantList *TGrantList `xml:"GrantList"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GrantList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GrantList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GrantList instance.
func (me *XsdGoPkgHasElem_GrantList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GrantList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GrantList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPublicationType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_AttlistNameOfSubstance
}

//	If the WalkHandlers.TPublicationType function is not nil (ie. was set by outside code), calls it with this TPublicationType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TPublicationType instance.
func (me *TPublicationType) Walk() (err error) {
	if fn := WalkHandlers.TPublicationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PublicationType struct {
	PublicationTypes []*TPublicationType `xml:"PublicationType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PublicationType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PublicationType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PublicationType instance.
func (me *XsdGoPkgHasElems_PublicationType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PublicationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PublicationTypes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPublicationTypeList struct {
	XsdGoPkgHasElems_PublicationType
}

//	If the WalkHandlers.TPublicationTypeList function is not nil (ie. was set by outside code), calls it with this TPublicationTypeList instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TPublicationTypeList instance.
func (me *TPublicationTypeList) Walk() (err error) {
	if fn := WalkHandlers.TPublicationTypeList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_PublicationType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PublicationTypeList struct {
	PublicationTypeList *TPublicationTypeList `xml:"PublicationTypeList"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PublicationTypeList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PublicationTypeList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PublicationTypeList instance.
func (me *XsdGoPkgHasElem_PublicationTypeList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PublicationTypeList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PublicationTypeList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TArticleDate struct {
	XsdGoPkgHasElem_Year

	XsdGoPkgHasElem_Month

	XsdGoPkgHasElem_Day

	XsdGoPkgHasAtts_AttlistArticleDate
}

//	If the WalkHandlers.TArticleDate function is not nil (ie. was set by outside code), calls it with this TArticleDate instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TArticleDate instance.
func (me *TArticleDate) Walk() (err error) {
	if fn := WalkHandlers.TArticleDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Month.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Day.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Year.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ArticleDate struct {
	ArticleDates []*TArticleDate `xml:"ArticleDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ArticleDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ArticleDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ArticleDate instance.
func (me *XsdGoPkgHasElems_ArticleDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ArticleDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ArticleDates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TELocationID struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_AttlistELocationID
}

//	If the WalkHandlers.TELocationID function is not nil (ie. was set by outside code), calls it with this TELocationID instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TELocationID instance.
func (me *TELocationID) Walk() (err error) {
	if fn := WalkHandlers.TELocationID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ELocationID struct {
	ELocationIDs []*TELocationID `xml:"ELocationID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ELocationID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ELocationID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ELocationID instance.
func (me *XsdGoPkgHasElems_ELocationID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ELocationID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ELocationIDs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TIssn struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_AttlistIssn
}

//	If the WalkHandlers.TIssn function is not nil (ie. was set by outside code), calls it with this TIssn instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TIssn instance.
func (me *TIssn) Walk() (err error) {
	if fn := WalkHandlers.TIssn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Issn struct {
	Issn *TIssn `xml:"ISSN"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Issn function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Issn instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Issn instance.
func (me *XsdGoPkgHasElem_Issn) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Issn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Issn.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Volume struct {
	Volume xsdt.String `xml:"Volume"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Volume function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Volume instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Volume instance.
func (me *XsdGoPkgHasElem_Volume) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Volume; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Issue struct {
	Issue xsdt.String `xml:"Issue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Issue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Issue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Issue instance.
func (me *XsdGoPkgHasElem_Issue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Issue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MedlineDate struct {
	MedlineDate xsdt.String `xml:"MedlineDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MedlineDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MedlineDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MedlineDate instance.
func (me *XsdGoPkgHasElem_MedlineDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MedlineDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Season struct {
	Season xsdt.String `xml:"Season"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Season function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Season instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Season instance.
func (me *XsdGoPkgHasElem_Season) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Season; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPubDate struct {
	XsdGoPkgHasElem_Month

	XsdGoPkgHasElem_Day

	XsdGoPkgHasElem_MedlineDate

	XsdGoPkgHasElem_Season

	XsdGoPkgHasElem_Year
}

//	If the WalkHandlers.TPubDate function is not nil (ie. was set by outside code), calls it with this TPubDate instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TPubDate instance.
func (me *TPubDate) Walk() (err error) {
	if fn := WalkHandlers.TPubDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_MedlineDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Season.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Year.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Month.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Day.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PubDate struct {
	PubDate *TPubDate `xml:"PubDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PubDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PubDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PubDate instance.
func (me *XsdGoPkgHasElem_PubDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PubDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PubDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TJournalIssue struct {
	XsdGoPkgHasElem_Volume

	XsdGoPkgHasElem_Issue

	XsdGoPkgHasElem_PubDate

	XsdGoPkgHasAtts_AttlistJournalIssue
}

//	If the WalkHandlers.TJournalIssue function is not nil (ie. was set by outside code), calls it with this TJournalIssue instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TJournalIssue instance.
func (me *TJournalIssue) Walk() (err error) {
	if fn := WalkHandlers.TJournalIssue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PubDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Volume.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Issue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_JournalIssue struct {
	JournalIssue *TJournalIssue `xml:"JournalIssue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_JournalIssue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_JournalIssue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_JournalIssue instance.
func (me *XsdGoPkgHasElem_JournalIssue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_JournalIssue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.JournalIssue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Title struct {
	Title xsdt.String `xml:"Title"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Title function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Title instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Title instance.
func (me *XsdGoPkgHasElem_Title) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Title; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ISOAbbreviation struct {
	ISOAbbreviation xsdt.String `xml:"ISOAbbreviation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ISOAbbreviation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ISOAbbreviation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ISOAbbreviation instance.
func (me *XsdGoPkgHasElem_ISOAbbreviation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ISOAbbreviation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TJournal struct {
	XsdGoPkgHasElem_ISOAbbreviation

	XsdGoPkgHasElem_Issn

	XsdGoPkgHasElem_JournalIssue

	XsdGoPkgHasElem_Title
}

//	If the WalkHandlers.TJournal function is not nil (ie. was set by outside code), calls it with this TJournal instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TJournal instance.
func (me *TJournal) Walk() (err error) {
	if fn := WalkHandlers.TJournal; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Issn.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_JournalIssue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ISOAbbreviation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Journal struct {
	Journal *TJournal `xml:"Journal"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Journal function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Journal instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Journal instance.
func (me *XsdGoPkgHasElem_Journal) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Journal; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Journal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TArticleTitle struct {
	Ttext

	XsdGoPkgHasAtts_AttlistBookTitle
}

//	If the WalkHandlers.TArticleTitle function is not nil (ie. was set by outside code), calls it with this TArticleTitle instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TArticleTitle instance.
func (me *TArticleTitle) Walk() (err error) {
	if fn := WalkHandlers.TArticleTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ttext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ArticleTitle struct {
	ArticleTitle *TArticleTitle `xml:"ArticleTitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ArticleTitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ArticleTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ArticleTitle instance.
func (me *XsdGoPkgHasElem_ArticleTitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ArticleTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ArticleTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MedlinePgn struct {
	MedlinePgn xsdt.String `xml:"MedlinePgn"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MedlinePgn function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MedlinePgn instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MedlinePgn instance.
func (me *XsdGoPkgHasElem_MedlinePgn) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MedlinePgn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_StartPage struct {
	StartPage xsdt.String `xml:"StartPage"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StartPage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StartPage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StartPage instance.
func (me *XsdGoPkgHasElem_StartPage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StartPage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EndPage struct {
	EndPage xsdt.String `xml:"EndPage"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EndPage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EndPage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_EndPage instance.
func (me *XsdGoPkgHasElem_EndPage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EndPage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPagination struct {
	XsdGoPkgHasElem_MedlinePgn

	XsdGoPkgHasElem_StartPage

	XsdGoPkgHasElem_EndPage
}

//	If the WalkHandlers.TPagination function is not nil (ie. was set by outside code), calls it with this TPagination instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TPagination instance.
func (me *TPagination) Walk() (err error) {
	if fn := WalkHandlers.TPagination; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_MedlinePgn.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StartPage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EndPage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Pagination struct {
	Pagination *TPagination `xml:"Pagination"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Pagination function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Pagination instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Pagination instance.
func (me *XsdGoPkgHasElem_Pagination) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Pagination; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Pagination.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Language struct {
	Languages []xsdt.String `xml:"Language"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Language function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Language instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Language instance.
func (me *XsdGoPkgHasElems_Language) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Language; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DataBankName struct {
	DataBankName xsdt.String `xml:"DataBankName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DataBankName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DataBankName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DataBankName instance.
func (me *XsdGoPkgHasElem_DataBankName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DataBankName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AccessionNumber struct {
	AccessionNumbers []xsdt.String `xml:"AccessionNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AccessionNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AccessionNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AccessionNumber instance.
func (me *XsdGoPkgHasElems_AccessionNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AccessionNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAccessionNumberList struct {
	XsdGoPkgHasElems_AccessionNumber
}

//	If the WalkHandlers.TAccessionNumberList function is not nil (ie. was set by outside code), calls it with this TAccessionNumberList instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TAccessionNumberList instance.
func (me *TAccessionNumberList) Walk() (err error) {
	if fn := WalkHandlers.TAccessionNumberList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_AccessionNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AccessionNumberList struct {
	AccessionNumberList *TAccessionNumberList `xml:"AccessionNumberList"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AccessionNumberList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AccessionNumberList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AccessionNumberList instance.
func (me *XsdGoPkgHasElem_AccessionNumberList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AccessionNumberList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AccessionNumberList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDataBank struct {
	XsdGoPkgHasElem_DataBankName

	XsdGoPkgHasElem_AccessionNumberList
}

//	If the WalkHandlers.TDataBank function is not nil (ie. was set by outside code), calls it with this TDataBank instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TDataBank instance.
func (me *TDataBank) Walk() (err error) {
	if fn := WalkHandlers.TDataBank; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_DataBankName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AccessionNumberList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DataBank struct {
	DataBanks []*TDataBank `xml:"DataBank"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DataBank function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DataBank instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DataBank instance.
func (me *XsdGoPkgHasElems_DataBank) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DataBank; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DataBanks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDataBankList struct {
	XsdGoPkgHasElems_DataBank

	XsdGoPkgHasAtts_AttlistDataBankList
}

//	If the WalkHandlers.TDataBankList function is not nil (ie. was set by outside code), calls it with this TDataBankList instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TDataBankList instance.
func (me *TDataBankList) Walk() (err error) {
	if fn := WalkHandlers.TDataBankList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_DataBank.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DataBankList struct {
	DataBankList *TDataBankList `xml:"DataBankList"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DataBankList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DataBankList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DataBankList instance.
func (me *XsdGoPkgHasElem_DataBankList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DataBankList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DataBankList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_VernacularTitle struct {
	VernacularTitle *Ttext `xml:"VernacularTitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_VernacularTitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_VernacularTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_VernacularTitle instance.
func (me *XsdGoPkgHasElem_VernacularTitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_VernacularTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.VernacularTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TArticle struct {
	XsdGoPkgHasElems_Language

	XsdGoPkgHasElem_DataBankList

	XsdGoPkgHasElem_VernacularTitle

	XsdGoPkgHasElem_Pagination

	XsdGoPkgHasAtts_AttlistArticle

	XsdGoPkgHasElem_GrantList

	XsdGoPkgHasElem_PublicationTypeList

	XsdGoPkgHasElems_ArticleDate

	XsdGoPkgHasElems_ELocationID

	XsdGoPkgHasElem_Journal

	XsdGoPkgHasElem_ArticleTitle

	XsdGoPkgHasElem_Abstract

	XsdGoPkgHasElem_AuthorList
}

//	If the WalkHandlers.TArticle function is not nil (ie. was set by outside code), calls it with this TArticle instance as the single argument. Then calls the Walk() method on 12/13 embed(s) and 0/0 field(s) belonging to this TArticle instance.
func (me *TArticle) Walk() (err error) {
	if fn := WalkHandlers.TArticle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ArticleTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Abstract.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AuthorList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GrantList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PublicationTypeList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ArticleDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ELocationID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Journal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_VernacularTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Pagination.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Language.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DataBankList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Article struct {
	Article *TArticle `xml:"Article"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Article function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Article instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Article instance.
func (me *XsdGoPkgHasElem_Article) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Article; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Article.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RefSource struct {
	RefSource xsdt.String `xml:"RefSource"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RefSource function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RefSource instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RefSource instance.
func (me *XsdGoPkgHasElem_RefSource) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RefSource; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPmid struct {
	XsdGoPkgHasAtts_AttlistPmid

	XsdGoPkgHasCdata
}

//	If the WalkHandlers.TPmid function is not nil (ie. was set by outside code), calls it with this TPmid instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TPmid instance.
func (me *TPmid) Walk() (err error) {
	if fn := WalkHandlers.TPmid; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Pmid struct {
	Pmid *TPmid `xml:"PMID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Pmid function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Pmid instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Pmid instance.
func (me *XsdGoPkgHasElem_Pmid) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Pmid; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Pmid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Note struct {
	Note xsdt.String `xml:"Note"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Note function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Note instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Note instance.
func (me *XsdGoPkgHasElem_Note) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Note; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TCommentsCorrections struct {
	XsdGoPkgHasElem_Pmid

	XsdGoPkgHasElem_Note

	XsdGoPkgHasAtts_AttlistCommentsCorrections

	XsdGoPkgHasElem_RefSource
}

//	If the WalkHandlers.TCommentsCorrections function is not nil (ie. was set by outside code), calls it with this TCommentsCorrections instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TCommentsCorrections instance.
func (me *TCommentsCorrections) Walk() (err error) {
	if fn := WalkHandlers.TCommentsCorrections; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Pmid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RefSource.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CommentsCorrections struct {
	CommentsCorrectionses []*TCommentsCorrections `xml:"CommentsCorrections"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CommentsCorrections function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CommentsCorrections instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CommentsCorrections instance.
func (me *XsdGoPkgHasElems_CommentsCorrections) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CommentsCorrections; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CommentsCorrectionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TCommentsCorrectionsList struct {
	XsdGoPkgHasElems_CommentsCorrections
}

//	If the WalkHandlers.TCommentsCorrectionsList function is not nil (ie. was set by outside code), calls it with this TCommentsCorrectionsList instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TCommentsCorrectionsList instance.
func (me *TCommentsCorrectionsList) Walk() (err error) {
	if fn := WalkHandlers.TCommentsCorrectionsList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_CommentsCorrections.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CommentsCorrectionsList struct {
	CommentsCorrectionsList *TCommentsCorrectionsList `xml:"CommentsCorrectionsList"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CommentsCorrectionsList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CommentsCorrectionsList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CommentsCorrectionsList instance.
func (me *XsdGoPkgHasElem_CommentsCorrectionsList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CommentsCorrectionsList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CommentsCorrectionsList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SpaceFlightMission struct {
	SpaceFlightMissions []xsdt.String `xml:"SpaceFlightMission"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SpaceFlightMission function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SpaceFlightMission instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SpaceFlightMission instance.
func (me *XsdGoPkgHasElems_SpaceFlightMission) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SpaceFlightMission; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TInvestigator struct {
	XsdGoPkgHasAtts_AttlistInvestigator

	XsdGoPkgHasElem_LastName

	XsdGoPkgHasElem_ForeName

	XsdGoPkgHasElem_Initials

	XsdGoPkgHasElem_Suffix

	XsdGoPkgHasElems_Identifier

	XsdGoPkgHasElems_AffiliationInfo
}

//	If the WalkHandlers.TInvestigator function is not nil (ie. was set by outside code), calls it with this TInvestigator instance as the single argument. Then calls the Walk() method on 6/7 embed(s) and 0/0 field(s) belonging to this TInvestigator instance.
func (me *TInvestigator) Walk() (err error) {
	if fn := WalkHandlers.TInvestigator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_LastName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ForeName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Initials.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Suffix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Identifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AffiliationInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Investigator struct {
	Investigators []*TInvestigator `xml:"Investigator"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Investigator function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Investigator instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Investigator instance.
func (me *XsdGoPkgHasElems_Investigator) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Investigator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Investigators {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TInvestigatorList struct {
	XsdGoPkgHasElems_Investigator
}

//	If the WalkHandlers.TInvestigatorList function is not nil (ie. was set by outside code), calls it with this TInvestigatorList instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TInvestigatorList instance.
func (me *TInvestigatorList) Walk() (err error) {
	if fn := WalkHandlers.TInvestigatorList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Investigator.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_InvestigatorList struct {
	InvestigatorList *TInvestigatorList `xml:"InvestigatorList"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InvestigatorList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InvestigatorList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InvestigatorList instance.
func (me *XsdGoPkgHasElem_InvestigatorList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InvestigatorList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InvestigatorList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDateRevised struct {
	XsdGoPkgHasElem_Year

	XsdGoPkgHasElem_Month

	XsdGoPkgHasElem_Day
}

//	If the WalkHandlers.TDateRevised function is not nil (ie. was set by outside code), calls it with this TDateRevised instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TDateRevised instance.
func (me *TDateRevised) Walk() (err error) {
	if fn := WalkHandlers.TDateRevised; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Year.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Month.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Day.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DateRevised struct {
	DateRevised *TDateRevised `xml:"DateRevised"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DateRevised function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DateRevised instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DateRevised instance.
func (me *XsdGoPkgHasElem_DateRevised) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DateRevised; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DateRevised.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDateCompleted struct {
	XsdGoPkgHasElem_Day

	XsdGoPkgHasElem_Year

	XsdGoPkgHasElem_Month
}

//	If the WalkHandlers.TDateCompleted function is not nil (ie. was set by outside code), calls it with this TDateCompleted instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TDateCompleted instance.
func (me *TDateCompleted) Walk() (err error) {
	if fn := WalkHandlers.TDateCompleted; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Year.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Month.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Day.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DateCompleted struct {
	DateCompleted *TDateCompleted `xml:"DateCompleted"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DateCompleted function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DateCompleted instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DateCompleted instance.
func (me *XsdGoPkgHasElem_DateCompleted) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DateCompleted; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DateCompleted.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GeneSymbol struct {
	GeneSymbols []xsdt.String `xml:"GeneSymbol"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GeneSymbol function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GeneSymbol instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GeneSymbol instance.
func (me *XsdGoPkgHasElems_GeneSymbol) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GeneSymbol; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGeneSymbolList struct {
	XsdGoPkgHasElems_GeneSymbol
}

//	If the WalkHandlers.TGeneSymbolList function is not nil (ie. was set by outside code), calls it with this TGeneSymbolList instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TGeneSymbolList instance.
func (me *TGeneSymbolList) Walk() (err error) {
	if fn := WalkHandlers.TGeneSymbolList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_GeneSymbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GeneSymbolList struct {
	GeneSymbolList *TGeneSymbolList `xml:"GeneSymbolList"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GeneSymbolList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GeneSymbolList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GeneSymbolList instance.
func (me *XsdGoPkgHasElem_GeneSymbolList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GeneSymbolList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GeneSymbolList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NumberOfReferences struct {
	NumberOfReferences xsdt.String `xml:"NumberOfReferences"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NumberOfReferences function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NumberOfReferences instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NumberOfReferences instance.
func (me *XsdGoPkgHasElem_NumberOfReferences) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NumberOfReferences; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TKeyword struct {
	Ttext

	XsdGoPkgHasAtts_AttlistKeyword
}

//	If the WalkHandlers.TKeyword function is not nil (ie. was set by outside code), calls it with this TKeyword instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TKeyword instance.
func (me *TKeyword) Walk() (err error) {
	if fn := WalkHandlers.TKeyword; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ttext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Keyword struct {
	Keywords []*TKeyword `xml:"Keyword"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Keyword function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Keyword instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Keyword instance.
func (me *XsdGoPkgHasElems_Keyword) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Keyword; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Keywords {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TKeywordList struct {
	XsdGoPkgHasElems_Keyword

	XsdGoPkgHasAtts_AttlistKeywordList
}

//	If the WalkHandlers.TKeywordList function is not nil (ie. was set by outside code), calls it with this TKeywordList instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TKeywordList instance.
func (me *TKeywordList) Walk() (err error) {
	if fn := WalkHandlers.TKeywordList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Keyword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_KeywordList struct {
	KeywordLists []*TKeywordList `xml:"KeywordList"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_KeywordList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_KeywordList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_KeywordList instance.
func (me *XsdGoPkgHasElems_KeywordList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_KeywordList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.KeywordLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGeneralNote struct {
	XsdGoPkgHasAtts_AttlistGeneralNote

	XsdGoPkgHasCdata
}

//	If the WalkHandlers.TGeneralNote function is not nil (ie. was set by outside code), calls it with this TGeneralNote instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TGeneralNote instance.
func (me *TGeneralNote) Walk() (err error) {
	if fn := WalkHandlers.TGeneralNote; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GeneralNote struct {
	GeneralNotes []*TGeneralNote `xml:"GeneralNote"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GeneralNote function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GeneralNote instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GeneralNote instance.
func (me *XsdGoPkgHasElems_GeneralNote) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GeneralNote; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GeneralNotes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDateCreated struct {
	XsdGoPkgHasElem_Year

	XsdGoPkgHasElem_Month

	XsdGoPkgHasElem_Day
}

//	If the WalkHandlers.TDateCreated function is not nil (ie. was set by outside code), calls it with this TDateCreated instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TDateCreated instance.
func (me *TDateCreated) Walk() (err error) {
	if fn := WalkHandlers.TDateCreated; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Year.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Month.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Day.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DateCreated struct {
	DateCreated *TDateCreated `xml:"DateCreated"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DateCreated function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DateCreated instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DateCreated instance.
func (me *XsdGoPkgHasElem_DateCreated) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DateCreated; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DateCreated.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MedlineTA struct {
	MedlineTA xsdt.String `xml:"MedlineTA"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MedlineTA function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MedlineTA instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MedlineTA instance.
func (me *XsdGoPkgHasElem_MedlineTA) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MedlineTA; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NlmUniqueID struct {
	NlmUniqueID xsdt.String `xml:"NlmUniqueID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NlmUniqueID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NlmUniqueID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NlmUniqueID instance.
func (me *XsdGoPkgHasElem_NlmUniqueID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NlmUniqueID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ISSNLinking struct {
	ISSNLinking xsdt.String `xml:"ISSNLinking"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ISSNLinking function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ISSNLinking instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ISSNLinking instance.
func (me *XsdGoPkgHasElem_ISSNLinking) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ISSNLinking; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TMedlineJournalInfo struct {
	XsdGoPkgHasElem_ISSNLinking

	XsdGoPkgHasElem_Country

	XsdGoPkgHasElem_MedlineTA

	XsdGoPkgHasElem_NlmUniqueID
}

//	If the WalkHandlers.TMedlineJournalInfo function is not nil (ie. was set by outside code), calls it with this TMedlineJournalInfo instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TMedlineJournalInfo instance.
func (me *TMedlineJournalInfo) Walk() (err error) {
	if fn := WalkHandlers.TMedlineJournalInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Country.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MedlineTA.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NlmUniqueID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ISSNLinking.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MedlineJournalInfo struct {
	MedlineJournalInfo *TMedlineJournalInfo `xml:"MedlineJournalInfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MedlineJournalInfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MedlineJournalInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MedlineJournalInfo instance.
func (me *XsdGoPkgHasElem_MedlineJournalInfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MedlineJournalInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MedlineJournalInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDescriptorName struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_AttlistDescriptorName
}

//	If the WalkHandlers.TDescriptorName function is not nil (ie. was set by outside code), calls it with this TDescriptorName instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TDescriptorName instance.
func (me *TDescriptorName) Walk() (err error) {
	if fn := WalkHandlers.TDescriptorName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DescriptorName struct {
	DescriptorName *TDescriptorName `xml:"DescriptorName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DescriptorName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DescriptorName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DescriptorName instance.
func (me *XsdGoPkgHasElem_DescriptorName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DescriptorName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DescriptorName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TQualifierName struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_AttlistQualifierName
}

//	If the WalkHandlers.TQualifierName function is not nil (ie. was set by outside code), calls it with this TQualifierName instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TQualifierName instance.
func (me *TQualifierName) Walk() (err error) {
	if fn := WalkHandlers.TQualifierName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_QualifierName struct {
	QualifierNames []*TQualifierName `xml:"QualifierName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_QualifierName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_QualifierName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_QualifierName instance.
func (me *XsdGoPkgHasElems_QualifierName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_QualifierName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.QualifierNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TMeshHeading struct {
	XsdGoPkgHasElem_DescriptorName

	XsdGoPkgHasElems_QualifierName
}

//	If the WalkHandlers.TMeshHeading function is not nil (ie. was set by outside code), calls it with this TMeshHeading instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TMeshHeading instance.
func (me *TMeshHeading) Walk() (err error) {
	if fn := WalkHandlers.TMeshHeading; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_DescriptorName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_QualifierName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MeshHeading struct {
	MeshHeadings []*TMeshHeading `xml:"MeshHeading"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MeshHeading function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MeshHeading instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MeshHeading instance.
func (me *XsdGoPkgHasElems_MeshHeading) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MeshHeading; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MeshHeadings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TMeshHeadingList struct {
	XsdGoPkgHasElems_MeshHeading
}

//	If the WalkHandlers.TMeshHeadingList function is not nil (ie. was set by outside code), calls it with this TMeshHeadingList instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TMeshHeadingList instance.
func (me *TMeshHeadingList) Walk() (err error) {
	if fn := WalkHandlers.TMeshHeadingList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_MeshHeading.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MeshHeadingList struct {
	MeshHeadingList *TMeshHeadingList `xml:"MeshHeadingList"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MeshHeadingList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MeshHeadingList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MeshHeadingList instance.
func (me *XsdGoPkgHasElem_MeshHeadingList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MeshHeadingList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MeshHeadingList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSupplMeshName struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_AttlistSupplMeshName
}

//	If the WalkHandlers.TSupplMeshName function is not nil (ie. was set by outside code), calls it with this TSupplMeshName instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TSupplMeshName instance.
func (me *TSupplMeshName) Walk() (err error) {
	if fn := WalkHandlers.TSupplMeshName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SupplMeshName struct {
	SupplMeshNames []*TSupplMeshName `xml:"SupplMeshName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SupplMeshName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SupplMeshName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SupplMeshName instance.
func (me *XsdGoPkgHasElems_SupplMeshName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SupplMeshName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SupplMeshNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSupplMeshList struct {
	XsdGoPkgHasElems_SupplMeshName
}

//	If the WalkHandlers.TSupplMeshList function is not nil (ie. was set by outside code), calls it with this TSupplMeshList instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TSupplMeshList instance.
func (me *TSupplMeshList) Walk() (err error) {
	if fn := WalkHandlers.TSupplMeshList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_SupplMeshName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SupplMeshList struct {
	SupplMeshList *TSupplMeshList `xml:"SupplMeshList"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SupplMeshList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SupplMeshList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SupplMeshList instance.
func (me *XsdGoPkgHasElem_SupplMeshList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SupplMeshList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SupplMeshList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CitationSubset struct {
	CitationSubsets []xsdt.String `xml:"CitationSubset"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CitationSubset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CitationSubset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CitationSubset instance.
func (me *XsdGoPkgHasElems_CitationSubset) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CitationSubset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPersonalNameSubject struct {
	XsdGoPkgHasElem_LastName

	XsdGoPkgHasElem_ForeName

	XsdGoPkgHasElem_Initials

	XsdGoPkgHasElem_Suffix
}

//	If the WalkHandlers.TPersonalNameSubject function is not nil (ie. was set by outside code), calls it with this TPersonalNameSubject instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TPersonalNameSubject instance.
func (me *TPersonalNameSubject) Walk() (err error) {
	if fn := WalkHandlers.TPersonalNameSubject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_LastName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ForeName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Initials.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Suffix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PersonalNameSubject struct {
	PersonalNameSubjects []*TPersonalNameSubject `xml:"PersonalNameSubject"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PersonalNameSubject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PersonalNameSubject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PersonalNameSubject instance.
func (me *XsdGoPkgHasElems_PersonalNameSubject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PersonalNameSubject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PersonalNameSubjects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPersonalNameSubjectList struct {
	XsdGoPkgHasElems_PersonalNameSubject
}

//	If the WalkHandlers.TPersonalNameSubjectList function is not nil (ie. was set by outside code), calls it with this TPersonalNameSubjectList instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TPersonalNameSubjectList instance.
func (me *TPersonalNameSubjectList) Walk() (err error) {
	if fn := WalkHandlers.TPersonalNameSubjectList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_PersonalNameSubject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PersonalNameSubjectList struct {
	PersonalNameSubjectList *TPersonalNameSubjectList `xml:"PersonalNameSubjectList"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PersonalNameSubjectList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PersonalNameSubjectList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PersonalNameSubjectList instance.
func (me *XsdGoPkgHasElem_PersonalNameSubjectList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PersonalNameSubjectList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PersonalNameSubjectList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TOtherID struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_AttlistOtherID
}

//	If the WalkHandlers.TOtherID function is not nil (ie. was set by outside code), calls it with this TOtherID instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TOtherID instance.
func (me *TOtherID) Walk() (err error) {
	if fn := WalkHandlers.TOtherID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OtherID struct {
	OtherIDs []*TOtherID `xml:"OtherID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OtherID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OtherID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OtherID instance.
func (me *XsdGoPkgHasElems_OtherID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OtherID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OtherIDs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TOtherAbstract struct {
	XsdGoPkgHasElems_AbstractText

	XsdGoPkgHasElem_CopyrightInformation

	XsdGoPkgHasAtts_AttlistOtherAbstract
}

//	If the WalkHandlers.TOtherAbstract function is not nil (ie. was set by outside code), calls it with this TOtherAbstract instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TOtherAbstract instance.
func (me *TOtherAbstract) Walk() (err error) {
	if fn := WalkHandlers.TOtherAbstract; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_AbstractText.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CopyrightInformation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OtherAbstract struct {
	OtherAbstracts []*TOtherAbstract `xml:"OtherAbstract"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OtherAbstract function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OtherAbstract instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OtherAbstract instance.
func (me *XsdGoPkgHasElems_OtherAbstract) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OtherAbstract; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OtherAbstracts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RegistryNumber struct {
	RegistryNumber xsdt.String `xml:"RegistryNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RegistryNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RegistryNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RegistryNumber instance.
func (me *XsdGoPkgHasElem_RegistryNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RegistryNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TNameOfSubstance struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_AttlistNameOfSubstance
}

//	If the WalkHandlers.TNameOfSubstance function is not nil (ie. was set by outside code), calls it with this TNameOfSubstance instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TNameOfSubstance instance.
func (me *TNameOfSubstance) Walk() (err error) {
	if fn := WalkHandlers.TNameOfSubstance; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NameOfSubstance struct {
	NameOfSubstance *TNameOfSubstance `xml:"NameOfSubstance"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NameOfSubstance function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NameOfSubstance instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NameOfSubstance instance.
func (me *XsdGoPkgHasElem_NameOfSubstance) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NameOfSubstance; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NameOfSubstance.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TChemical struct {
	XsdGoPkgHasElem_RegistryNumber

	XsdGoPkgHasElem_NameOfSubstance
}

//	If the WalkHandlers.TChemical function is not nil (ie. was set by outside code), calls it with this TChemical instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TChemical instance.
func (me *TChemical) Walk() (err error) {
	if fn := WalkHandlers.TChemical; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_RegistryNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NameOfSubstance.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Chemical struct {
	Chemicals []*TChemical `xml:"Chemical"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Chemical function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Chemical instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Chemical instance.
func (me *XsdGoPkgHasElems_Chemical) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Chemical; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Chemicals {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TChemicalList struct {
	XsdGoPkgHasElems_Chemical
}

//	If the WalkHandlers.TChemicalList function is not nil (ie. was set by outside code), calls it with this TChemicalList instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TChemicalList instance.
func (me *TChemicalList) Walk() (err error) {
	if fn := WalkHandlers.TChemicalList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Chemical.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ChemicalList struct {
	ChemicalList *TChemicalList `xml:"ChemicalList"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ChemicalList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ChemicalList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ChemicalList instance.
func (me *XsdGoPkgHasElem_ChemicalList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ChemicalList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ChemicalList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TMedlineCitation struct {
	XsdGoPkgHasElem_DateRevised

	XsdGoPkgHasElem_Article

	XsdGoPkgHasElem_CommentsCorrectionsList

	XsdGoPkgHasElems_SpaceFlightMission

	XsdGoPkgHasElem_InvestigatorList

	XsdGoPkgHasElem_DateCreated

	XsdGoPkgHasElem_DateCompleted

	XsdGoPkgHasElem_GeneSymbolList

	XsdGoPkgHasElem_NumberOfReferences

	XsdGoPkgHasElems_KeywordList

	XsdGoPkgHasElems_GeneralNote

	XsdGoPkgHasElem_Pmid

	XsdGoPkgHasElem_MedlineJournalInfo

	XsdGoPkgHasElem_MeshHeadingList

	XsdGoPkgHasElem_ChemicalList

	XsdGoPkgHasElem_SupplMeshList

	XsdGoPkgHasElems_CitationSubset

	XsdGoPkgHasElem_PersonalNameSubjectList

	XsdGoPkgHasElems_OtherID

	XsdGoPkgHasElems_OtherAbstract

	XsdGoPkgHasAtts_AttlistMedlineCitation
}

//	If the WalkHandlers.TMedlineCitation function is not nil (ie. was set by outside code), calls it with this TMedlineCitation instance as the single argument. Then calls the Walk() method on 20/21 embed(s) and 0/0 field(s) belonging to this TMedlineCitation instance.
func (me *TMedlineCitation) Walk() (err error) {
	if fn := WalkHandlers.TMedlineCitation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_GeneSymbolList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NumberOfReferences.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_KeywordList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_GeneralNote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DateCreated.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DateCompleted.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MeshHeadingList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Pmid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MedlineJournalInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_CitationSubset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PersonalNameSubjectList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_OtherID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_OtherAbstract.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ChemicalList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SupplMeshList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CommentsCorrectionsList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SpaceFlightMission.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_InvestigatorList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DateRevised.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Article.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MedlineCitation struct {
	MedlineCitation *TMedlineCitation `xml:"MedlineCitation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MedlineCitation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MedlineCitation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MedlineCitation instance.
func (me *XsdGoPkgHasElem_MedlineCitation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MedlineCitation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MedlineCitation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPubmedArticle struct {
	XsdGoPkgHasElem_MedlineCitation

	XsdGoPkgHasElem_PubmedData
}

//	If the WalkHandlers.TPubmedArticle function is not nil (ie. was set by outside code), calls it with this TPubmedArticle instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TPubmedArticle instance.
func (me *TPubmedArticle) Walk() (err error) {
	if fn := WalkHandlers.TPubmedArticle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_MedlineCitation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PubmedData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PubmedArticle struct {
	PubmedArticles []*TPubmedArticle `xml:"PubmedArticle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PubmedArticle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PubmedArticle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PubmedArticle instance.
func (me *XsdGoPkgHasElems_PubmedArticle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PubmedArticle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PubmedArticles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Edition struct {
	Edition xsdt.String `xml:"Edition"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Edition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Edition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Edition instance.
func (me *XsdGoPkgHasElem_Edition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Edition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_VolumeTitle struct {
	VolumeTitle *Ttext `xml:"VolumeTitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_VolumeTitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_VolumeTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_VolumeTitle instance.
func (me *XsdGoPkgHasElem_VolumeTitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_VolumeTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.VolumeTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TBookTitle struct {
	Ttext

	XsdGoPkgHasAtts_AttlistBookTitle
}

//	If the WalkHandlers.TBookTitle function is not nil (ie. was set by outside code), calls it with this TBookTitle instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TBookTitle instance.
func (me *TBookTitle) Walk() (err error) {
	if fn := WalkHandlers.TBookTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ttext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BookTitle struct {
	BookTitle *TBookTitle `xml:"BookTitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BookTitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BookTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BookTitle instance.
func (me *XsdGoPkgHasElem_BookTitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BookTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BookTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TBeginningDate struct {
	XsdGoPkgHasElem_Season

	XsdGoPkgHasElem_Year

	XsdGoPkgHasElem_Month

	XsdGoPkgHasElem_Day
}

//	If the WalkHandlers.TBeginningDate function is not nil (ie. was set by outside code), calls it with this TBeginningDate instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TBeginningDate instance.
func (me *TBeginningDate) Walk() (err error) {
	if fn := WalkHandlers.TBeginningDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Day.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Season.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Year.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Month.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BeginningDate struct {
	BeginningDate *TBeginningDate `xml:"BeginningDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BeginningDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BeginningDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BeginningDate instance.
func (me *XsdGoPkgHasElem_BeginningDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BeginningDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BeginningDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TEndingDate struct {
	XsdGoPkgHasElem_Season

	XsdGoPkgHasElem_Year

	XsdGoPkgHasElem_Month

	XsdGoPkgHasElem_Day
}

//	If the WalkHandlers.TEndingDate function is not nil (ie. was set by outside code), calls it with this TEndingDate instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TEndingDate instance.
func (me *TEndingDate) Walk() (err error) {
	if fn := WalkHandlers.TEndingDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Season.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Year.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Month.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Day.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EndingDate struct {
	EndingDate *TEndingDate `xml:"EndingDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EndingDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EndingDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EndingDate instance.
func (me *XsdGoPkgHasElem_EndingDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EndingDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EndingDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TCollectionTitle struct {
	Ttext

	XsdGoPkgHasAtts_AttlistBookTitle
}

//	If the WalkHandlers.TCollectionTitle function is not nil (ie. was set by outside code), calls it with this TCollectionTitle instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TCollectionTitle instance.
func (me *TCollectionTitle) Walk() (err error) {
	if fn := WalkHandlers.TCollectionTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ttext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CollectionTitle struct {
	CollectionTitle *TCollectionTitle `xml:"CollectionTitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CollectionTitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CollectionTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CollectionTitle instance.
func (me *XsdGoPkgHasElem_CollectionTitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CollectionTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CollectionTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Isbn struct {
	Isbns []xsdt.String `xml:"Isbn"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Isbn function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Isbn instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Isbn instance.
func (me *XsdGoPkgHasElems_Isbn) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Isbn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PublisherName struct {
	PublisherName *Ttext `xml:"PublisherName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PublisherName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PublisherName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PublisherName instance.
func (me *XsdGoPkgHasElem_PublisherName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PublisherName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PublisherName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PublisherLocation struct {
	PublisherLocation xsdt.String `xml:"PublisherLocation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PublisherLocation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PublisherLocation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PublisherLocation instance.
func (me *XsdGoPkgHasElem_PublisherLocation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PublisherLocation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPublisher struct {
	XsdGoPkgHasElem_PublisherName

	XsdGoPkgHasElem_PublisherLocation
}

//	If the WalkHandlers.TPublisher function is not nil (ie. was set by outside code), calls it with this TPublisher instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TPublisher instance.
func (me *TPublisher) Walk() (err error) {
	if fn := WalkHandlers.TPublisher; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PublisherName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PublisherLocation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Publisher struct {
	Publisher *TPublisher `xml:"Publisher"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Publisher function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Publisher instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Publisher instance.
func (me *XsdGoPkgHasElem_Publisher) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Publisher; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Publisher.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Medium struct {
	Medium xsdt.String `xml:"Medium"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Medium function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Medium instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Medium instance.
func (me *XsdGoPkgHasElem_Medium) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Medium; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ReportNumber struct {
	ReportNumber xsdt.String `xml:"ReportNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReportNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReportNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ReportNumber instance.
func (me *XsdGoPkgHasElem_ReportNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReportNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AuthorList struct {
	AuthorLists []*TAuthorList `xml:"AuthorList"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AuthorList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AuthorList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AuthorList instance.
func (me *XsdGoPkgHasElems_AuthorList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AuthorList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthorLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TBook struct {
	XsdGoPkgHasElems_AuthorList

	XsdGoPkgHasElem_Medium

	XsdGoPkgHasElem_ReportNumber

	XsdGoPkgHasElem_Edition

	XsdGoPkgHasElems_ELocationID

	XsdGoPkgHasElem_BookTitle

	XsdGoPkgHasElem_VolumeTitle

	XsdGoPkgHasElem_Volume

	XsdGoPkgHasElem_CollectionTitle

	XsdGoPkgHasElems_Isbn

	XsdGoPkgHasElem_Publisher

	XsdGoPkgHasElem_PubDate

	XsdGoPkgHasElem_BeginningDate

	XsdGoPkgHasElem_EndingDate
}

//	If the WalkHandlers.TBook function is not nil (ie. was set by outside code), calls it with this TBook instance as the single argument. Then calls the Walk() method on 14/14 embed(s) and 0/0 field(s) belonging to this TBook instance.
func (me *TBook) Walk() (err error) {
	if fn := WalkHandlers.TBook; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_BookTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_VolumeTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Publisher.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PubDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_BeginningDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EndingDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Volume.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CollectionTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Isbn.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AuthorList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Medium.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ReportNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Edition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ELocationID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Book struct {
	Book *TBook `xml:"Book"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Book function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Book instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Book instance.
func (me *XsdGoPkgHasElem_Book) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Book; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Book.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TContributionDate struct {
	XsdGoPkgHasElem_Day

	XsdGoPkgHasElem_Season

	XsdGoPkgHasElem_Year

	XsdGoPkgHasElem_Month
}

//	If the WalkHandlers.TContributionDate function is not nil (ie. was set by outside code), calls it with this TContributionDate instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TContributionDate instance.
func (me *TContributionDate) Walk() (err error) {
	if fn := WalkHandlers.TContributionDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Season.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Year.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Month.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Day.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ContributionDate struct {
	ContributionDate *TContributionDate `xml:"ContributionDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ContributionDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ContributionDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ContributionDate instance.
func (me *XsdGoPkgHasElem_ContributionDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ContributionDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ContributionDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TLocationLabel struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_AttlistLocationLabel
}

//	If the WalkHandlers.TLocationLabel function is not nil (ie. was set by outside code), calls it with this TLocationLabel instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TLocationLabel instance.
func (me *TLocationLabel) Walk() (err error) {
	if fn := WalkHandlers.TLocationLabel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LocationLabel struct {
	LocationLabels []*TLocationLabel `xml:"LocationLabel"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LocationLabel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LocationLabel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LocationLabel instance.
func (me *XsdGoPkgHasElems_LocationLabel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LocationLabel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LocationLabels {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LocationLabel struct {
	LocationLabel *TLocationLabel `xml:"LocationLabel"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LocationLabel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LocationLabel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LocationLabel instance.
func (me *XsdGoPkgHasElem_LocationLabel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LocationLabel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LocationLabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSectionTitle struct {
	XsdGoPkgHasAtts_AttlistBookTitle

	Ttext
}

//	If the WalkHandlers.TSectionTitle function is not nil (ie. was set by outside code), calls it with this TSectionTitle instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TSectionTitle instance.
func (me *TSectionTitle) Walk() (err error) {
	if fn := WalkHandlers.TSectionTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ttext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SectionTitle struct {
	SectionTitle *TSectionTitle `xml:"SectionTitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SectionTitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SectionTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SectionTitle instance.
func (me *XsdGoPkgHasElem_SectionTitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SectionTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SectionTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSection struct {
	XsdGoPkgHasElem_LocationLabel

	XsdGoPkgHasElem_SectionTitle

	XsdGoPkgHasElems_Section
}

//	If the WalkHandlers.TSection function is not nil (ie. was set by outside code), calls it with this TSection instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TSection instance.
func (me *TSection) Walk() (err error) {
	if fn := WalkHandlers.TSection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_LocationLabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SectionTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Section struct {
	Sections []*TSection `xml:"Section"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Section function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Section instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Section instance.
func (me *XsdGoPkgHasElems_Section) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Section; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Sections {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSections struct {
	XsdGoPkgHasElems_Section
}

//	If the WalkHandlers.TSections function is not nil (ie. was set by outside code), calls it with this TSections instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TSections instance.
func (me *TSections) Walk() (err error) {
	if fn := WalkHandlers.TSections; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Section.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Sections struct {
	Sections *TSections `xml:"Sections"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Sections function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sections instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sections instance.
func (me *XsdGoPkgHasElem_Sections) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Sections; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sections.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CitationString struct {
	CitationString *Ttext `xml:"CitationString"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CitationString function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CitationString instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CitationString instance.
func (me *XsdGoPkgHasElem_CitationString) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CitationString; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CitationString.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Item struct {
	Items []xsdt.String `xml:"Item"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Item function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Item instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Item instance.
func (me *XsdGoPkgHasElems_Item) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Item; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TItemList struct {
	XsdGoPkgHasElems_Item

	XsdGoPkgHasAtts_AttlistItemList
}

//	If the WalkHandlers.TItemList function is not nil (ie. was set by outside code), calls it with this TItemList instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TItemList instance.
func (me *TItemList) Walk() (err error) {
	if fn := WalkHandlers.TItemList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Item.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ItemList struct {
	ItemLists []*TItemList `xml:"ItemList"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ItemList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ItemList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ItemList instance.
func (me *XsdGoPkgHasElems_ItemList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ItemList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ItemLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TBookDocument struct {
	XsdGoPkgHasElem_Book

	XsdGoPkgHasElems_PublicationType

	XsdGoPkgHasElem_Pmid

	XsdGoPkgHasElem_VernacularTitle

	XsdGoPkgHasElems_AuthorList

	XsdGoPkgHasElem_ContributionDate

	XsdGoPkgHasElem_DateRevised

	XsdGoPkgHasElem_CitationString

	XsdGoPkgHasElem_GrantList

	XsdGoPkgHasElem_ArticleIdList

	XsdGoPkgHasElems_LocationLabel

	XsdGoPkgHasElems_Language

	XsdGoPkgHasElem_Abstract

	XsdGoPkgHasElem_Sections

	XsdGoPkgHasElems_ItemList

	XsdGoPkgHasElem_ArticleTitle

	XsdGoPkgHasElem_Pagination

	XsdGoPkgHasElems_KeywordList
}

//	If the WalkHandlers.TBookDocument function is not nil (ie. was set by outside code), calls it with this TBookDocument instance as the single argument. Then calls the Walk() method on 18/18 embed(s) and 0/0 field(s) belonging to this TBookDocument instance.
func (me *TBookDocument) Walk() (err error) {
	if fn := WalkHandlers.TBookDocument; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ArticleTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Pagination.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_KeywordList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Book.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_PublicationType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Pmid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_VernacularTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AuthorList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ContributionDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CitationString.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GrantList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ArticleIdList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LocationLabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Language.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Abstract.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sections.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DateRevised.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ItemList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BookDocument struct {
	BookDocument *TBookDocument `xml:"BookDocument"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BookDocument function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BookDocument instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BookDocument instance.
func (me *XsdGoPkgHasElem_BookDocument) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BookDocument; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BookDocument.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPubmedBookData struct {
	XsdGoPkgHasElem_History

	XsdGoPkgHasElem_PublicationStatus

	XsdGoPkgHasElem_ArticleIdList

	XsdGoPkgHasElem_ObjectList
}

//	If the WalkHandlers.TPubmedBookData function is not nil (ie. was set by outside code), calls it with this TPubmedBookData instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TPubmedBookData instance.
func (me *TPubmedBookData) Walk() (err error) {
	if fn := WalkHandlers.TPubmedBookData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_History.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PublicationStatus.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ArticleIdList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ObjectList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PubmedBookData struct {
	PubmedBookData *TPubmedBookData `xml:"PubmedBookData"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PubmedBookData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PubmedBookData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PubmedBookData instance.
func (me *XsdGoPkgHasElem_PubmedBookData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PubmedBookData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PubmedBookData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPubmedBookArticle struct {
	XsdGoPkgHasElem_BookDocument

	XsdGoPkgHasElem_PubmedBookData
}

//	If the WalkHandlers.TPubmedBookArticle function is not nil (ie. was set by outside code), calls it with this TPubmedBookArticle instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TPubmedBookArticle instance.
func (me *TPubmedBookArticle) Walk() (err error) {
	if fn := WalkHandlers.TPubmedBookArticle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_BookDocument.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PubmedBookData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PubmedBookArticle struct {
	PubmedBookArticles []*TPubmedBookArticle `xml:"PubmedBookArticle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PubmedBookArticle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PubmedBookArticle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PubmedBookArticle instance.
func (me *XsdGoPkgHasElems_PubmedBookArticle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PubmedBookArticle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PubmedBookArticles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPubmedArticleSet struct {
	XsdGoPkgHasElems_PubmedArticle

	XsdGoPkgHasElems_PubmedBookArticle
}

//	If the WalkHandlers.TPubmedArticleSet function is not nil (ie. was set by outside code), calls it with this TPubmedArticleSet instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TPubmedArticleSet instance.
func (me *TPubmedArticleSet) Walk() (err error) {
	if fn := WalkHandlers.TPubmedArticleSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_PubmedArticle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_PubmedBookArticle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PubmedArticleSet struct {
	PubmedArticleSet *TPubmedArticleSet `xml:"PubmedArticleSet"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PubmedArticleSet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PubmedArticleSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PubmedArticleSet instance.
func (me *XsdGoPkgHasElem_PubmedArticleSet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PubmedArticleSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PubmedArticleSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PubmedArticleSet struct {
	PubmedArticleSets []*TPubmedArticleSet `xml:"PubmedArticleSet"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PubmedArticleSet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PubmedArticleSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PubmedArticleSet instance.
func (me *XsdGoPkgHasElems_PubmedArticleSet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PubmedArticleSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PubmedArticleSets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PubmedArticle struct {
	PubmedArticle *TPubmedArticle `xml:"PubmedArticle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PubmedArticle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PubmedArticle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PubmedArticle instance.
func (me *XsdGoPkgHasElem_PubmedArticle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PubmedArticle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PubmedArticle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PubmedData struct {
	PubmedDatas []*TPubmedData `xml:"PubmedData"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PubmedData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PubmedData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PubmedData instance.
func (me *XsdGoPkgHasElems_PubmedData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PubmedData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PubmedDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PubMedPubDate struct {
	PubMedPubDate *TPubMedPubDate `xml:"PubMedPubDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PubMedPubDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PubMedPubDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PubMedPubDate instance.
func (me *XsdGoPkgHasElem_PubMedPubDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PubMedPubDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PubMedPubDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PublicationStatus struct {
	PublicationStatuses []xsdt.String `xml:"PublicationStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PublicationStatus function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PublicationStatus instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PublicationStatus instance.
func (me *XsdGoPkgHasElems_PublicationStatus) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PublicationStatus; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ArticleIdList struct {
	ArticleIdLists []*TArticleIdList `xml:"ArticleIdList"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ArticleIdList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ArticleIdList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ArticleIdList instance.
func (me *XsdGoPkgHasElems_ArticleIdList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ArticleIdList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ArticleIdLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ArticleId struct {
	ArticleId *TArticleId `xml:"ArticleId"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ArticleId function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ArticleId instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ArticleId instance.
func (me *XsdGoPkgHasElem_ArticleId) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ArticleId; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ArticleId.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_History struct {
	Histories []*THistory `xml:"History"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_History function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_History instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_History instance.
func (me *XsdGoPkgHasElems_History) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_History; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Histories {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TUrl struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_AttlistUrl
}

//	If the WalkHandlers.TUrl function is not nil (ie. was set by outside code), calls it with this TUrl instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TUrl instance.
func (me *TUrl) Walk() (err error) {
	if fn := WalkHandlers.TUrl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Url struct {
	Url *TUrl `xml:"URL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Url function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Url instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Url instance.
func (me *XsdGoPkgHasElem_Url) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Url; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Url.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Url struct {
	Urls []*TUrl `xml:"URL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Url function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Url instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Url instance.
func (me *XsdGoPkgHasElems_Url) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Url; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Urls {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ObjectList struct {
	ObjectLists []*TObjectList `xml:"ObjectList"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ObjectList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ObjectList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ObjectList instance.
func (me *XsdGoPkgHasElems_ObjectList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ObjectList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ObjectLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Object struct {
	Object *TObject `xml:"Object"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Object function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Object instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Object instance.
func (me *XsdGoPkgHasElem_Object) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Object; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Object.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Param struct {
	Param *TParam `xml:"Param"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Param function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Param instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Param instance.
func (me *XsdGoPkgHasElem_Param) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Param; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Hour struct {
	Hours []xsdt.String `xml:"Hour"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Hour function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Hour instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Hour instance.
func (me *XsdGoPkgHasElems_Hour) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Hour; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Minute struct {
	Minutes []xsdt.String `xml:"Minute"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Minute function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Minute instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Minute instance.
func (me *XsdGoPkgHasElems_Minute) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Minute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Second struct {
	Seconds []xsdt.String `xml:"Second"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Second function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Second instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Second instance.
func (me *XsdGoPkgHasElems_Second) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Second; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_B struct {
	B xsdt.String `xml:"b"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_B function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_B instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_B instance.
func (me *XsdGoPkgHasElem_B) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_B; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_I struct {
	I xsdt.String `xml:"i"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_I function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_I instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_I instance.
func (me *XsdGoPkgHasElem_I) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_I; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Sup struct {
	Sup xsdt.String `xml:"sup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Sup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Sup instance.
func (me *XsdGoPkgHasElem_Sup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Sup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Sub struct {
	Sub xsdt.String `xml:"sub"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Sub function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sub instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Sub instance.
func (me *XsdGoPkgHasElem_Sub) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Sub; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_U struct {
	U xsdt.String `xml:"u"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_U function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_U instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_U instance.
func (me *XsdGoPkgHasElem_U) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_U; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Format struct {
	Format *Ttext `xml:"format"`

	XsdGoPkgHasElem_Sup

	XsdGoPkgHasElem_Sub

	XsdGoPkgHasElem_U

	XsdGoPkgHasElem_B

	XsdGoPkgHasElem_I
}

//	If the WalkHandlers.XsdGoPkgHasElem_Format function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Format instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Format instance.
func (me *XsdGoPkgHasElem_Format) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Format; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Sup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sub.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_U.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_B.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_I.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Format.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MedlineCitation struct {
	MedlineCitations []*TMedlineCitation `xml:"MedlineCitation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MedlineCitation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MedlineCitation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MedlineCitation instance.
func (me *XsdGoPkgHasElems_MedlineCitation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MedlineCitation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MedlineCitations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Pmid struct {
	Pmids []*TPmid `xml:"PMID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Pmid function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Pmid instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Pmid instance.
func (me *XsdGoPkgHasElems_Pmid) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Pmid; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Pmids {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDeleteCitation struct {
	XsdGoPkgHasElems_Pmid
}

//	If the WalkHandlers.TDeleteCitation function is not nil (ie. was set by outside code), calls it with this TDeleteCitation instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TDeleteCitation instance.
func (me *TDeleteCitation) Walk() (err error) {
	if fn := WalkHandlers.TDeleteCitation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Pmid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DeleteCitation struct {
	DeleteCitation *TDeleteCitation `xml:"DeleteCitation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DeleteCitation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DeleteCitation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DeleteCitation instance.
func (me *XsdGoPkgHasElem_DeleteCitation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DeleteCitation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DeleteCitation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TMedlineCitationSet struct {
	XsdGoPkgHasElems_MedlineCitation

	XsdGoPkgHasElem_DeleteCitation
}

//	If the WalkHandlers.TMedlineCitationSet function is not nil (ie. was set by outside code), calls it with this TMedlineCitationSet instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TMedlineCitationSet instance.
func (me *TMedlineCitationSet) Walk() (err error) {
	if fn := WalkHandlers.TMedlineCitationSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_MedlineCitation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DeleteCitation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MedlineCitationSet struct {
	MedlineCitationSets []*TMedlineCitationSet `xml:"MedlineCitationSet"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MedlineCitationSet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MedlineCitationSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MedlineCitationSet instance.
func (me *XsdGoPkgHasElems_MedlineCitationSet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MedlineCitationSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MedlineCitationSets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MedlineCitationSet struct {
	MedlineCitationSet *TMedlineCitationSet `xml:"MedlineCitationSet"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MedlineCitationSet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MedlineCitationSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MedlineCitationSet instance.
func (me *XsdGoPkgHasElem_MedlineCitationSet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MedlineCitationSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MedlineCitationSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Abstract struct {
	Abstracts []*TAbstract `xml:"Abstract"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Abstract function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Abstract instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Abstract instance.
func (me *XsdGoPkgHasElems_Abstract) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Abstract; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Abstracts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AbstractText struct {
	AbstractText *TAbstractText `xml:"AbstractText"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbstractText function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbstractText instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AbstractText instance.
func (me *XsdGoPkgHasElem_AbstractText) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AbstractText; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AbstractText.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AccessionNumber struct {
	AccessionNumber xsdt.String `xml:"AccessionNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AccessionNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AccessionNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AccessionNumber instance.
func (me *XsdGoPkgHasElem_AccessionNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AccessionNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AccessionNumberList struct {
	AccessionNumberLists []*TAccessionNumberList `xml:"AccessionNumberList"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AccessionNumberList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AccessionNumberList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AccessionNumberList instance.
func (me *XsdGoPkgHasElems_AccessionNumberList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AccessionNumberList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AccessionNumberLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Acronym struct {
	Acronyms []xsdt.String `xml:"Acronym"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Acronym function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Acronym instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Acronym instance.
func (me *XsdGoPkgHasElems_Acronym) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Acronym; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Affiliation struct {
	Affiliations []*Ttext `xml:"Affiliation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Affiliation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Affiliation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Affiliation instance.
func (me *XsdGoPkgHasElems_Affiliation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Affiliation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Affiliations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AffiliationInfo struct {
	AffiliationInfo *TAffiliationInfo `xml:"AffiliationInfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AffiliationInfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AffiliationInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AffiliationInfo instance.
func (me *XsdGoPkgHasElem_AffiliationInfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AffiliationInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AffiliationInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Agency struct {
	Agencies []xsdt.String `xml:"Agency"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Agency function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Agency instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Agency instance.
func (me *XsdGoPkgHasElems_Agency) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Agency; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Article struct {
	Articles []*TArticle `xml:"Article"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Article function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Article instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Article instance.
func (me *XsdGoPkgHasElems_Article) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Article; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Articles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ArticleDate struct {
	ArticleDate *TArticleDate `xml:"ArticleDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ArticleDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ArticleDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ArticleDate instance.
func (me *XsdGoPkgHasElem_ArticleDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ArticleDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ArticleDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ArticleTitle struct {
	ArticleTitles []*TArticleTitle `xml:"ArticleTitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ArticleTitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ArticleTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ArticleTitle instance.
func (me *XsdGoPkgHasElems_ArticleTitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ArticleTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ArticleTitles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Author struct {
	Author *TAuthor `xml:"Author"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Author function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Author instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Author instance.
func (me *XsdGoPkgHasElem_Author) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Author; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Chemical struct {
	Chemical *TChemical `xml:"Chemical"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Chemical function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Chemical instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Chemical instance.
func (me *XsdGoPkgHasElem_Chemical) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Chemical; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Chemical.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ChemicalList struct {
	ChemicalLists []*TChemicalList `xml:"ChemicalList"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ChemicalList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ChemicalList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ChemicalList instance.
func (me *XsdGoPkgHasElems_ChemicalList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ChemicalList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ChemicalLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CitationSubset struct {
	CitationSubset xsdt.String `xml:"CitationSubset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CitationSubset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CitationSubset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CitationSubset instance.
func (me *XsdGoPkgHasElem_CitationSubset) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CitationSubset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CollectiveName struct {
	CollectiveNames []*Ttext `xml:"CollectiveName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CollectiveName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CollectiveName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CollectiveName instance.
func (me *XsdGoPkgHasElems_CollectiveName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CollectiveName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CollectiveNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CommentsCorrections struct {
	CommentsCorrections *TCommentsCorrections `xml:"CommentsCorrections"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CommentsCorrections function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CommentsCorrections instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CommentsCorrections instance.
func (me *XsdGoPkgHasElem_CommentsCorrections) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CommentsCorrections; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CommentsCorrections.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CommentsCorrectionsList struct {
	CommentsCorrectionsLists []*TCommentsCorrectionsList `xml:"CommentsCorrectionsList"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CommentsCorrectionsList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CommentsCorrectionsList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CommentsCorrectionsList instance.
func (me *XsdGoPkgHasElems_CommentsCorrectionsList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CommentsCorrectionsList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CommentsCorrectionsLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CopyrightInformation struct {
	CopyrightInformations []xsdt.String `xml:"CopyrightInformation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CopyrightInformation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CopyrightInformation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CopyrightInformation instance.
func (me *XsdGoPkgHasElems_CopyrightInformation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CopyrightInformation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Country struct {
	Countries []xsdt.String `xml:"Country"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Country function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Country instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Country instance.
func (me *XsdGoPkgHasElems_Country) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Country; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DataBank struct {
	DataBank *TDataBank `xml:"DataBank"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DataBank function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DataBank instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DataBank instance.
func (me *XsdGoPkgHasElem_DataBank) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DataBank; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DataBank.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DataBankList struct {
	DataBankLists []*TDataBankList `xml:"DataBankList"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DataBankList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DataBankList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DataBankList instance.
func (me *XsdGoPkgHasElems_DataBankList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DataBankList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DataBankLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DataBankName struct {
	DataBankNames []xsdt.String `xml:"DataBankName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DataBankName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DataBankName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DataBankName instance.
func (me *XsdGoPkgHasElems_DataBankName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DataBankName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DateCompleted struct {
	DateCompleteds []*TDateCompleted `xml:"DateCompleted"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DateCompleted function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DateCompleted instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DateCompleted instance.
func (me *XsdGoPkgHasElems_DateCompleted) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DateCompleted; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DateCompleteds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DateCreated struct {
	DateCreateds []*TDateCreated `xml:"DateCreated"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DateCreated function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DateCreated instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DateCreated instance.
func (me *XsdGoPkgHasElems_DateCreated) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DateCreated; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DateCreateds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DateRevised struct {
	DateReviseds []*TDateRevised `xml:"DateRevised"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DateRevised function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DateRevised instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DateRevised instance.
func (me *XsdGoPkgHasElems_DateRevised) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DateRevised; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DateReviseds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Day struct {
	Days []xsdt.String `xml:"Day"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Day function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Day instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Day instance.
func (me *XsdGoPkgHasElems_Day) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Day; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DescriptorName struct {
	DescriptorNames []*TDescriptorName `xml:"DescriptorName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DescriptorName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DescriptorName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DescriptorName instance.
func (me *XsdGoPkgHasElems_DescriptorName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DescriptorName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DescriptorNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ELocationID struct {
	ELocationID *TELocationID `xml:"ELocationID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ELocationID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ELocationID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ELocationID instance.
func (me *XsdGoPkgHasElem_ELocationID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ELocationID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ELocationID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EndPage struct {
	EndPages []xsdt.String `xml:"EndPage"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EndPage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EndPage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EndPage instance.
func (me *XsdGoPkgHasElems_EndPage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EndPage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ForeName struct {
	ForeNames []xsdt.String `xml:"ForeName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ForeName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ForeName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ForeName instance.
func (me *XsdGoPkgHasElems_ForeName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ForeName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GeneSymbol struct {
	GeneSymbol xsdt.String `xml:"GeneSymbol"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GeneSymbol function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GeneSymbol instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_GeneSymbol instance.
func (me *XsdGoPkgHasElem_GeneSymbol) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GeneSymbol; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GeneSymbolList struct {
	GeneSymbolLists []*TGeneSymbolList `xml:"GeneSymbolList"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GeneSymbolList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GeneSymbolList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GeneSymbolList instance.
func (me *XsdGoPkgHasElems_GeneSymbolList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GeneSymbolList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GeneSymbolLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GeneralNote struct {
	GeneralNote *TGeneralNote `xml:"GeneralNote"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GeneralNote function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GeneralNote instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GeneralNote instance.
func (me *XsdGoPkgHasElem_GeneralNote) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GeneralNote; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GeneralNote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Grant struct {
	Grant *TGrant `xml:"Grant"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Grant function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Grant instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Grant instance.
func (me *XsdGoPkgHasElem_Grant) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Grant; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Grant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GrantID struct {
	GrantIDs []xsdt.String `xml:"GrantID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GrantID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GrantID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GrantID instance.
func (me *XsdGoPkgHasElems_GrantID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GrantID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GrantList struct {
	GrantLists []*TGrantList `xml:"GrantList"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GrantList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GrantList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GrantList instance.
func (me *XsdGoPkgHasElems_GrantList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GrantList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GrantLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Identifier struct {
	Identifier *TIdentifier `xml:"Identifier"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Identifier function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Identifier instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Identifier instance.
func (me *XsdGoPkgHasElem_Identifier) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Identifier; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Identifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ISOAbbreviation struct {
	ISOAbbreviations []xsdt.String `xml:"ISOAbbreviation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ISOAbbreviation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ISOAbbreviation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ISOAbbreviation instance.
func (me *XsdGoPkgHasElems_ISOAbbreviation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ISOAbbreviation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Issn struct {
	Issns []*TIssn `xml:"ISSN"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Issn function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Issn instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Issn instance.
func (me *XsdGoPkgHasElems_Issn) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Issn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Issns {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ISSNLinking struct {
	ISSNLinkings []xsdt.String `xml:"ISSNLinking"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ISSNLinking function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ISSNLinking instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ISSNLinking instance.
func (me *XsdGoPkgHasElems_ISSNLinking) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ISSNLinking; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Initials struct {
	Initialses []xsdt.String `xml:"Initials"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Initials function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Initials instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Initials instance.
func (me *XsdGoPkgHasElems_Initials) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Initials; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Investigator struct {
	Investigator *TInvestigator `xml:"Investigator"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Investigator function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Investigator instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Investigator instance.
func (me *XsdGoPkgHasElem_Investigator) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Investigator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Investigator.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InvestigatorList struct {
	InvestigatorLists []*TInvestigatorList `xml:"InvestigatorList"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InvestigatorList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InvestigatorList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InvestigatorList instance.
func (me *XsdGoPkgHasElems_InvestigatorList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InvestigatorList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.InvestigatorLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Issue struct {
	Issues []xsdt.String `xml:"Issue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Issue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Issue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Issue instance.
func (me *XsdGoPkgHasElems_Issue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Issue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Journal struct {
	Journals []*TJournal `xml:"Journal"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Journal function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Journal instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Journal instance.
func (me *XsdGoPkgHasElems_Journal) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Journal; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Journals {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_JournalIssue struct {
	JournalIssues []*TJournalIssue `xml:"JournalIssue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_JournalIssue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_JournalIssue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_JournalIssue instance.
func (me *XsdGoPkgHasElems_JournalIssue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_JournalIssue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.JournalIssues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Keyword struct {
	Keyword *TKeyword `xml:"Keyword"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Keyword function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Keyword instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Keyword instance.
func (me *XsdGoPkgHasElem_Keyword) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Keyword; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Keyword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_KeywordList struct {
	KeywordList *TKeywordList `xml:"KeywordList"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_KeywordList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_KeywordList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_KeywordList instance.
func (me *XsdGoPkgHasElem_KeywordList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_KeywordList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.KeywordList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Language struct {
	Language xsdt.String `xml:"Language"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Language function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Language instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Language instance.
func (me *XsdGoPkgHasElem_Language) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Language; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LastName struct {
	LastNames []xsdt.String `xml:"LastName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LastName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LastName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LastName instance.
func (me *XsdGoPkgHasElems_LastName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LastName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MedlineDate struct {
	MedlineDates []xsdt.String `xml:"MedlineDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MedlineDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MedlineDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MedlineDate instance.
func (me *XsdGoPkgHasElems_MedlineDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MedlineDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MedlineJournalInfo struct {
	MedlineJournalInfos []*TMedlineJournalInfo `xml:"MedlineJournalInfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MedlineJournalInfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MedlineJournalInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MedlineJournalInfo instance.
func (me *XsdGoPkgHasElems_MedlineJournalInfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MedlineJournalInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MedlineJournalInfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MedlinePgn struct {
	MedlinePgns []xsdt.String `xml:"MedlinePgn"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MedlinePgn function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MedlinePgn instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MedlinePgn instance.
func (me *XsdGoPkgHasElems_MedlinePgn) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MedlinePgn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MedlineTA struct {
	MedlineTAs []xsdt.String `xml:"MedlineTA"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MedlineTA function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MedlineTA instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MedlineTA instance.
func (me *XsdGoPkgHasElems_MedlineTA) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MedlineTA; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MeshHeading struct {
	MeshHeading *TMeshHeading `xml:"MeshHeading"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MeshHeading function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MeshHeading instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MeshHeading instance.
func (me *XsdGoPkgHasElem_MeshHeading) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MeshHeading; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MeshHeading.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MeshHeadingList struct {
	MeshHeadingLists []*TMeshHeadingList `xml:"MeshHeadingList"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MeshHeadingList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MeshHeadingList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MeshHeadingList instance.
func (me *XsdGoPkgHasElems_MeshHeadingList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MeshHeadingList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MeshHeadingLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Month struct {
	Months []xsdt.String `xml:"Month"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Month function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Month instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Month instance.
func (me *XsdGoPkgHasElems_Month) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Month; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NameOfSubstance struct {
	NameOfSubstances []*TNameOfSubstance `xml:"NameOfSubstance"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NameOfSubstance function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NameOfSubstance instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NameOfSubstance instance.
func (me *XsdGoPkgHasElems_NameOfSubstance) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NameOfSubstance; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NameOfSubstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NlmUniqueID struct {
	NlmUniqueIDs []xsdt.String `xml:"NlmUniqueID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NlmUniqueID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NlmUniqueID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NlmUniqueID instance.
func (me *XsdGoPkgHasElems_NlmUniqueID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NlmUniqueID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Note struct {
	Notes []xsdt.String `xml:"Note"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Note function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Note instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Note instance.
func (me *XsdGoPkgHasElems_Note) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Note; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NumberOfReferences struct {
	NumberOfReferenceses []xsdt.String `xml:"NumberOfReferences"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NumberOfReferences function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NumberOfReferences instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NumberOfReferences instance.
func (me *XsdGoPkgHasElems_NumberOfReferences) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NumberOfReferences; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OtherAbstract struct {
	OtherAbstract *TOtherAbstract `xml:"OtherAbstract"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OtherAbstract function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OtherAbstract instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OtherAbstract instance.
func (me *XsdGoPkgHasElem_OtherAbstract) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OtherAbstract; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OtherAbstract.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OtherID struct {
	OtherID *TOtherID `xml:"OtherID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OtherID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OtherID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OtherID instance.
func (me *XsdGoPkgHasElem_OtherID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OtherID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OtherID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Pagination struct {
	Paginations []*TPagination `xml:"Pagination"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Pagination function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Pagination instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Pagination instance.
func (me *XsdGoPkgHasElems_Pagination) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Pagination; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Paginations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PersonalNameSubject struct {
	PersonalNameSubject *TPersonalNameSubject `xml:"PersonalNameSubject"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PersonalNameSubject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PersonalNameSubject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PersonalNameSubject instance.
func (me *XsdGoPkgHasElem_PersonalNameSubject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PersonalNameSubject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PersonalNameSubject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PersonalNameSubjectList struct {
	PersonalNameSubjectLists []*TPersonalNameSubjectList `xml:"PersonalNameSubjectList"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PersonalNameSubjectList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PersonalNameSubjectList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PersonalNameSubjectList instance.
func (me *XsdGoPkgHasElems_PersonalNameSubjectList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PersonalNameSubjectList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PersonalNameSubjectLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PubDate struct {
	PubDates []*TPubDate `xml:"PubDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PubDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PubDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PubDate instance.
func (me *XsdGoPkgHasElems_PubDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PubDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PubDates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PublicationType struct {
	PublicationType *TPublicationType `xml:"PublicationType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PublicationType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PublicationType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PublicationType instance.
func (me *XsdGoPkgHasElem_PublicationType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PublicationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PublicationType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PublicationTypeList struct {
	PublicationTypeLists []*TPublicationTypeList `xml:"PublicationTypeList"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PublicationTypeList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PublicationTypeList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PublicationTypeList instance.
func (me *XsdGoPkgHasElems_PublicationTypeList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PublicationTypeList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PublicationTypeLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_QualifierName struct {
	QualifierName *TQualifierName `xml:"QualifierName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_QualifierName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_QualifierName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_QualifierName instance.
func (me *XsdGoPkgHasElem_QualifierName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_QualifierName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.QualifierName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RefSource struct {
	RefSources []xsdt.String `xml:"RefSource"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RefSource function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RefSource instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RefSource instance.
func (me *XsdGoPkgHasElems_RefSource) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RefSource; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RegistryNumber struct {
	RegistryNumbers []xsdt.String `xml:"RegistryNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RegistryNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RegistryNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RegistryNumber instance.
func (me *XsdGoPkgHasElems_RegistryNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RegistryNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Season struct {
	Seasons []xsdt.String `xml:"Season"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Season function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Season instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Season instance.
func (me *XsdGoPkgHasElems_Season) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Season; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SpaceFlightMission struct {
	SpaceFlightMission xsdt.String `xml:"SpaceFlightMission"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SpaceFlightMission function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SpaceFlightMission instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SpaceFlightMission instance.
func (me *XsdGoPkgHasElem_SpaceFlightMission) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SpaceFlightMission; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_StartPage struct {
	StartPages []xsdt.String `xml:"StartPage"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StartPage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StartPage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StartPage instance.
func (me *XsdGoPkgHasElems_StartPage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StartPage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Suffix struct {
	Suffixs []*Ttext `xml:"Suffix"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Suffix function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Suffix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Suffix instance.
func (me *XsdGoPkgHasElems_Suffix) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Suffix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Suffixs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SupplMeshList struct {
	SupplMeshLists []*TSupplMeshList `xml:"SupplMeshList"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SupplMeshList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SupplMeshList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SupplMeshList instance.
func (me *XsdGoPkgHasElems_SupplMeshList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SupplMeshList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SupplMeshLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SupplMeshName struct {
	SupplMeshName *TSupplMeshName `xml:"SupplMeshName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SupplMeshName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SupplMeshName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SupplMeshName instance.
func (me *XsdGoPkgHasElem_SupplMeshName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SupplMeshName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SupplMeshName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Title struct {
	Titles []xsdt.String `xml:"Title"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Title function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Title instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Title instance.
func (me *XsdGoPkgHasElems_Title) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Title; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_VernacularTitle struct {
	VernacularTitles []*Ttext `xml:"VernacularTitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_VernacularTitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_VernacularTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_VernacularTitle instance.
func (me *XsdGoPkgHasElems_VernacularTitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_VernacularTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.VernacularTitles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Volume struct {
	Volumes []xsdt.String `xml:"Volume"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Volume function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Volume instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Volume instance.
func (me *XsdGoPkgHasElems_Volume) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Volume; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Year struct {
	Years []xsdt.String `xml:"Year"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Year function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Year instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Year instance.
func (me *XsdGoPkgHasElems_Year) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Year; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DeleteCitation struct {
	DeleteCitations []*TDeleteCitation `xml:"DeleteCitation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DeleteCitation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DeleteCitation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DeleteCitation instance.
func (me *XsdGoPkgHasElems_DeleteCitation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DeleteCitation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DeleteCitations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BookDocument struct {
	BookDocuments []*TBookDocument `xml:"BookDocument"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BookDocument function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BookDocument instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BookDocument instance.
func (me *XsdGoPkgHasElems_BookDocument) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BookDocument; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BookDocuments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDeleteDocument struct {
	XsdGoPkgHasElems_Pmid
}

//	If the WalkHandlers.TDeleteDocument function is not nil (ie. was set by outside code), calls it with this TDeleteDocument instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TDeleteDocument instance.
func (me *TDeleteDocument) Walk() (err error) {
	if fn := WalkHandlers.TDeleteDocument; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Pmid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DeleteDocument struct {
	DeleteDocument *TDeleteDocument `xml:"DeleteDocument"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DeleteDocument function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DeleteDocument instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DeleteDocument instance.
func (me *XsdGoPkgHasElem_DeleteDocument) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DeleteDocument; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DeleteDocument.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TBookDocumentSet struct {
	XsdGoPkgHasElems_BookDocument

	XsdGoPkgHasElem_DeleteDocument
}

//	If the WalkHandlers.TBookDocumentSet function is not nil (ie. was set by outside code), calls it with this TBookDocumentSet instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TBookDocumentSet instance.
func (me *TBookDocumentSet) Walk() (err error) {
	if fn := WalkHandlers.TBookDocumentSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_BookDocument.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DeleteDocument.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BookDocumentSet struct {
	BookDocumentSet *TBookDocumentSet `xml:"BookDocumentSet"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BookDocumentSet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BookDocumentSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BookDocumentSet instance.
func (me *XsdGoPkgHasElem_BookDocumentSet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BookDocumentSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BookDocumentSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BookDocumentSet struct {
	BookDocumentSets []*TBookDocumentSet `xml:"BookDocumentSet"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BookDocumentSet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BookDocumentSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BookDocumentSet instance.
func (me *XsdGoPkgHasElems_BookDocumentSet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BookDocumentSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BookDocumentSets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Book struct {
	Books []*TBook `xml:"Book"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Book function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Book instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Book instance.
func (me *XsdGoPkgHasElems_Book) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Book; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Books {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Publisher struct {
	Publishers []*TPublisher `xml:"Publisher"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Publisher function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Publisher instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Publisher instance.
func (me *XsdGoPkgHasElems_Publisher) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Publisher; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Publishers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PublisherName struct {
	PublisherNames []*Ttext `xml:"PublisherName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PublisherName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PublisherName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PublisherName instance.
func (me *XsdGoPkgHasElems_PublisherName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PublisherName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PublisherNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PublisherLocation struct {
	PublisherLocations []xsdt.String `xml:"PublisherLocation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PublisherLocation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PublisherLocation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PublisherLocation instance.
func (me *XsdGoPkgHasElems_PublisherLocation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PublisherLocation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BookTitle struct {
	BookTitles []*TBookTitle `xml:"BookTitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BookTitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BookTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BookTitle instance.
func (me *XsdGoPkgHasElems_BookTitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BookTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BookTitles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ContributionDate struct {
	ContributionDates []*TContributionDate `xml:"ContributionDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ContributionDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ContributionDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ContributionDate instance.
func (me *XsdGoPkgHasElems_ContributionDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ContributionDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ContributionDates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BeginningDate struct {
	BeginningDates []*TBeginningDate `xml:"BeginningDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BeginningDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BeginningDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BeginningDate instance.
func (me *XsdGoPkgHasElems_BeginningDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BeginningDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BeginningDates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EndingDate struct {
	EndingDates []*TEndingDate `xml:"EndingDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EndingDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EndingDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EndingDate instance.
func (me *XsdGoPkgHasElems_EndingDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EndingDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EndingDates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_VolumeTitle struct {
	VolumeTitles []*Ttext `xml:"VolumeTitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_VolumeTitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_VolumeTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_VolumeTitle instance.
func (me *XsdGoPkgHasElems_VolumeTitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_VolumeTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.VolumeTitles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Edition struct {
	Editions []xsdt.String `xml:"Edition"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Edition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Edition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Edition instance.
func (me *XsdGoPkgHasElems_Edition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Edition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CollectionTitle struct {
	CollectionTitles []*TCollectionTitle `xml:"CollectionTitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CollectionTitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CollectionTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CollectionTitle instance.
func (me *XsdGoPkgHasElems_CollectionTitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CollectionTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CollectionTitles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Isbn struct {
	Isbn xsdt.String `xml:"Isbn"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Isbn function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Isbn instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Isbn instance.
func (me *XsdGoPkgHasElem_Isbn) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Isbn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Medium struct {
	Mediums []xsdt.String `xml:"Medium"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Medium function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Medium instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Medium instance.
func (me *XsdGoPkgHasElems_Medium) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Medium; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ReportNumber struct {
	ReportNumbers []xsdt.String `xml:"ReportNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReportNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReportNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReportNumber instance.
func (me *XsdGoPkgHasElems_ReportNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReportNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ContractNumber struct {
	ContractNumber xsdt.String `xml:"ContractNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ContractNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ContractNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ContractNumber instance.
func (me *XsdGoPkgHasElem_ContractNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ContractNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ContractNumber struct {
	ContractNumbers []xsdt.String `xml:"ContractNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ContractNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ContractNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ContractNumber instance.
func (me *XsdGoPkgHasElems_ContractNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ContractNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CitationString struct {
	CitationStrings []*Ttext `xml:"CitationString"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CitationString function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CitationString instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CitationString instance.
func (me *XsdGoPkgHasElems_CitationString) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CitationString; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CitationStrings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DeleteDocument struct {
	DeleteDocuments []*TDeleteDocument `xml:"DeleteDocument"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DeleteDocument function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DeleteDocument instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DeleteDocument instance.
func (me *XsdGoPkgHasElems_DeleteDocument) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DeleteDocument; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DeleteDocuments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PubmedBookArticle struct {
	PubmedBookArticle *TPubmedBookArticle `xml:"PubmedBookArticle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PubmedBookArticle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PubmedBookArticle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PubmedBookArticle instance.
func (me *XsdGoPkgHasElem_PubmedBookArticle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PubmedBookArticle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PubmedBookArticle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PubmedBookData struct {
	PubmedBookDatas []*TPubmedBookData `xml:"PubmedBookData"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PubmedBookData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PubmedBookData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PubmedBookData instance.
func (me *XsdGoPkgHasElems_PubmedBookData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PubmedBookData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PubmedBookDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Sections struct {
	Sectionses []*TSections `xml:"Sections"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Sections function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sections instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sections instance.
func (me *XsdGoPkgHasElems_Sections) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Sections; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Sectionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Section struct {
	Section *TSection `xml:"Section"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Section function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Section instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Section instance.
func (me *XsdGoPkgHasElem_Section) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Section; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Section.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SectionTitle struct {
	SectionTitles []*TSectionTitle `xml:"SectionTitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SectionTitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SectionTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SectionTitle instance.
func (me *XsdGoPkgHasElems_SectionTitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SectionTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SectionTitles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPubmedBookArticleSet struct {
	XsdGoPkgHasElems_PubmedBookArticle
}

//	If the WalkHandlers.TPubmedBookArticleSet function is not nil (ie. was set by outside code), calls it with this TPubmedBookArticleSet instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TPubmedBookArticleSet instance.
func (me *TPubmedBookArticleSet) Walk() (err error) {
	if fn := WalkHandlers.TPubmedBookArticleSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_PubmedBookArticle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PubmedBookArticleSet struct {
	PubmedBookArticleSet *TPubmedBookArticleSet `xml:"PubmedBookArticleSet"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PubmedBookArticleSet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PubmedBookArticleSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PubmedBookArticleSet instance.
func (me *XsdGoPkgHasElem_PubmedBookArticleSet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PubmedBookArticleSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PubmedBookArticleSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PubmedBookArticleSet struct {
	PubmedBookArticleSets []*TPubmedBookArticleSet `xml:"PubmedBookArticleSet"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PubmedBookArticleSet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PubmedBookArticleSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PubmedBookArticleSet instance.
func (me *XsdGoPkgHasElems_PubmedBookArticleSet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PubmedBookArticleSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PubmedBookArticleSets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ItemList struct {
	ItemList *TItemList `xml:"ItemList"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ItemList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ItemList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ItemList instance.
func (me *XsdGoPkgHasElem_ItemList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ItemList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ItemList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Item struct {
	Item xsdt.String `xml:"Item"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Item function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Item instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Item instance.
func (me *XsdGoPkgHasElem_Item) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Item; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TArtIdTypeUnion2 xsdt.Token

//	Since TArtIdTypeUnion2 is just a simple String type, this merely returns the current string value.
func (me TArtIdTypeUnion2) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TArtIdTypeUnion2's alias type xsdt.Token.
func (me TArtIdTypeUnion2) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TArtIdTypeUnion2 is "pmcpid".
func (me TArtIdTypeUnion2) IsPmcpid() bool { return me.String() == "pmcpid" }

//	Since TArtIdTypeUnion2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TArtIdTypeUnion2) Set(s string) { (*xsdt.Token)(me).Set(s) }

type TPubStatusUnion3 xsdt.Token

//	This convenience method just performs a simple type conversion to TPubStatusUnion3's alias type xsdt.Token.
func (me TPubStatusUnion3) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TPubStatusUnion3 is "ppublish".
func (me TPubStatusUnion3) IsPpublish() bool { return me.String() == "ppublish" }

//	Since TPubStatusUnion3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TPubStatusUnion3) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TPubStatusUnion3 is just a simple String type, this merely returns the current string value.
func (me TPubStatusUnion3) String() string { return xsdt.Token(me).String() }

type TPubStatusUnion5 xsdt.Token

//	Since TPubStatusUnion5 is just a simple String type, this merely returns the current string value.
func (me TPubStatusUnion5) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TPubStatusUnion5's alias type xsdt.Token.
func (me TPubStatusUnion5) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TPubStatusUnion5 is "aheadofprint".
func (me TPubStatusUnion5) IsAheadofprint() bool { return me.String() == "aheadofprint" }

//	Since TPubStatusUnion5 is just a simple String type, this merely sets the current value from the specified string.
func (me *TPubStatusUnion5) Set(s string) { (*xsdt.Token)(me).Set(s) }

type TArtIdTypeUnion4 xsdt.Token

//	Since TArtIdTypeUnion4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TArtIdTypeUnion4) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TArtIdTypeUnion4 is just a simple String type, this merely returns the current string value.
func (me TArtIdTypeUnion4) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TArtIdTypeUnion4's alias type xsdt.Token.
func (me TArtIdTypeUnion4) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TArtIdTypeUnion4 is "pmc".
func (me TArtIdTypeUnion4) IsPmc() bool { return me.String() == "pmc" }

type TPubStatusUnion2 xsdt.Token

//	Returns true if the value of this enumerated TPubStatusUnion2 is "epublish".
func (me TPubStatusUnion2) IsEpublish() bool { return me.String() == "epublish" }

//	Since TPubStatusUnion2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TPubStatusUnion2) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TPubStatusUnion2 is just a simple String type, this merely returns the current string value.
func (me TPubStatusUnion2) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TPubStatusUnion2's alias type xsdt.Token.
func (me TPubStatusUnion2) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type TArtIdTypeUnion1 xsdt.Token

//	Since TArtIdTypeUnion1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TArtIdTypeUnion1) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TArtIdTypeUnion1 is just a simple String type, this merely returns the current string value.
func (me TArtIdTypeUnion1) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TArtIdTypeUnion1's alias type xsdt.Token.
func (me TArtIdTypeUnion1) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TArtIdTypeUnion1 is "pii".
func (me TArtIdTypeUnion1) IsPii() bool { return me.String() == "pii" }

type TPubStatusUnion xsdt.Token

//	This convenience method just performs a simple type conversion to TPubStatusUnion's alias type xsdt.Token.
func (me TPubStatusUnion) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TPubStatusUnion is "received".
func (me TPubStatusUnion) IsReceived() bool { return me.String() == "received" }

//	Since TPubStatusUnion is just a simple String type, this merely sets the current value from the specified string.
func (me *TPubStatusUnion) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TPubStatusUnion is just a simple String type, this merely returns the current string value.
func (me TPubStatusUnion) String() string { return xsdt.Token(me).String() }

type TArtIdTypeUnion xsdt.Token

//	Since TArtIdTypeUnion is just a simple String type, this merely sets the current value from the specified string.
func (me *TArtIdTypeUnion) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TArtIdTypeUnion is just a simple String type, this merely returns the current string value.
func (me TArtIdTypeUnion) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TArtIdTypeUnion's alias type xsdt.Token.
func (me TArtIdTypeUnion) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TArtIdTypeUnion is "doi".
func (me TArtIdTypeUnion) IsDoi() bool { return me.String() == "doi" }

type TArtIdTypeUnion3 xsdt.Token

//	This convenience method just performs a simple type conversion to TArtIdTypeUnion3's alias type xsdt.Token.
func (me TArtIdTypeUnion3) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TArtIdTypeUnion3 is "pmpid".
func (me TArtIdTypeUnion3) IsPmpid() bool { return me.String() == "pmpid" }

//	Since TArtIdTypeUnion3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TArtIdTypeUnion3) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TArtIdTypeUnion3 is just a simple String type, this merely returns the current string value.
func (me TArtIdTypeUnion3) String() string { return xsdt.Token(me).String() }

type TartIdTypeInt xsdt.Token

//	Returns true if the value of this enumerated TartIdTypeInt is "pmcid".
func (me TartIdTypeInt) IsPmcid() bool { return me.String() == "pmcid" }

//	Returns true if the value of this enumerated TartIdTypeInt is "pmcbook".
func (me TartIdTypeInt) IsPmcbook() bool { return me.String() == "pmcbook" }

//	Returns true if the value of this enumerated TartIdTypeInt is "bookaccession".
func (me TartIdTypeInt) IsBookaccession() bool { return me.String() == "bookaccession" }

//	Since TartIdTypeInt is just a simple String type, this merely sets the current value from the specified string.
func (me *TartIdTypeInt) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TartIdTypeInt is just a simple String type, this merely returns the current string value.
func (me TartIdTypeInt) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TartIdTypeInt's alias type xsdt.Token.
func (me TartIdTypeInt) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TartIdTypeInt is "pubmed".
func (me TartIdTypeInt) IsPubmed() bool { return me.String() == "pubmed" }

//	Returns true if the value of this enumerated TartIdTypeInt is "medline".
func (me TartIdTypeInt) IsMedline() bool { return me.String() == "medline" }

type TArtIdTypeUnion5 xsdt.Token

//	Since TArtIdTypeUnion5 is just a simple String type, this merely sets the current value from the specified string.
func (me *TArtIdTypeUnion5) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TArtIdTypeUnion5 is just a simple String type, this merely returns the current string value.
func (me TArtIdTypeUnion5) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TArtIdTypeUnion5's alias type xsdt.Token.
func (me TArtIdTypeUnion5) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TArtIdTypeUnion5 is "mid".
func (me TArtIdTypeUnion5) IsMid() bool { return me.String() == "mid" }

type TArtIdTypeUnion6 xsdt.Token

//	TartIdType is an XSD union-type of several types. This is a simple type conversion to TArtIdTypeUnion1, but keep in mind the actual value may or may not be a valid TArtIdTypeUnion1 value.
func (me TartIdType) ToTArtIdTypeUnion1() TArtIdTypeUnion1 { return TArtIdTypeUnion1(me) }

//	TartIdType is an XSD union-type of several types. This is a simple type conversion to TArtIdTypeUnion2, but keep in mind the actual value may or may not be a valid TArtIdTypeUnion2 value.
func (me TartIdType) ToTArtIdTypeUnion2() TArtIdTypeUnion2 { return TArtIdTypeUnion2(me) }

//	TartIdType is an XSD union-type of several types. This is a simple type conversion to TArtIdTypeUnion3, but keep in mind the actual value may or may not be a valid TArtIdTypeUnion3 value.
func (me TartIdType) ToTArtIdTypeUnion3() TArtIdTypeUnion3 { return TArtIdTypeUnion3(me) }

//	Since TArtIdTypeUnion6 is just a simple String type, this merely sets the current value from the specified string.
func (me *TArtIdTypeUnion6) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TArtIdTypeUnion6 is just a simple String type, this merely returns the current string value.
func (me TArtIdTypeUnion6) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TArtIdTypeUnion6 is "sici".
func (me TArtIdTypeUnion6) IsSici() bool { return me.String() == "sici" }

//	TartIdType is an XSD union-type of several types. This is a simple type conversion to TArtIdTypeUnion, but keep in mind the actual value may or may not be a valid TArtIdTypeUnion value.
func (me TartIdType) ToTArtIdTypeUnion() TArtIdTypeUnion { return TArtIdTypeUnion(me) }

//	TartIdType is an XSD union-type of several types. This is a simple type conversion to TArtIdTypeUnion6, but keep in mind the actual value may or may not be a valid TArtIdTypeUnion6 value.
func (me TartIdType) ToTArtIdTypeUnion6() TArtIdTypeUnion6 { return TArtIdTypeUnion6(me) }

//	This convenience method just performs a simple type conversion to TArtIdTypeUnion6's alias type xsdt.Token.
func (me TArtIdTypeUnion6) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	TartIdType is an XSD union-type of several types. This is a simple type conversion to TartIdTypeInt, but keep in mind the actual value may or may not be a valid TartIdTypeInt value.
func (me TartIdType) ToTartIdTypeInt() TartIdTypeInt { return TartIdTypeInt(me) }

//	TartIdType is an XSD union-type of several types. This is a simple type conversion to TArtIdTypeUnion4, but keep in mind the actual value may or may not be a valid TArtIdTypeUnion4 value.
func (me TartIdType) ToTArtIdTypeUnion4() TArtIdTypeUnion4 { return TArtIdTypeUnion4(me) }

//	TartIdType is an XSD union-type of several types. This is a simple type conversion to TArtIdTypeUnion5, but keep in mind the actual value may or may not be a valid TArtIdTypeUnion5 value.
func (me TartIdType) ToTArtIdTypeUnion5() TArtIdTypeUnion5 { return TArtIdTypeUnion5(me) }

type TpubStatusInt xsdt.Token

//	Returns true if the value of this enumerated TpubStatusInt is "pmc".
func (me TpubStatusInt) IsPmc() bool { return me.String() == "pmc" }

//	Returns true if the value of this enumerated TpubStatusInt is "pmcr".
func (me TpubStatusInt) IsPmcr() bool { return me.String() == "pmcr" }

//	Returns true if the value of this enumerated TpubStatusInt is "pubmedr".
func (me TpubStatusInt) IsPubmedr() bool { return me.String() == "pubmedr" }

//	Returns true if the value of this enumerated TpubStatusInt is "premedline".
func (me TpubStatusInt) IsPremedline() bool { return me.String() == "premedline" }

//	Returns true if the value of this enumerated TpubStatusInt is "entrez".
func (me TpubStatusInt) IsEntrez() bool { return me.String() == "entrez" }

//	Returns true if the value of this enumerated TpubStatusInt is "pmc-release".
func (me TpubStatusInt) IsPmcRelease() bool { return me.String() == "pmc-release" }

//	Since TpubStatusInt is just a simple String type, this merely returns the current string value.
func (me TpubStatusInt) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TpubStatusInt's alias type xsdt.Token.
func (me TpubStatusInt) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TpubStatusInt is "pubmed".
func (me TpubStatusInt) IsPubmed() bool { return me.String() == "pubmed" }

//	Returns true if the value of this enumerated TpubStatusInt is "medline".
func (me TpubStatusInt) IsMedline() bool { return me.String() == "medline" }

//	Returns true if the value of this enumerated TpubStatusInt is "medliner".
func (me TpubStatusInt) IsMedliner() bool { return me.String() == "medliner" }

//	Since TpubStatusInt is just a simple String type, this merely sets the current value from the specified string.
func (me *TpubStatusInt) Set(s string) { (*xsdt.Token)(me).Set(s) }

type TPubStatusUnion1 xsdt.Token

//	Since TPubStatusUnion1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TPubStatusUnion1) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TPubStatusUnion1 is just a simple String type, this merely returns the current string value.
func (me TPubStatusUnion1) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TPubStatusUnion1's alias type xsdt.Token.
func (me TPubStatusUnion1) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TPubStatusUnion1 is "accepted".
func (me TPubStatusUnion1) IsAccepted() bool { return me.String() == "accepted" }

type TPubStatusUnion4 xsdt.Token

//	Since TPubStatusUnion4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TPubStatusUnion4) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TPubStatusUnion4 is just a simple String type, this merely returns the current string value.
func (me TPubStatusUnion4) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TPubStatusUnion4's alias type xsdt.Token.
func (me TPubStatusUnion4) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TPubStatusUnion4 is "revised".
func (me TPubStatusUnion4) IsRevised() bool { return me.String() == "revised" }

type TPubStatusUnion6 xsdt.Token

//	Returns true if the value of this enumerated TPubStatusUnion6 is "retracted".
func (me TPubStatusUnion6) IsRetracted() bool { return me.String() == "retracted" }

//	Since TPubStatusUnion6 is just a simple String type, this merely sets the current value from the specified string.
func (me *TPubStatusUnion6) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TPubStatusUnion6 is just a simple String type, this merely returns the current string value.
func (me TPubStatusUnion6) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TPubStatusUnion6's alias type xsdt.Token.
func (me TPubStatusUnion6) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type TPubStatusUnion7 xsdt.Token

//	Since TPubStatusUnion7 is just a simple String type, this merely sets the current value from the specified string.
func (me *TPubStatusUnion7) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	TpubStatus is an XSD union-type of several types. This is a simple type conversion to TPubStatusUnion2, but keep in mind the actual value may or may not be a valid TPubStatusUnion2 value.
func (me TpubStatus) ToTPubStatusUnion2() TPubStatusUnion2 { return TPubStatusUnion2(me) }

//	TpubStatus is an XSD union-type of several types. This is a simple type conversion to TPubStatusUnion4, but keep in mind the actual value may or may not be a valid TPubStatusUnion4 value.
func (me TpubStatus) ToTPubStatusUnion4() TPubStatusUnion4 { return TPubStatusUnion4(me) }

//	TpubStatus is an XSD union-type of several types. This is a simple type conversion to TpubStatusInt, but keep in mind the actual value may or may not be a valid TpubStatusInt value.
func (me TpubStatus) ToTpubStatusInt() TpubStatusInt { return TpubStatusInt(me) }

//	TpubStatus is an XSD union-type of several types. This is a simple type conversion to TPubStatusUnion, but keep in mind the actual value may or may not be a valid TPubStatusUnion value.
func (me TpubStatus) ToTPubStatusUnion() TPubStatusUnion { return TPubStatusUnion(me) }

//	TpubStatus is an XSD union-type of several types. This is a simple type conversion to TPubStatusUnion1, but keep in mind the actual value may or may not be a valid TPubStatusUnion1 value.
func (me TpubStatus) ToTPubStatusUnion1() TPubStatusUnion1 { return TPubStatusUnion1(me) }

//	TpubStatus is an XSD union-type of several types. This is a simple type conversion to TPubStatusUnion3, but keep in mind the actual value may or may not be a valid TPubStatusUnion3 value.
func (me TpubStatus) ToTPubStatusUnion3() TPubStatusUnion3 { return TPubStatusUnion3(me) }

//	TpubStatus is an XSD union-type of several types. This is a simple type conversion to TPubStatusUnion5, but keep in mind the actual value may or may not be a valid TPubStatusUnion5 value.
func (me TpubStatus) ToTPubStatusUnion5() TPubStatusUnion5 { return TPubStatusUnion5(me) }

//	Since TPubStatusUnion7 is just a simple String type, this merely returns the current string value.
func (me TPubStatusUnion7) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TPubStatusUnion7's alias type xsdt.Token.
func (me TPubStatusUnion7) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TPubStatusUnion7 is "ecollection".
func (me TPubStatusUnion7) IsEcollection() bool { return me.String() == "ecollection" }

//	TpubStatus is an XSD union-type of several types. This is a simple type conversion to TPubStatusUnion6, but keep in mind the actual value may or may not be a valid TPubStatusUnion6 value.
func (me TpubStatus) ToTPubStatusUnion6() TPubStatusUnion6 { return TPubStatusUnion6(me) }

//	TpubStatus is an XSD union-type of several types. This is a simple type conversion to TPubStatusUnion7, but keep in mind the actual value may or may not be a valid TPubStatusUnion7 value.
func (me TpubStatus) ToTPubStatusUnion7() TPubStatusUnion7 { return TPubStatusUnion7(me) }

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 357 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 357 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElem_Section                  func(*XsdGoPkgHasElem_Section, bool) error
	XsdGoPkgHasElem_AuthorList               func(*XsdGoPkgHasElem_AuthorList, bool) error
	XsdGoPkgHasElem_GrantList                func(*XsdGoPkgHasElem_GrantList, bool) error
	XsdGoPkgHasElem_NumberOfReferences       func(*XsdGoPkgHasElem_NumberOfReferences, bool) error
	XsdGoPkgHasElem_NameOfSubstance          func(*XsdGoPkgHasElem_NameOfSubstance, bool) error
	XsdGoPkgHasElem_I                        func(*XsdGoPkgHasElem_I, bool) error
	XsdGoPkgHasElems_Article                 func(*XsdGoPkgHasElems_Article, bool) error
	XsdGoPkgHasElems_CitationString          func(*XsdGoPkgHasElems_CitationString, bool) error
	XsdGoPkgHasElem_Country                  func(*XsdGoPkgHasElem_Country, bool) error
	TPagination                              func(*TPagination, bool) error
	XsdGoPkgHasElem_RefSource                func(*XsdGoPkgHasElem_RefSource, bool) error
	XsdGoPkgHasElem_ArticleDate              func(*XsdGoPkgHasElem_ArticleDate, bool) error
	XsdGoPkgHasElem_PersonalNameSubject      func(*XsdGoPkgHasElem_PersonalNameSubject, bool) error
	XsdGoPkgHasElems_Volume                  func(*XsdGoPkgHasElems_Volume, bool) error
	XsdGoPkgHasElems_SupplMeshList           func(*XsdGoPkgHasElems_SupplMeshList, bool) error
	TObject                                  func(*TObject, bool) error
	XsdGoPkgHasElem_Issn                     func(*XsdGoPkgHasElem_Issn, bool) error
	XsdGoPkgHasElem_Edition                  func(*XsdGoPkgHasElem_Edition, bool) error
	XsdGoPkgHasElems_Agency                  func(*XsdGoPkgHasElems_Agency, bool) error
	XsdGoPkgHasElems_MedlineDate             func(*XsdGoPkgHasElems_MedlineDate, bool) error
	XsdGoPkgHasElem_PublicationType          func(*XsdGoPkgHasElem_PublicationType, bool) error
	XsdGoPkgHasElems_DataBankList            func(*XsdGoPkgHasElems_DataBankList, bool) error
	TIdentifier                              func(*TIdentifier, bool) error
	TIssn                                    func(*TIssn, bool) error
	XsdGoPkgHasElems_KeywordList             func(*XsdGoPkgHasElems_KeywordList, bool) error
	XsdGoPkgHasElem_MedlineCitation          func(*XsdGoPkgHasElem_MedlineCitation, bool) error
	XsdGoPkgHasElem_CommentsCorrections      func(*XsdGoPkgHasElem_CommentsCorrections, bool) error
	XsdGoPkgHasElems_CommentsCorrectionsList func(*XsdGoPkgHasElems_CommentsCorrectionsList, bool) error
	TArticleDate                             func(*TArticleDate, bool) error
	XsdGoPkgHasElems_AccessionNumber         func(*XsdGoPkgHasElems_AccessionNumber, bool) error
	TBeginningDate                           func(*TBeginningDate, bool) error
	XsdGoPkgHasElem_PubMedPubDate            func(*XsdGoPkgHasElem_PubMedPubDate, bool) error
	XsdGoPkgHasElems_MeshHeadingList         func(*XsdGoPkgHasElems_MeshHeadingList, bool) error
	XsdGoPkgHasElem_ItemList                 func(*XsdGoPkgHasElem_ItemList, bool) error
	XsdGoPkgHasElem_ArticleId                func(*XsdGoPkgHasElem_ArticleId, bool) error
	TAuthor                                  func(*TAuthor, bool) error
	XsdGoPkgHasElems_ArticleDate             func(*XsdGoPkgHasElems_ArticleDate, bool) error
	TPubmedArticle                           func(*TPubmedArticle, bool) error
	XsdGoPkgHasElem_BookTitle                func(*XsdGoPkgHasElem_BookTitle, bool) error
	TBookDocument                            func(*TBookDocument, bool) error
	XsdGoPkgHasElem_BookDocument             func(*XsdGoPkgHasElem_BookDocument, bool) error
	XsdGoPkgHasElem_PublicationStatus        func(*XsdGoPkgHasElem_PublicationStatus, bool) error
	XsdGoPkgHasElems_AffiliationInfo         func(*XsdGoPkgHasElems_AffiliationInfo, bool) error
	XsdGoPkgHasElems_PubmedData              func(*XsdGoPkgHasElems_PubmedData, bool) error
	XsdGoPkgHasElem_BookDocumentSet          func(*XsdGoPkgHasElem_BookDocumentSet, bool) error
	TGrantList                               func(*TGrantList, bool) error
	XsdGoPkgHasElems_ELocationID             func(*XsdGoPkgHasElems_ELocationID, bool) error
	XsdGoPkgHasElems_InvestigatorList        func(*XsdGoPkgHasElems_InvestigatorList, bool) error
	XsdGoPkgHasElem_OtherAbstract            func(*XsdGoPkgHasElem_OtherAbstract, bool) error
	XsdGoPkgHasElem_Issue                    func(*XsdGoPkgHasElem_Issue, bool) error
	XsdGoPkgHasElem_MedlineDate              func(*XsdGoPkgHasElem_MedlineDate, bool) error
	XsdGoPkgHasElems_GeneSymbol              func(*XsdGoPkgHasElems_GeneSymbol, bool) error
	XsdGoPkgHasElem_Object                   func(*XsdGoPkgHasElem_Object, bool) error
	XsdGoPkgHasElem_CitationSubset           func(*XsdGoPkgHasElem_CitationSubset, bool) error
	XsdGoPkgHasElem_Title                    func(*XsdGoPkgHasElem_Title, bool) error
	TDescriptorName                          func(*TDescriptorName, bool) error
	TSupplMeshList                           func(*TSupplMeshList, bool) error
	XsdGoPkgHasElems_NumberOfReferences      func(*XsdGoPkgHasElems_NumberOfReferences, bool) error
	XsdGoPkgHasElem_SupplMeshName            func(*XsdGoPkgHasElem_SupplMeshName, bool) error
	XsdGoPkgHasElems_VolumeTitle             func(*XsdGoPkgHasElems_VolumeTitle, bool) error
	XsdGoPkgHasElem_Suffix                   func(*XsdGoPkgHasElem_Suffix, bool) error
	TChemicalList                            func(*TChemicalList, bool) error
	XsdGoPkgHasElem_Identifier               func(*XsdGoPkgHasElem_Identifier, bool) error
	XsdGoPkgHasElems_ReportNumber            func(*XsdGoPkgHasElems_ReportNumber, bool) error
	XsdGoPkgHasElems_PubMedPubDate           func(*XsdGoPkgHasElems_PubMedPubDate, bool) error
	XsdGoPkgHasElem_PubmedArticleSet         func(*XsdGoPkgHasElem_PubmedArticleSet, bool) error
	XsdGoPkgHasElem_Investigator             func(*XsdGoPkgHasElem_Investigator, bool) error
	XsdGoPkgHasElems_ArticleId               func(*XsdGoPkgHasElems_ArticleId, bool) error
	XsdGoPkgHasElem_CollectiveName           func(*XsdGoPkgHasElem_CollectiveName, bool) error
	XsdGoPkgHasElem_LastName                 func(*XsdGoPkgHasElem_LastName, bool) error
	XsdGoPkgHasElems_PublicationStatus       func(*XsdGoPkgHasElems_PublicationStatus, bool) error
	XsdGoPkgHasElems_Minute                  func(*XsdGoPkgHasElems_Minute, bool) error
	TPersonalNameSubject                     func(*TPersonalNameSubject, bool) error
	TItemList                                func(*TItemList, bool) error
	XsdGoPkgHasElem_Month                    func(*XsdGoPkgHasElem_Month, bool) error
	XsdGoPkgHasElem_PubmedData               func(*XsdGoPkgHasElem_PubmedData, bool) error
	TAffiliationInfo                         func(*TAffiliationInfo, bool) error
	TDataBankList                            func(*TDataBankList, bool) error
	XsdGoPkgHasElems_SpaceFlightMission      func(*XsdGoPkgHasElems_SpaceFlightMission, bool) error
	TKeyword                                 func(*TKeyword, bool) error
	XsdGoPkgHasElems_Journal                 func(*XsdGoPkgHasElems_Journal, bool) error
	XsdGoPkgHasElems_MedlineJournalInfo      func(*XsdGoPkgHasElems_MedlineJournalInfo, bool) error
	XsdGoPkgHasElem_CopyrightInformation     func(*XsdGoPkgHasElem_CopyrightInformation, bool) error
	XsdGoPkgHasElem_GeneSymbolList           func(*XsdGoPkgHasElem_GeneSymbolList, bool) error
	XsdGoPkgHasElems_JournalIssue            func(*XsdGoPkgHasElems_JournalIssue, bool) error
	XsdGoPkgHasElem_OtherID                  func(*XsdGoPkgHasElem_OtherID, bool) error
	XsdGoPkgHasElem_QualifierName            func(*XsdGoPkgHasElem_QualifierName, bool) error
	XsdGoPkgHasElems_CollectionTitle         func(*XsdGoPkgHasElems_CollectionTitle, bool) error
	TObjectList                              func(*TObjectList, bool) error
	XsdGoPkgHasElems_Title                   func(*XsdGoPkgHasElems_Title, bool) error
	XsdGoPkgHasElem_DeleteDocument           func(*XsdGoPkgHasElem_DeleteDocument, bool) error
	XsdGoPkgHasElems_BeginningDate           func(*XsdGoPkgHasElems_BeginningDate, bool) error
	XsdGoPkgHasElems_Edition                 func(*XsdGoPkgHasElems_Edition, bool) error
	XsdGoPkgHasElems_StartPage               func(*XsdGoPkgHasElems_StartPage, bool) error
	XsdGoPkgHasElem_MeshHeadingList          func(*XsdGoPkgHasElem_MeshHeadingList, bool) error
	TOtherAbstract                           func(*TOtherAbstract, bool) error
	TBookTitle                               func(*TBookTitle, bool) error
	XsdGoPkgHasElem_PubmedArticle            func(*XsdGoPkgHasElem_PubmedArticle, bool) error
	XsdGoPkgHasElems_DataBankName            func(*XsdGoPkgHasElems_DataBankName, bool) error
	XsdGoPkgHasElems_Pagination              func(*XsdGoPkgHasElems_Pagination, bool) error
	XsdGoPkgHasElem_LocationLabel            func(*XsdGoPkgHasElem_LocationLabel, bool) error
	XsdGoPkgHasElems_BookDocumentSet         func(*XsdGoPkgHasElems_BookDocumentSet, bool) error
	THistory                                 func(*THistory, bool) error
	TGrant                                   func(*TGrant, bool) error
	TInvestigatorList                        func(*TInvestigatorList, bool) error
	XsdGoPkgHasElem_ChemicalList             func(*XsdGoPkgHasElem_ChemicalList, bool) error
	XsdGoPkgHasElem_Publisher                func(*XsdGoPkgHasElem_Publisher, bool) error
	TLocationLabel                           func(*TLocationLabel, bool) error
	XsdGoPkgHasElems_PubmedBookData          func(*XsdGoPkgHasElems_PubmedBookData, bool) error
	XsdGoPkgHasElem_ArticleIdList            func(*XsdGoPkgHasElem_ArticleIdList, bool) error
	XsdGoPkgHasElems_PubmedArticle           func(*XsdGoPkgHasElems_PubmedArticle, bool) error
	XsdGoPkgHasElems_PubmedBookArticle       func(*XsdGoPkgHasElems_PubmedBookArticle, bool) error
	XsdGoPkgHasElem_B                        func(*XsdGoPkgHasElem_B, bool) error
	XsdGoPkgHasElems_PublisherName           func(*XsdGoPkgHasElems_PublisherName, bool) error
	XsdGoPkgHasElem_ContractNumber           func(*XsdGoPkgHasElem_ContractNumber, bool) error
	XsdGoPkgHasElem_CommentsCorrectionsList  func(*XsdGoPkgHasElem_CommentsCorrectionsList, bool) error
	XsdGoPkgHasElems_GeneSymbolList          func(*XsdGoPkgHasElems_GeneSymbolList, bool) error
	XsdGoPkgHasElems_Sup                     func(*XsdGoPkgHasElems_Sup, bool) error
	XsdGoPkgHasElem_RegistryNumber           func(*XsdGoPkgHasElem_RegistryNumber, bool) error
	XsdGoPkgHasElem_ContributionDate         func(*XsdGoPkgHasElem_ContributionDate, bool) error
	XsdGoPkgHasElem_Url                      func(*XsdGoPkgHasElem_Url, bool) error
	XsdGoPkgHasElem_SpaceFlightMission       func(*XsdGoPkgHasElem_SpaceFlightMission, bool) error
	XsdGoPkgHasElem_PublicationTypeList      func(*XsdGoPkgHasElem_PublicationTypeList, bool) error
	TArticleTitle                            func(*TArticleTitle, bool) error
	XsdGoPkgHasElem_Pmid                     func(*XsdGoPkgHasElem_Pmid, bool) error
	TMedlineJournalInfo                      func(*TMedlineJournalInfo, bool) error
	XsdGoPkgHasElem_MedlineJournalInfo       func(*XsdGoPkgHasElem_MedlineJournalInfo, bool) error
	XsdGoPkgHasElem_MedlineCitationSet       func(*XsdGoPkgHasElem_MedlineCitationSet, bool) error
	XsdGoPkgHasElem_History                  func(*XsdGoPkgHasElem_History, bool) error
	TPublicationTypeList                     func(*TPublicationTypeList, bool) error
	XsdGoPkgHasElem_DateCompleted            func(*XsdGoPkgHasElem_DateCompleted, bool) error
	TDateCreated                             func(*TDateCreated, bool) error
	XsdGoPkgHasElems_Chemical                func(*XsdGoPkgHasElems_Chemical, bool) error
	XsdGoPkgHasElems_MedlineCitationSet      func(*XsdGoPkgHasElems_MedlineCitationSet, bool) error
	XsdGoPkgHasElems_Language                func(*XsdGoPkgHasElems_Language, bool) error
	TArticle                                 func(*TArticle, bool) error
	TEndingDate                              func(*TEndingDate, bool) error
	XsdGoPkgHasElem_Sections                 func(*XsdGoPkgHasElem_Sections, bool) error
	TJournal                                 func(*TJournal, bool) error
	TDeleteDocument                          func(*TDeleteDocument, bool) error
	XsdGoPkgHasElem_PubmedBookArticleSet     func(*XsdGoPkgHasElem_PubmedBookArticleSet, bool) error
	XsdGoPkgHasElem_Volume                   func(*XsdGoPkgHasElem_Volume, bool) error
	TCommentsCorrectionsList                 func(*TCommentsCorrectionsList, bool) error
	XsdGoPkgHasElem_CollectionTitle          func(*XsdGoPkgHasElem_CollectionTitle, bool) error
	XsdGoPkgHasElems_Section                 func(*XsdGoPkgHasElems_Section, bool) error
	XsdGoPkgHasElems_History                 func(*XsdGoPkgHasElems_History, bool) error
	XsdGoPkgHasElems_AccessionNumberList     func(*XsdGoPkgHasElems_AccessionNumberList, bool) error
	XsdGoPkgHasElem_Year                     func(*XsdGoPkgHasElem_Year, bool) error
	XsdGoPkgHasElems_PublicationType         func(*XsdGoPkgHasElems_PublicationType, bool) error
	XsdGoPkgHasElem_DateCreated              func(*XsdGoPkgHasElem_DateCreated, bool) error
	TSectionTitle                            func(*TSectionTitle, bool) error
	TMeshHeadingList                         func(*TMeshHeadingList, bool) error
	XsdGoPkgHasElem_PubmedBookData           func(*XsdGoPkgHasElem_PubmedBookData, bool) error
	XsdGoPkgHasElems_Hour                    func(*XsdGoPkgHasElems_Hour, bool) error
	XsdGoPkgHasElem_GeneralNote              func(*XsdGoPkgHasElem_GeneralNote, bool) error
	TDataBank                                func(*TDataBank, bool) error
	XsdGoPkgHasElem_BeginningDate            func(*XsdGoPkgHasElem_BeginningDate, bool) error
	XsdGoPkgHasElems_EndPage                 func(*XsdGoPkgHasElems_EndPage, bool) error
	TnormalDate                              func(*TnormalDate, bool) error
	XsdGoPkgHasElems_OtherID                 func(*XsdGoPkgHasElems_OtherID, bool) error
	XsdGoPkgHasElem_VolumeTitle              func(*XsdGoPkgHasElem_VolumeTitle, bool) error
	XsdGoPkgHasElems_Keyword                 func(*XsdGoPkgHasElems_Keyword, bool) error
	TDeleteCitation                          func(*TDeleteCitation, bool) error
	XsdGoPkgHasElem_KeywordList              func(*XsdGoPkgHasElem_KeywordList, bool) error
	XsdGoPkgHasElems_MedlinePgn              func(*XsdGoPkgHasElems_MedlinePgn, bool) error
	XsdGoPkgHasElem_DataBankName             func(*XsdGoPkgHasElem_DataBankName, bool) error
	XsdGoPkgHasElems_LocationLabel           func(*XsdGoPkgHasElems_LocationLabel, bool) error
	XsdGoPkgHasElems_Abstract                func(*XsdGoPkgHasElems_Abstract, bool) error
	XsdGoPkgHasElems_PersonalNameSubjectList func(*XsdGoPkgHasElems_PersonalNameSubjectList, bool) error
	TBookDocumentSet                         func(*TBookDocumentSet, bool) error
	XsdGoPkgHasElem_Acronym                  func(*XsdGoPkgHasElem_Acronym, bool) error
	XsdGoPkgHasElem_MedlinePgn               func(*XsdGoPkgHasElem_MedlinePgn, bool) error
	TPmid                                    func(*TPmid, bool) error
	TGeneSymbolList                          func(*TGeneSymbolList, bool) error
	XsdGoPkgHasElems_Isbn                    func(*XsdGoPkgHasElems_Isbn, bool) error
	XsdGoPkgHasElems_Publisher               func(*XsdGoPkgHasElems_Publisher, bool) error
	TOtherID                                 func(*TOtherID, bool) error
	XsdGoPkgHasElems_ArticleIdList           func(*XsdGoPkgHasElems_ArticleIdList, bool) error
	XsdGoPkgHasElems_ObjectList              func(*XsdGoPkgHasElems_ObjectList, bool) error
	XsdGoPkgHasElem_Sub                      func(*XsdGoPkgHasElem_Sub, bool) error
	XsdGoPkgHasElem_Keyword                  func(*XsdGoPkgHasElem_Keyword, bool) error
	XsdGoPkgHasElem_Language                 func(*XsdGoPkgHasElem_Language, bool) error
	XsdGoPkgHasElems_RefSource               func(*XsdGoPkgHasElems_RefSource, bool) error
	XsdGoPkgHasElem_Minute                   func(*XsdGoPkgHasElem_Minute, bool) error
	Ttext                                    func(*Ttext, bool) error
	XsdGoPkgHasElem_ArticleTitle             func(*XsdGoPkgHasElem_ArticleTitle, bool) error
	TContributionDate                        func(*TContributionDate, bool) error
	XsdGoPkgHasElem_Param                    func(*XsdGoPkgHasElem_Param, bool) error
	XsdGoPkgHasElems_DescriptorName          func(*XsdGoPkgHasElems_DescriptorName, bool) error
	TAbstract                                func(*TAbstract, bool) error
	XsdGoPkgHasElem_PersonalNameSubjectList  func(*XsdGoPkgHasElem_PersonalNameSubjectList, bool) error
	XsdGoPkgHasElems_Affiliation             func(*XsdGoPkgHasElems_Affiliation, bool) error
	XsdGoPkgHasElem_ELocationID              func(*XsdGoPkgHasElem_ELocationID, bool) error
	TArticleIdList                           func(*TArticleIdList, bool) error
	XsdGoPkgHasElems_Identifier              func(*XsdGoPkgHasElems_Identifier, bool) error
	XsdGoPkgHasElem_DataBankList             func(*XsdGoPkgHasElem_DataBankList, bool) error
	XsdGoPkgHasElems_PubmedArticleSet        func(*XsdGoPkgHasElems_PubmedArticleSet, bool) error
	TUrl                                     func(*TUrl, bool) error
	XsdGoPkgHasElems_Pmid                    func(*XsdGoPkgHasElems_Pmid, bool) error
	XsdGoPkgHasElem_Grant                    func(*XsdGoPkgHasElem_Grant, bool) error
	XsdGoPkgHasElems_ISSNLinking             func(*XsdGoPkgHasElems_ISSNLinking, bool) error
	XsdGoPkgHasElem_Article                  func(*XsdGoPkgHasElem_Article, bool) error
	TCommentsCorrections                     func(*TCommentsCorrections, bool) error
	TDateCompleted                           func(*TDateCompleted, bool) error
	TGeneralNote                             func(*TGeneralNote, bool) error
	XsdGoPkgHasElems_OtherAbstract           func(*XsdGoPkgHasElems_OtherAbstract, bool) error
	XsdGoPkgHasElem_CitationString           func(*XsdGoPkgHasElem_CitationString, bool) error
	XsdGoPkgHasElems_Format                  func(*XsdGoPkgHasElems_Format, bool) error
	XsdGoPkgHasElem_Note                     func(*XsdGoPkgHasElem_Note, bool) error
	TKeywordList                             func(*TKeywordList, bool) error
	XsdGoPkgHasElem_AffiliationInfo          func(*XsdGoPkgHasElem_AffiliationInfo, bool) error
	XsdGoPkgHasElems_PublicationTypeList     func(*XsdGoPkgHasElems_PublicationTypeList, bool) error
	XsdGoPkgHasElems_DeleteDocument          func(*XsdGoPkgHasElems_DeleteDocument, bool) error
	XsdGoPkgHasElems_GrantList               func(*XsdGoPkgHasElems_GrantList, bool) error
	XsdGoPkgHasElem_JournalIssue             func(*XsdGoPkgHasElem_JournalIssue, bool) error
	TInvestigator                            func(*TInvestigator, bool) error
	TSupplMeshName                           func(*TSupplMeshName, bool) error
	TNameOfSubstance                         func(*TNameOfSubstance, bool) error
	XsdGoPkgHasElem_SectionTitle             func(*XsdGoPkgHasElem_SectionTitle, bool) error
	XsdGoPkgHasElem_AbstractText             func(*XsdGoPkgHasElem_AbstractText, bool) error
	XsdGoPkgHasElems_Issue                   func(*XsdGoPkgHasElems_Issue, bool) error
	XsdGoPkgHasElems_NameOfSubstance         func(*XsdGoPkgHasElems_NameOfSubstance, bool) error
	XsdGoPkgHasElems_Note                    func(*XsdGoPkgHasElems_Note, bool) error
	TQualifierName                           func(*TQualifierName, bool) error
	XsdGoPkgHasElem_MeshHeading              func(*XsdGoPkgHasElem_MeshHeading, bool) error
	XsdGoPkgHasElem_Isbn                     func(*XsdGoPkgHasElem_Isbn, bool) error
	XsdGoPkgHasElems_ContractNumber          func(*XsdGoPkgHasElems_ContractNumber, bool) error
	TArticleId                               func(*TArticleId, bool) error
	XsdGoPkgHasElems_Sub                     func(*XsdGoPkgHasElems_Sub, bool) error
	XsdGoPkgHasElem_AccessionNumberList      func(*XsdGoPkgHasElem_AccessionNumberList, bool) error
	XsdGoPkgHasElems_CommentsCorrections     func(*XsdGoPkgHasElems_CommentsCorrections, bool) error
	XsdGoPkgHasElem_InvestigatorList         func(*XsdGoPkgHasElem_InvestigatorList, bool) error
	XsdGoPkgHasElems_GeneralNote             func(*XsdGoPkgHasElems_GeneralNote, bool) error
	XsdGoPkgHasElem_PubmedBookArticle        func(*XsdGoPkgHasElem_PubmedBookArticle, bool) error
	XsdGoPkgHasElem_Hour                     func(*XsdGoPkgHasElem_Hour, bool) error
	TMeshHeading                             func(*TMeshHeading, bool) error
	XsdGoPkgHasElems_EndingDate              func(*XsdGoPkgHasElems_EndingDate, bool) error
	XsdGoPkgHasElem_ObjectList               func(*XsdGoPkgHasElem_ObjectList, bool) error
	XsdGoPkgHasElem_Author                   func(*XsdGoPkgHasElem_Author, bool) error
	XsdGoPkgHasElems_Month                   func(*XsdGoPkgHasElems_Month, bool) error
	XsdGoPkgHasElems_Book                    func(*XsdGoPkgHasElems_Book, bool) error
	XsdGoPkgHasElem_Affiliation              func(*XsdGoPkgHasElem_Affiliation, bool) error
	XsdGoPkgHasElem_Medium                   func(*XsdGoPkgHasElem_Medium, bool) error
	TPubmedArticleSet                        func(*TPubmedArticleSet, bool) error
	XsdGoPkgHasElem_Sup                      func(*XsdGoPkgHasElem_Sup, bool) error
	XsdGoPkgHasElem_U                        func(*XsdGoPkgHasElem_U, bool) error
	XsdGoPkgHasElems_MedlineCitation         func(*XsdGoPkgHasElems_MedlineCitation, bool) error
	TMedlineCitationSet                      func(*TMedlineCitationSet, bool) error
	XsdGoPkgHasElems_ArticleTitle            func(*XsdGoPkgHasElems_ArticleTitle, bool) error
	XsdGoPkgHasElems_DateCompleted           func(*XsdGoPkgHasElems_DateCompleted, bool) error
	TPubmedBookData                          func(*TPubmedBookData, bool) error
	XsdGoPkgHasElem_Chemical                 func(*XsdGoPkgHasElem_Chemical, bool) error
	XsdGoPkgHasElems_Object                  func(*XsdGoPkgHasElems_Object, bool) error
	TAbstractText                            func(*TAbstractText, bool) error
	XsdGoPkgHasElems_Grant                   func(*XsdGoPkgHasElems_Grant, bool) error
	TELocationID                             func(*TELocationID, bool) error
	XsdGoPkgHasElems_AuthorList              func(*XsdGoPkgHasElems_AuthorList, bool) error
	TSection                                 func(*TSection, bool) error
	XsdGoPkgHasElems_CollectiveName          func(*XsdGoPkgHasElems_CollectiveName, bool) error
	XsdGoPkgHasElem_DataBank                 func(*XsdGoPkgHasElem_DataBank, bool) error
	TDateRevised                             func(*TDateRevised, bool) error
	XsdGoPkgHasElems_Country                 func(*XsdGoPkgHasElems_Country, bool) error
	XsdGoPkgHasElems_LastName                func(*XsdGoPkgHasElems_LastName, bool) error
	XsdGoPkgHasElems_Year                    func(*XsdGoPkgHasElems_Year, bool) error
	XsdGoPkgHasElems_ContributionDate        func(*XsdGoPkgHasElems_ContributionDate, bool) error
	XsdGoPkgHasElem_PubDate                  func(*XsdGoPkgHasElem_PubDate, bool) error
	TJournalIssue                            func(*TJournalIssue, bool) error
	XsdGoPkgHasElem_Journal                  func(*XsdGoPkgHasElem_Journal, bool) error
	XsdGoPkgHasElems_DataBank                func(*XsdGoPkgHasElems_DataBank, bool) error
	XsdGoPkgHasElems_Initials                func(*XsdGoPkgHasElems_Initials, bool) error
	XsdGoPkgHasElems_Suffix                  func(*XsdGoPkgHasElems_Suffix, bool) error
	XsdGoPkgHasElems_VernacularTitle         func(*XsdGoPkgHasElems_VernacularTitle, bool) error
	XsdGoPkgHasElem_Item                     func(*XsdGoPkgHasElem_Item, bool) error
	XsdGoPkgHasElem_ForeName                 func(*XsdGoPkgHasElem_ForeName, bool) error
	XsdGoPkgHasElem_DescriptorName           func(*XsdGoPkgHasElem_DescriptorName, bool) error
	XsdGoPkgHasElems_QualifierName           func(*XsdGoPkgHasElems_QualifierName, bool) error
	XsdGoPkgHasElems_MeshHeading             func(*XsdGoPkgHasElems_MeshHeading, bool) error
	XsdGoPkgHasElems_Second                  func(*XsdGoPkgHasElems_Second, bool) error
	XsdGoPkgHasElem_DeleteCitation           func(*XsdGoPkgHasElem_DeleteCitation, bool) error
	XsdGoPkgHasElems_PubDate                 func(*XsdGoPkgHasElems_PubDate, bool) error
	XsdGoPkgHasElems_RegistryNumber          func(*XsdGoPkgHasElems_RegistryNumber, bool) error
	TPubDate                                 func(*TPubDate, bool) error
	XsdGoPkgHasElem_ISOAbbreviation          func(*XsdGoPkgHasElem_ISOAbbreviation, bool) error
	XsdGoPkgHasElems_Investigator            func(*XsdGoPkgHasElems_Investigator, bool) error
	XsdGoPkgHasElems_CitationSubset          func(*XsdGoPkgHasElems_CitationSubset, bool) error
	TChemical                                func(*TChemical, bool) error
	TPublisher                               func(*TPublisher, bool) error
	XsdGoPkgHasElem_Day                      func(*XsdGoPkgHasElem_Day, bool) error
	TAccessionNumberList                     func(*TAccessionNumberList, bool) error
	XsdGoPkgHasElem_VernacularTitle          func(*XsdGoPkgHasElem_VernacularTitle, bool) error
	TBook                                    func(*TBook, bool) error
	XsdGoPkgHasElems_I                       func(*XsdGoPkgHasElems_I, bool) error
	XsdGoPkgHasElems_PersonalNameSubject     func(*XsdGoPkgHasElems_PersonalNameSubject, bool) error
	TPubmedBookArticle                       func(*TPubmedBookArticle, bool) error
	XsdGoPkgHasElems_ChemicalList            func(*XsdGoPkgHasElems_ChemicalList, bool) error
	XsdGoPkgHasElems_Season                  func(*XsdGoPkgHasElems_Season, bool) error
	TPubmedBookArticleSet                    func(*TPubmedBookArticleSet, bool) error
	XsdGoPkgHasElems_Medium                  func(*XsdGoPkgHasElems_Medium, bool) error
	XsdGoPkgHasElems_SectionTitle            func(*XsdGoPkgHasElems_SectionTitle, bool) error
	XsdGoPkgHasElem_Second                   func(*XsdGoPkgHasElem_Second, bool) error
	XsdGoPkgHasCdata                         func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElems_Param                   func(*XsdGoPkgHasElems_Param, bool) error
	XsdGoPkgHasElem_ISSNLinking              func(*XsdGoPkgHasElem_ISSNLinking, bool) error
	XsdGoPkgHasElems_CopyrightInformation    func(*XsdGoPkgHasElems_CopyrightInformation, bool) error
	XsdGoPkgHasElems_MedlineTA               func(*XsdGoPkgHasElems_MedlineTA, bool) error
	XsdGoPkgHasElem_AccessionNumber          func(*XsdGoPkgHasElem_AccessionNumber, bool) error
	TPubmedData                              func(*TPubmedData, bool) error
	XsdGoPkgHasElem_GrantID                  func(*XsdGoPkgHasElem_GrantID, bool) error
	XsdGoPkgHasElem_DateRevised              func(*XsdGoPkgHasElem_DateRevised, bool) error
	TPersonalNameSubjectList                 func(*TPersonalNameSubjectList, bool) error
	TMedlineCitation                         func(*TMedlineCitation, bool) error
	XsdGoPkgHasElem_Book                     func(*XsdGoPkgHasElem_Book, bool) error
	XsdGoPkgHasElem_PublisherName            func(*XsdGoPkgHasElem_PublisherName, bool) error
	XsdGoPkgHasElem_PublisherLocation        func(*XsdGoPkgHasElem_PublisherLocation, bool) error
	XsdGoPkgHasElem_GeneSymbol               func(*XsdGoPkgHasElem_GeneSymbol, bool) error
	XsdGoPkgHasElems_PublisherLocation       func(*XsdGoPkgHasElems_PublisherLocation, bool) error
	XsdGoPkgHasElems_Url                     func(*XsdGoPkgHasElems_Url, bool) error
	XsdGoPkgHasElems_DateRevised             func(*XsdGoPkgHasElems_DateRevised, bool) error
	TPubMedPubDate                           func(*TPubMedPubDate, bool) error
	TParam                                   func(*TParam, bool) error
	XsdGoPkgHasElem_Agency                   func(*XsdGoPkgHasElem_Agency, bool) error
	XsdGoPkgHasElem_StartPage                func(*XsdGoPkgHasElem_StartPage, bool) error
	XsdGoPkgHasElem_NlmUniqueID              func(*XsdGoPkgHasElem_NlmUniqueID, bool) error
	XsdGoPkgHasElems_SupplMeshName           func(*XsdGoPkgHasElems_SupplMeshName, bool) error
	XsdGoPkgHasElems_NlmUniqueID             func(*XsdGoPkgHasElems_NlmUniqueID, bool) error
	XsdGoPkgHasElem_Season                   func(*XsdGoPkgHasElem_Season, bool) error
	XsdGoPkgHasElems_Item                    func(*XsdGoPkgHasElems_Item, bool) error
	XsdGoPkgHasElems_ItemList                func(*XsdGoPkgHasElems_ItemList, bool) error
	XsdGoPkgHasElems_Day                     func(*XsdGoPkgHasElems_Day, bool) error
	XsdGoPkgHasElems_Sections                func(*XsdGoPkgHasElems_Sections, bool) error
	XsdGoPkgHasElems_PubmedBookArticleSet    func(*XsdGoPkgHasElems_PubmedBookArticleSet, bool) error
	XsdGoPkgHasElems_AbstractText            func(*XsdGoPkgHasElems_AbstractText, bool) error
	TAuthorList                              func(*TAuthorList, bool) error
	XsdGoPkgHasElem_Pagination               func(*XsdGoPkgHasElem_Pagination, bool) error
	XsdGoPkgHasElems_GrantID                 func(*XsdGoPkgHasElems_GrantID, bool) error
	XsdGoPkgHasElems_ISOAbbreviation         func(*XsdGoPkgHasElems_ISOAbbreviation, bool) error
	XsdGoPkgHasElems_Issn                    func(*XsdGoPkgHasElems_Issn, bool) error
	XsdGoPkgHasElem_Initials                 func(*XsdGoPkgHasElem_Initials, bool) error
	TPublicationType                         func(*TPublicationType, bool) error
	XsdGoPkgHasElem_EndPage                  func(*XsdGoPkgHasElem_EndPage, bool) error
	XsdGoPkgHasElem_MedlineTA                func(*XsdGoPkgHasElem_MedlineTA, bool) error
	XsdGoPkgHasElem_ReportNumber             func(*XsdGoPkgHasElem_ReportNumber, bool) error
	TSections                                func(*TSections, bool) error
	XsdGoPkgHasElems_DeleteCitation          func(*XsdGoPkgHasElems_DeleteCitation, bool) error
	XsdGoPkgHasElems_B                       func(*XsdGoPkgHasElems_B, bool) error
	XsdGoPkgHasElems_U                       func(*XsdGoPkgHasElems_U, bool) error
	XsdGoPkgHasElem_Abstract                 func(*XsdGoPkgHasElem_Abstract, bool) error
	XsdGoPkgHasElem_SupplMeshList            func(*XsdGoPkgHasElem_SupplMeshList, bool) error
	TCollectionTitle                         func(*TCollectionTitle, bool) error
	XsdGoPkgHasElem_EndingDate               func(*XsdGoPkgHasElem_EndingDate, bool) error
	XsdGoPkgHasElems_Acronym                 func(*XsdGoPkgHasElems_Acronym, bool) error
	XsdGoPkgHasElems_ForeName                func(*XsdGoPkgHasElems_ForeName, bool) error
	XsdGoPkgHasElems_BookDocument            func(*XsdGoPkgHasElems_BookDocument, bool) error
	XsdGoPkgHasElems_Author                  func(*XsdGoPkgHasElems_Author, bool) error
	XsdGoPkgHasElem_Format                   func(*XsdGoPkgHasElem_Format, bool) error
	XsdGoPkgHasElems_DateCreated             func(*XsdGoPkgHasElems_DateCreated, bool) error
	XsdGoPkgHasElems_BookTitle               func(*XsdGoPkgHasElems_BookTitle, bool) error
}
