//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		dev.upstores.com.br/medline/medline.xsd
package generated

import (
	xsdt "github.com/metaleap/go-xsd/types"
)

type TpubStatus xsdt.String

//	Since TpubStatus is just a simple String type, this merely sets the current value from the specified string.
func (me *TpubStatus) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TpubStatus is just a simple String type, this merely returns the current string value.
func (me TpubStatus) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TpubStatus's alias type xsdt.String.
func (me TpubStatus) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XHasAttr_PubStatus_TpubStatus_ struct {
	PubStatus TpubStatus `xml:"PubStatus,attr"`
}

type XHasAtts_AttlistPubMedPubDate struct {
	XHasAttr_PubStatus_TpubStatus_
}

type TartIdType xsdt.String

//	Since TartIdType is just a simple String type, this merely sets the current value from the specified string.
func (me *TartIdType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TartIdType is just a simple String type, this merely returns the current string value.
func (me TartIdType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TartIdType's alias type xsdt.String.
func (me TartIdType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XHasAttr_IdType_TartIdType_Pubmed struct {
	IdType TartIdType `xml:"IdType,attr"`
}

//	Returns the default value for IdType -- "pubmed"
func (me XHasAttr_IdType_TartIdType_Pubmed) IdTypeDefault() TartIdType { return TartIdType("pubmed") }

type XHasAtts_AttlistArticleId struct {
	XHasAttr_IdType_TartIdType_Pubmed
}

type TAttlistUrlType xsdt.Token

//	Since TAttlistUrlType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistUrlType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistUrlType is just a simple String type, this merely returns the current string value.
func (me TAttlistUrlType) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistUrlType's alias type xsdt.Token.
func (me TAttlistUrlType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistUrlType is "FullText".
func (me TAttlistUrlType) IsFullText() bool { return me.String() == "FullText" }

//	Returns true if the value of this enumerated TAttlistUrlType is "summary".
func (me TAttlistUrlType) IsSummary() bool { return me.String() == "summary" }

//	Returns true if the value of this enumerated TAttlistUrlType is "fulltext".
func (me TAttlistUrlType) IsFulltext() bool { return me.String() == "fulltext" }

type XHasAttr_Type_TAttlistUrlType_ struct {
	Type TAttlistUrlType `xml:"Type,attr"`
}

type TisoLanguageCodes xsdt.Token

//	Returns true if the value of this enumerated TisoLanguageCodes is "TH".
func (me TisoLanguageCodes) IsTh() bool { return me.String() == "TH" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "AF".
func (me TisoLanguageCodes) IsAf() bool { return me.String() == "AF" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "LT".
func (me TisoLanguageCodes) IsLt() bool { return me.String() == "LT" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "PL".
func (me TisoLanguageCodes) IsPl() bool { return me.String() == "PL" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "SK".
func (me TisoLanguageCodes) IsSk() bool { return me.String() == "SK" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "SQ".
func (me TisoLanguageCodes) IsSq() bool { return me.String() == "SQ" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "SR".
func (me TisoLanguageCodes) IsSr() bool { return me.String() == "SR" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "ZH".
func (me TisoLanguageCodes) IsZh() bool { return me.String() == "ZH" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "AZ".
func (me TisoLanguageCodes) IsAz() bool { return me.String() == "AZ" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "BG".
func (me TisoLanguageCodes) IsBg() bool { return me.String() == "BG" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "DE".
func (me TisoLanguageCodes) IsDe() bool { return me.String() == "DE" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "KA".
func (me TisoLanguageCodes) IsKa() bool { return me.String() == "KA" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "SW".
func (me TisoLanguageCodes) IsSw() bool { return me.String() == "SW" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "VI".
func (me TisoLanguageCodes) IsVi() bool { return me.String() == "VI" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "IW".
func (me TisoLanguageCodes) IsIw() bool { return me.String() == "IW" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "KO".
func (me TisoLanguageCodes) IsKo() bool { return me.String() == "KO" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "MK".
func (me TisoLanguageCodes) IsMk() bool { return me.String() == "MK" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "PS".
func (me TisoLanguageCodes) IsPs() bool { return me.String() == "PS" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "CS".
func (me TisoLanguageCodes) IsCs() bool { return me.String() == "CS" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "EN".
func (me TisoLanguageCodes) IsEn() bool { return me.String() == "EN" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "EL".
func (me TisoLanguageCodes) IsEl() bool { return me.String() == "EL" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "FA".
func (me TisoLanguageCodes) IsFa() bool { return me.String() == "FA" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "HY".
func (me TisoLanguageCodes) IsHy() bool { return me.String() == "HY" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "IN".
func (me TisoLanguageCodes) IsIn() bool { return me.String() == "IN" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "SL".
func (me TisoLanguageCodes) IsSl() bool { return me.String() == "SL" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "UK".
func (me TisoLanguageCodes) IsUk() bool { return me.String() == "UK" }

//	Since TisoLanguageCodes is just a simple String type, this merely returns the current string value.
func (me TisoLanguageCodes) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TisoLanguageCodes is "ES".
func (me TisoLanguageCodes) IsEs() bool { return me.String() == "ES" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "IS".
func (me TisoLanguageCodes) IsIs() bool { return me.String() == "IS" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "IT".
func (me TisoLanguageCodes) IsIt() bool { return me.String() == "IT" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "RO".
func (me TisoLanguageCodes) IsRo() bool { return me.String() == "RO" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "RU".
func (me TisoLanguageCodes) IsRu() bool { return me.String() == "RU" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "AR".
func (me TisoLanguageCodes) IsAr() bool { return me.String() == "AR" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "DA".
func (me TisoLanguageCodes) IsDa() bool { return me.String() == "DA" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "HU".
func (me TisoLanguageCodes) IsHu() bool { return me.String() == "HU" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "JA".
func (me TisoLanguageCodes) IsJa() bool { return me.String() == "JA" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "ML".
func (me TisoLanguageCodes) IsMl() bool { return me.String() == "ML" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "TR".
func (me TisoLanguageCodes) IsTr() bool { return me.String() == "TR" }

//	This convenience method just performs a simple type conversion to TisoLanguageCodes's alias type xsdt.Token.
func (me TisoLanguageCodes) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TisoLanguageCodes is "FI".
func (me TisoLanguageCodes) IsFi() bool { return me.String() == "FI" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "PT".
func (me TisoLanguageCodes) IsPt() bool { return me.String() == "PT" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "SV".
func (me TisoLanguageCodes) IsSv() bool { return me.String() == "SV" }

//	Since TisoLanguageCodes is just a simple String type, this merely sets the current value from the specified string.
func (me *TisoLanguageCodes) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Returns true if the value of this enumerated TisoLanguageCodes is "FR".
func (me TisoLanguageCodes) IsFr() bool { return me.String() == "FR" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "HE".
func (me TisoLanguageCodes) IsHe() bool { return me.String() == "HE" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "NL".
func (me TisoLanguageCodes) IsNl() bool { return me.String() == "NL" }

//	Returns true if the value of this enumerated TisoLanguageCodes is "NO".
func (me TisoLanguageCodes) IsNo() bool { return me.String() == "NO" }

type XHasAttr_Lang_TisoLanguageCodes_ struct {
	Lang TisoLanguageCodes `xml:"lang,attr"`
}

type XHasAtts_AttlistUrl struct {
	XHasAttr_Type_TAttlistUrlType_

	XHasAttr_Lang_TisoLanguageCodes_
}

type XHasAttr_Type_XsdtString_ struct {
	Type xsdt.String `xml:"Type,attr"`
}

type XHasAtts_AttlistObject struct {
	XHasAttr_Type_XsdtString_
}

type XHasAttr_Name_XsdtString_ struct {
	Name xsdt.String `xml:"Name,attr"`
}

type XHasAtts_AttlistParam struct {
	XHasAttr_Name_XsdtString_
}

type TAttlistMedlineCitationOwner xsdt.Token

//	Since TAttlistMedlineCitationOwner is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistMedlineCitationOwner) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistMedlineCitationOwner is just a simple String type, this merely returns the current string value.
func (me TAttlistMedlineCitationOwner) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistMedlineCitationOwner's alias type xsdt.Token.
func (me TAttlistMedlineCitationOwner) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistMedlineCitationOwner is "NLM".
func (me TAttlistMedlineCitationOwner) IsNlm() bool { return me.String() == "NLM" }

//	Returns true if the value of this enumerated TAttlistMedlineCitationOwner is "KIE".
func (me TAttlistMedlineCitationOwner) IsKie() bool { return me.String() == "KIE" }

//	Returns true if the value of this enumerated TAttlistMedlineCitationOwner is "HSR".
func (me TAttlistMedlineCitationOwner) IsHsr() bool { return me.String() == "HSR" }

//	Returns true if the value of this enumerated TAttlistMedlineCitationOwner is "NASA".
func (me TAttlistMedlineCitationOwner) IsNasa() bool { return me.String() == "NASA" }

//	Returns true if the value of this enumerated TAttlistMedlineCitationOwner is "PIP".
func (me TAttlistMedlineCitationOwner) IsPip() bool { return me.String() == "PIP" }

//	Returns true if the value of this enumerated TAttlistMedlineCitationOwner is "HMD".
func (me TAttlistMedlineCitationOwner) IsHmd() bool { return me.String() == "HMD" }

//	Returns true if the value of this enumerated TAttlistMedlineCitationOwner is "NOTNLM".
func (me TAttlistMedlineCitationOwner) IsNotnlm() bool { return me.String() == "NOTNLM" }

type XHasAttr_Owner_TAttlistMedlineCitationOwner_Nlm struct {
	Owner TAttlistMedlineCitationOwner `xml:"Owner,attr"`
}

//	Returns the default value for Owner -- "NLM"
func (me XHasAttr_Owner_TAttlistMedlineCitationOwner_Nlm) OwnerDefault() TAttlistMedlineCitationOwner {
	return TAttlistMedlineCitationOwner("NLM")
}

type TAttlistMedlineCitationStatus xsdt.Token

//	Returns true if the value of this enumerated TAttlistMedlineCitationStatus is "MEDLINE".
func (me TAttlistMedlineCitationStatus) IsMedline() bool { return me.String() == "MEDLINE" }

//	Since TAttlistMedlineCitationStatus is just a simple String type, this merely returns the current string value.
func (me TAttlistMedlineCitationStatus) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TAttlistMedlineCitationStatus is "PubMed-not-MEDLINE".
func (me TAttlistMedlineCitationStatus) IsPubMedNotMedline() bool {
	return me.String() == "PubMed-not-MEDLINE"
}

//	Returns true if the value of this enumerated TAttlistMedlineCitationStatus is "In-Data-Review".
func (me TAttlistMedlineCitationStatus) IsInDataReview() bool { return me.String() == "In-Data-Review" }

//	Returns true if the value of this enumerated TAttlistMedlineCitationStatus is "Publisher".
func (me TAttlistMedlineCitationStatus) IsPublisher() bool { return me.String() == "Publisher" }

//	Returns true if the value of this enumerated TAttlistMedlineCitationStatus is "OLDMEDLINE".
func (me TAttlistMedlineCitationStatus) IsOldmedline() bool { return me.String() == "OLDMEDLINE" }

//	Since TAttlistMedlineCitationStatus is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistMedlineCitationStatus) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TAttlistMedlineCitationStatus's alias type xsdt.Token.
func (me TAttlistMedlineCitationStatus) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistMedlineCitationStatus is "Completed".
func (me TAttlistMedlineCitationStatus) IsCompleted() bool { return me.String() == "Completed" }

//	Returns true if the value of this enumerated TAttlistMedlineCitationStatus is "In-Process".
func (me TAttlistMedlineCitationStatus) IsInProcess() bool { return me.String() == "In-Process" }

type XHasAttr_Status_TAttlistMedlineCitationStatus_ struct {
	Status TAttlistMedlineCitationStatus `xml:"Status,attr"`
}

type XHasAttr_VersionID_XsdtString_ struct {
	VersionID xsdt.String `xml:"VersionID,attr"`
}

type XHasAttr_VersionDate_XsdtString_ struct {
	VersionDate xsdt.String `xml:"VersionDate,attr"`
}

type XHasAtts_AttlistMedlineCitation struct {
	XHasAttr_Owner_TAttlistMedlineCitationOwner_Nlm

	XHasAttr_Status_TAttlistMedlineCitationStatus_

	XHasAttr_VersionID_XsdtString_

	XHasAttr_VersionDate_XsdtString_
}

type XHasAttr_Label_XsdtString_ struct {
	Label xsdt.String `xml:"Label,attr"`
}

type TAttlistAbstractTextNlmCategory xsdt.Token

//	Since TAttlistAbstractTextNlmCategory is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistAbstractTextNlmCategory) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Returns true if the value of this enumerated TAttlistAbstractTextNlmCategory is "BACKGROUND".
func (me TAttlistAbstractTextNlmCategory) IsBackground() bool { return me.String() == "BACKGROUND" }

//	Returns true if the value of this enumerated TAttlistAbstractTextNlmCategory is "OBJECTIVE".
func (me TAttlistAbstractTextNlmCategory) IsObjective() bool { return me.String() == "OBJECTIVE" }

//	Returns true if the value of this enumerated TAttlistAbstractTextNlmCategory is "METHODS".
func (me TAttlistAbstractTextNlmCategory) IsMethods() bool { return me.String() == "METHODS" }

//	Returns true if the value of this enumerated TAttlistAbstractTextNlmCategory is "RESULTS".
func (me TAttlistAbstractTextNlmCategory) IsResults() bool { return me.String() == "RESULTS" }

//	Since TAttlistAbstractTextNlmCategory is just a simple String type, this merely returns the current string value.
func (me TAttlistAbstractTextNlmCategory) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistAbstractTextNlmCategory's alias type xsdt.Token.
func (me TAttlistAbstractTextNlmCategory) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistAbstractTextNlmCategory is "CONCLUSIONS".
func (me TAttlistAbstractTextNlmCategory) IsConclusions() bool { return me.String() == "CONCLUSIONS" }

//	Returns true if the value of this enumerated TAttlistAbstractTextNlmCategory is "UNASSIGNED".
func (me TAttlistAbstractTextNlmCategory) IsUnassigned() bool { return me.String() == "UNASSIGNED" }

type XHasAttr_NlmCategory_TAttlistAbstractTextNlmCategory_ struct {
	NlmCategory TAttlistAbstractTextNlmCategory `xml:"NlmCategory,attr"`
}

type XHasAtts_AttlistAbstractText struct {
	XHasAttr_Label_XsdtString_

	XHasAttr_NlmCategory_TAttlistAbstractTextNlmCategory_
}

type TAttlistArticlePubModel xsdt.Token

//	Returns true if the value of this enumerated TAttlistArticlePubModel is "Electronic-Print".
func (me TAttlistArticlePubModel) IsElectronicPrint() bool { return me.String() == "Electronic-Print" }

//	Returns true if the value of this enumerated TAttlistArticlePubModel is "Electronic-eCollection".
func (me TAttlistArticlePubModel) IsElectronicECollection() bool {
	return me.String() == "Electronic-eCollection"
}

//	Since TAttlistArticlePubModel is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistArticlePubModel) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistArticlePubModel is just a simple String type, this merely returns the current string value.
func (me TAttlistArticlePubModel) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistArticlePubModel's alias type xsdt.Token.
func (me TAttlistArticlePubModel) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistArticlePubModel is "Print".
func (me TAttlistArticlePubModel) IsPrint() bool { return me.String() == "Print" }

//	Returns true if the value of this enumerated TAttlistArticlePubModel is "Print-Electronic".
func (me TAttlistArticlePubModel) IsPrintElectronic() bool { return me.String() == "Print-Electronic" }

//	Returns true if the value of this enumerated TAttlistArticlePubModel is "Electronic".
func (me TAttlistArticlePubModel) IsElectronic() bool { return me.String() == "Electronic" }

type XHasAttr_PubModel_TAttlistArticlePubModel_ struct {
	PubModel TAttlistArticlePubModel `xml:"PubModel,attr"`
}

type XHasAtts_AttlistArticle struct {
	XHasAttr_PubModel_TAttlistArticlePubModel_
}

type TAttlistArticleDateDateType xsdt.String

//	Since TAttlistArticleDateDateType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistArticleDateDateType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TAttlistArticleDateDateType is just a simple String type, this merely returns the current string value.
func (me TAttlistArticleDateDateType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistArticleDateDateType's alias type xsdt.String.
func (me TAttlistArticleDateDateType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TAttlistArticleDateDateType is "Electronic".
func (me TAttlistArticleDateDateType) IsElectronic() bool { return me.String() == "Electronic" }

type XHasAttr_DateType_TAttlistArticleDateDateType_Electronic struct {
	DateType TAttlistArticleDateDateType `xml:"DateType,attr"`
}

//	Returns the default value for DateType -- "Electronic"
func (me XHasAttr_DateType_TAttlistArticleDateDateType_Electronic) DateTypeDefault() TAttlistArticleDateDateType {
	return TAttlistArticleDateDateType("Electronic")
}

type XHasAtts_AttlistArticleDate struct {
	XHasAttr_DateType_TAttlistArticleDateDateType_Electronic
}

type TAttlistAuthorValidYN xsdt.Token

//	Since TAttlistAuthorValidYN is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistAuthorValidYN) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistAuthorValidYN is just a simple String type, this merely returns the current string value.
func (me TAttlistAuthorValidYN) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistAuthorValidYN's alias type xsdt.Token.
func (me TAttlistAuthorValidYN) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistAuthorValidYN is "Y".
func (me TAttlistAuthorValidYN) IsY() bool { return me.String() == "Y" }

//	Returns true if the value of this enumerated TAttlistAuthorValidYN is "N".
func (me TAttlistAuthorValidYN) IsN() bool { return me.String() == "N" }

type XHasAttr_ValidYN_TAttlistAuthorValidYN_Y struct {
	ValidYN TAttlistAuthorValidYN `xml:"ValidYN,attr"`
}

//	Returns the default value for ValidYN -- "Y"
func (me XHasAttr_ValidYN_TAttlistAuthorValidYN_Y) ValidYNDefault() TAttlistAuthorValidYN {
	return TAttlistAuthorValidYN("Y")
}

type XHasAtts_AttlistAuthor struct {
	XHasAttr_ValidYN_TAttlistAuthorValidYN_Y
}

type TAttlistAuthorListCompleteYN xsdt.Token

//	Since TAttlistAuthorListCompleteYN is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistAuthorListCompleteYN) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistAuthorListCompleteYN is just a simple String type, this merely returns the current string value.
func (me TAttlistAuthorListCompleteYN) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistAuthorListCompleteYN's alias type xsdt.Token.
func (me TAttlistAuthorListCompleteYN) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistAuthorListCompleteYN is "Y".
func (me TAttlistAuthorListCompleteYN) IsY() bool { return me.String() == "Y" }

//	Returns true if the value of this enumerated TAttlistAuthorListCompleteYN is "N".
func (me TAttlistAuthorListCompleteYN) IsN() bool { return me.String() == "N" }

type XHasAttr_CompleteYN_TAttlistAuthorListCompleteYN_Y struct {
	CompleteYN TAttlistAuthorListCompleteYN `xml:"CompleteYN,attr"`
}

//	Returns the default value for CompleteYN -- "Y"
func (me XHasAttr_CompleteYN_TAttlistAuthorListCompleteYN_Y) CompleteYNDefault() TAttlistAuthorListCompleteYN {
	return TAttlistAuthorListCompleteYN("Y")
}

type TAttlistAuthorListType xsdt.Token

//	Since TAttlistAuthorListType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistAuthorListType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistAuthorListType is just a simple String type, this merely returns the current string value.
func (me TAttlistAuthorListType) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistAuthorListType's alias type xsdt.Token.
func (me TAttlistAuthorListType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistAuthorListType is "authors".
func (me TAttlistAuthorListType) IsAuthors() bool { return me.String() == "authors" }

//	Returns true if the value of this enumerated TAttlistAuthorListType is "editors".
func (me TAttlistAuthorListType) IsEditors() bool { return me.String() == "editors" }

type XHasAttr_Type_TAttlistAuthorListType_Authors struct {
	Type TAttlistAuthorListType `xml:"Type,attr"`
}

//	Returns the default value for Type -- "authors"
func (me XHasAttr_Type_TAttlistAuthorListType_Authors) TypeDefault() TAttlistAuthorListType {
	return TAttlistAuthorListType("authors")
}

type XHasAtts_AttlistAuthorList struct {
	XHasAttr_Type_TAttlistAuthorListType_Authors

	XHasAttr_CompleteYN_TAttlistAuthorListCompleteYN_Y
}

type TAttlistCommentsCorrectionsRefType xsdt.Token

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "PartialRetractionIn".
func (me TAttlistCommentsCorrectionsRefType) IsPartialRetractionIn() bool {
	return me.String() == "PartialRetractionIn"
}

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "RepublishedIn".
func (me TAttlistCommentsCorrectionsRefType) IsRepublishedIn() bool {
	return me.String() == "RepublishedIn"
}

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "UpdateOf".
func (me TAttlistCommentsCorrectionsRefType) IsUpdateOf() bool { return me.String() == "UpdateOf" }

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "Cites".
func (me TAttlistCommentsCorrectionsRefType) IsCites() bool { return me.String() == "Cites" }

//	Since TAttlistCommentsCorrectionsRefType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistCommentsCorrectionsRefType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "AssociatedPublication".
func (me TAttlistCommentsCorrectionsRefType) IsAssociatedPublication() bool {
	return me.String() == "AssociatedPublication"
}

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "CommentIn".
func (me TAttlistCommentsCorrectionsRefType) IsCommentIn() bool { return me.String() == "CommentIn" }

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "ErratumFor".
func (me TAttlistCommentsCorrectionsRefType) IsErratumFor() bool { return me.String() == "ErratumFor" }

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "PartialRetractionOf".
func (me TAttlistCommentsCorrectionsRefType) IsPartialRetractionOf() bool {
	return me.String() == "PartialRetractionOf"
}

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "RepublishedFrom".
func (me TAttlistCommentsCorrectionsRefType) IsRepublishedFrom() bool {
	return me.String() == "RepublishedFrom"
}

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "RetractionIn".
func (me TAttlistCommentsCorrectionsRefType) IsRetractionIn() bool {
	return me.String() == "RetractionIn"
}

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "ReprintOf".
func (me TAttlistCommentsCorrectionsRefType) IsReprintOf() bool { return me.String() == "ReprintOf" }

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "AssociatedDataset".
func (me TAttlistCommentsCorrectionsRefType) IsAssociatedDataset() bool {
	return me.String() == "AssociatedDataset"
}

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "CommentOn".
func (me TAttlistCommentsCorrectionsRefType) IsCommentOn() bool { return me.String() == "CommentOn" }

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "OriginalReportIn".
func (me TAttlistCommentsCorrectionsRefType) IsOriginalReportIn() bool {
	return me.String() == "OriginalReportIn"
}

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "ReprintIn".
func (me TAttlistCommentsCorrectionsRefType) IsReprintIn() bool { return me.String() == "ReprintIn" }

//	Since TAttlistCommentsCorrectionsRefType is just a simple String type, this merely returns the current string value.
func (me TAttlistCommentsCorrectionsRefType) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistCommentsCorrectionsRefType's alias type xsdt.Token.
func (me TAttlistCommentsCorrectionsRefType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "ErratumIn".
func (me TAttlistCommentsCorrectionsRefType) IsErratumIn() bool { return me.String() == "ErratumIn" }

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "RetractionOf".
func (me TAttlistCommentsCorrectionsRefType) IsRetractionOf() bool {
	return me.String() == "RetractionOf"
}

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "UpdateIn".
func (me TAttlistCommentsCorrectionsRefType) IsUpdateIn() bool { return me.String() == "UpdateIn" }

//	Returns true if the value of this enumerated TAttlistCommentsCorrectionsRefType is "SummaryForPatientsIn".
func (me TAttlistCommentsCorrectionsRefType) IsSummaryForPatientsIn() bool {
	return me.String() == "SummaryForPatientsIn"
}

type XHasAttr_RefType_TAttlistCommentsCorrectionsRefType_ struct {
	RefType TAttlistCommentsCorrectionsRefType `xml:"RefType,attr"`
}

type XHasAtts_AttlistCommentsCorrections struct {
	XHasAttr_RefType_TAttlistCommentsCorrectionsRefType_
}

type TAttlistDataBankListCompleteYN xsdt.Token

//	Returns true if the value of this enumerated TAttlistDataBankListCompleteYN is "Y".
func (me TAttlistDataBankListCompleteYN) IsY() bool { return me.String() == "Y" }

//	Returns true if the value of this enumerated TAttlistDataBankListCompleteYN is "N".
func (me TAttlistDataBankListCompleteYN) IsN() bool { return me.String() == "N" }

//	Since TAttlistDataBankListCompleteYN is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistDataBankListCompleteYN) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistDataBankListCompleteYN is just a simple String type, this merely returns the current string value.
func (me TAttlistDataBankListCompleteYN) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistDataBankListCompleteYN's alias type xsdt.Token.
func (me TAttlistDataBankListCompleteYN) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type XHasAttr_CompleteYN_TAttlistDataBankListCompleteYN_Y struct {
	CompleteYN TAttlistDataBankListCompleteYN `xml:"CompleteYN,attr"`
}

//	Returns the default value for CompleteYN -- "Y"
func (me XHasAttr_CompleteYN_TAttlistDataBankListCompleteYN_Y) CompleteYNDefault() TAttlistDataBankListCompleteYN {
	return TAttlistDataBankListCompleteYN("Y")
}

type XHasAtts_AttlistDataBankList struct {
	XHasAttr_CompleteYN_TAttlistDataBankListCompleteYN_Y
}

type TAttlistDescriptorNameMajorTopicYN xsdt.Token

//	Since TAttlistDescriptorNameMajorTopicYN is just a simple String type, this merely returns the current string value.
func (me TAttlistDescriptorNameMajorTopicYN) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistDescriptorNameMajorTopicYN's alias type xsdt.Token.
func (me TAttlistDescriptorNameMajorTopicYN) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistDescriptorNameMajorTopicYN is "Y".
func (me TAttlistDescriptorNameMajorTopicYN) IsY() bool { return me.String() == "Y" }

//	Returns true if the value of this enumerated TAttlistDescriptorNameMajorTopicYN is "N".
func (me TAttlistDescriptorNameMajorTopicYN) IsN() bool { return me.String() == "N" }

//	Since TAttlistDescriptorNameMajorTopicYN is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistDescriptorNameMajorTopicYN) Set(s string) { (*xsdt.Token)(me).Set(s) }

type XHasAttr_MajorTopicYN_TAttlistDescriptorNameMajorTopicYN_N struct {
	MajorTopicYN TAttlistDescriptorNameMajorTopicYN `xml:"MajorTopicYN,attr"`
}

//	Returns the default value for MajorTopicYN -- "N"
func (me XHasAttr_MajorTopicYN_TAttlistDescriptorNameMajorTopicYN_N) MajorTopicYNDefault() TAttlistDescriptorNameMajorTopicYN {
	return TAttlistDescriptorNameMajorTopicYN("N")
}

type TAttlistDescriptorNameType xsdt.Token

//	Returns true if the value of this enumerated TAttlistDescriptorNameType is "Geographic".
func (me TAttlistDescriptorNameType) IsGeographic() bool { return me.String() == "Geographic" }

//	Since TAttlistDescriptorNameType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistDescriptorNameType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistDescriptorNameType is just a simple String type, this merely returns the current string value.
func (me TAttlistDescriptorNameType) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistDescriptorNameType's alias type xsdt.Token.
func (me TAttlistDescriptorNameType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type XHasAttr_Type_TAttlistDescriptorNameType_ struct {
	Type TAttlistDescriptorNameType `xml:"Type,attr"`
}

type XHasAttr_Ui_XsdtString_ struct {
	Ui xsdt.String `xml:"UI,attr"`
}

type XHasAtts_AttlistDescriptorName struct {
	XHasAttr_MajorTopicYN_TAttlistDescriptorNameMajorTopicYN_N

	XHasAttr_Type_TAttlistDescriptorNameType_

	XHasAttr_Ui_XsdtString_
}

type TAttlistELocationIDValidYN xsdt.Token

//	Since TAttlistELocationIDValidYN is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistELocationIDValidYN) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistELocationIDValidYN is just a simple String type, this merely returns the current string value.
func (me TAttlistELocationIDValidYN) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistELocationIDValidYN's alias type xsdt.Token.
func (me TAttlistELocationIDValidYN) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistELocationIDValidYN is "Y".
func (me TAttlistELocationIDValidYN) IsY() bool { return me.String() == "Y" }

//	Returns true if the value of this enumerated TAttlistELocationIDValidYN is "N".
func (me TAttlistELocationIDValidYN) IsN() bool { return me.String() == "N" }

type XHasAttr_ValidYN_TAttlistELocationIDValidYN_Y struct {
	ValidYN TAttlistELocationIDValidYN `xml:"ValidYN,attr"`
}

//	Returns the default value for ValidYN -- "Y"
func (me XHasAttr_ValidYN_TAttlistELocationIDValidYN_Y) ValidYNDefault() TAttlistELocationIDValidYN {
	return TAttlistELocationIDValidYN("Y")
}

type TAttlistELocationIDEIdType xsdt.Token

//	This convenience method just performs a simple type conversion to TAttlistELocationIDEIdType's alias type xsdt.Token.
func (me TAttlistELocationIDEIdType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistELocationIDEIdType is "doi".
func (me TAttlistELocationIDEIdType) IsDoi() bool { return me.String() == "doi" }

//	Returns true if the value of this enumerated TAttlistELocationIDEIdType is "pii".
func (me TAttlistELocationIDEIdType) IsPii() bool { return me.String() == "pii" }

//	Since TAttlistELocationIDEIdType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistELocationIDEIdType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistELocationIDEIdType is just a simple String type, this merely returns the current string value.
func (me TAttlistELocationIDEIdType) String() string { return xsdt.Token(me).String() }

type XHasAttr_EIdType_TAttlistELocationIDEIdType_ struct {
	EIdType TAttlistELocationIDEIdType `xml:"EIdType,attr"`
}

type XHasAtts_AttlistELocationID struct {
	XHasAttr_EIdType_TAttlistELocationIDEIdType_

	XHasAttr_ValidYN_TAttlistELocationIDValidYN_Y
}

type TAttlistGeneralNoteOwner xsdt.Token

//	Since TAttlistGeneralNoteOwner is just a simple String type, this merely returns the current string value.
func (me TAttlistGeneralNoteOwner) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TAttlistGeneralNoteOwner is "NASA".
func (me TAttlistGeneralNoteOwner) IsNasa() bool { return me.String() == "NASA" }

//	Returns true if the value of this enumerated TAttlistGeneralNoteOwner is "HMD".
func (me TAttlistGeneralNoteOwner) IsHmd() bool { return me.String() == "HMD" }

//	Since TAttlistGeneralNoteOwner is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistGeneralNoteOwner) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Returns true if the value of this enumerated TAttlistGeneralNoteOwner is "NLM".
func (me TAttlistGeneralNoteOwner) IsNlm() bool { return me.String() == "NLM" }

//	Returns true if the value of this enumerated TAttlistGeneralNoteOwner is "PIP".
func (me TAttlistGeneralNoteOwner) IsPip() bool { return me.String() == "PIP" }

//	Returns true if the value of this enumerated TAttlistGeneralNoteOwner is "KIE".
func (me TAttlistGeneralNoteOwner) IsKie() bool { return me.String() == "KIE" }

//	Returns true if the value of this enumerated TAttlistGeneralNoteOwner is "HSR".
func (me TAttlistGeneralNoteOwner) IsHsr() bool { return me.String() == "HSR" }

//	This convenience method just performs a simple type conversion to TAttlistGeneralNoteOwner's alias type xsdt.Token.
func (me TAttlistGeneralNoteOwner) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type XHasAttr_Owner_TAttlistGeneralNoteOwner_Nlm struct {
	Owner TAttlistGeneralNoteOwner `xml:"Owner,attr"`
}

//	Returns the default value for Owner -- "NLM"
func (me XHasAttr_Owner_TAttlistGeneralNoteOwner_Nlm) OwnerDefault() TAttlistGeneralNoteOwner {
	return TAttlistGeneralNoteOwner("NLM")
}

type XHasAtts_AttlistGeneralNote struct {
	XHasAttr_Owner_TAttlistGeneralNoteOwner_Nlm
}

type TAttlistGrantListCompleteYN xsdt.Token

//	Since TAttlistGrantListCompleteYN is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistGrantListCompleteYN) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistGrantListCompleteYN is just a simple String type, this merely returns the current string value.
func (me TAttlistGrantListCompleteYN) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistGrantListCompleteYN's alias type xsdt.Token.
func (me TAttlistGrantListCompleteYN) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistGrantListCompleteYN is "Y".
func (me TAttlistGrantListCompleteYN) IsY() bool { return me.String() == "Y" }

//	Returns true if the value of this enumerated TAttlistGrantListCompleteYN is "N".
func (me TAttlistGrantListCompleteYN) IsN() bool { return me.String() == "N" }

type XHasAttr_CompleteYN_TAttlistGrantListCompleteYN_Y struct {
	CompleteYN TAttlistGrantListCompleteYN `xml:"CompleteYN,attr"`
}

//	Returns the default value for CompleteYN -- "Y"
func (me XHasAttr_CompleteYN_TAttlistGrantListCompleteYN_Y) CompleteYNDefault() TAttlistGrantListCompleteYN {
	return TAttlistGrantListCompleteYN("Y")
}

type XHasAtts_AttlistGrantList struct {
	XHasAttr_CompleteYN_TAttlistGrantListCompleteYN_Y
}

type XHasAttr_Source_XsdtString_ struct {
	Source xsdt.String `xml:"Source,attr"`
}

type XHasAtts_AttlistIdentifier struct {
	XHasAttr_Source_XsdtString_
}

type TAttlistIssnIssnType xsdt.Token

//	Since TAttlistIssnIssnType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistIssnIssnType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistIssnIssnType is just a simple String type, this merely returns the current string value.
func (me TAttlistIssnIssnType) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistIssnIssnType's alias type xsdt.Token.
func (me TAttlistIssnIssnType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistIssnIssnType is "Electronic".
func (me TAttlistIssnIssnType) IsElectronic() bool { return me.String() == "Electronic" }

//	Returns true if the value of this enumerated TAttlistIssnIssnType is "Print".
func (me TAttlistIssnIssnType) IsPrint() bool { return me.String() == "Print" }

type XHasAttr_IssnType_TAttlistIssnIssnType_ struct {
	IssnType TAttlistIssnIssnType `xml:"IssnType,attr"`
}

type XHasAtts_AttlistIssn struct {
	XHasAttr_IssnType_TAttlistIssnIssnType_
}

type TAttlistInvestigatorValidYN xsdt.Token

//	Since TAttlistInvestigatorValidYN is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistInvestigatorValidYN) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistInvestigatorValidYN is just a simple String type, this merely returns the current string value.
func (me TAttlistInvestigatorValidYN) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistInvestigatorValidYN's alias type xsdt.Token.
func (me TAttlistInvestigatorValidYN) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistInvestigatorValidYN is "Y".
func (me TAttlistInvestigatorValidYN) IsY() bool { return me.String() == "Y" }

//	Returns true if the value of this enumerated TAttlistInvestigatorValidYN is "N".
func (me TAttlistInvestigatorValidYN) IsN() bool { return me.String() == "N" }

type XHasAttr_ValidYN_TAttlistInvestigatorValidYN_Y struct {
	ValidYN TAttlistInvestigatorValidYN `xml:"ValidYN,attr"`
}

//	Returns the default value for ValidYN -- "Y"
func (me XHasAttr_ValidYN_TAttlistInvestigatorValidYN_Y) ValidYNDefault() TAttlistInvestigatorValidYN {
	return TAttlistInvestigatorValidYN("Y")
}

type XHasAtts_AttlistInvestigator struct {
	XHasAttr_ValidYN_TAttlistInvestigatorValidYN_Y
}

type TAttlistJournalIssueCitedMedium xsdt.Token

//	Since TAttlistJournalIssueCitedMedium is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistJournalIssueCitedMedium) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistJournalIssueCitedMedium is just a simple String type, this merely returns the current string value.
func (me TAttlistJournalIssueCitedMedium) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistJournalIssueCitedMedium's alias type xsdt.Token.
func (me TAttlistJournalIssueCitedMedium) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistJournalIssueCitedMedium is "Internet".
func (me TAttlistJournalIssueCitedMedium) IsInternet() bool { return me.String() == "Internet" }

//	Returns true if the value of this enumerated TAttlistJournalIssueCitedMedium is "Print".
func (me TAttlistJournalIssueCitedMedium) IsPrint() bool { return me.String() == "Print" }

type XHasAttr_CitedMedium_TAttlistJournalIssueCitedMedium_ struct {
	CitedMedium TAttlistJournalIssueCitedMedium `xml:"CitedMedium,attr"`
}

type XHasAtts_AttlistJournalIssue struct {
	XHasAttr_CitedMedium_TAttlistJournalIssueCitedMedium_
}

type TAttlistKeywordMajorTopicYN xsdt.Token

//	This convenience method just performs a simple type conversion to TAttlistKeywordMajorTopicYN's alias type xsdt.Token.
func (me TAttlistKeywordMajorTopicYN) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistKeywordMajorTopicYN is "Y".
func (me TAttlistKeywordMajorTopicYN) IsY() bool { return me.String() == "Y" }

//	Returns true if the value of this enumerated TAttlistKeywordMajorTopicYN is "N".
func (me TAttlistKeywordMajorTopicYN) IsN() bool { return me.String() == "N" }

//	Since TAttlistKeywordMajorTopicYN is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistKeywordMajorTopicYN) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistKeywordMajorTopicYN is just a simple String type, this merely returns the current string value.
func (me TAttlistKeywordMajorTopicYN) String() string { return xsdt.Token(me).String() }

type XHasAttr_MajorTopicYN_TAttlistKeywordMajorTopicYN_N struct {
	MajorTopicYN TAttlistKeywordMajorTopicYN `xml:"MajorTopicYN,attr"`
}

//	Returns the default value for MajorTopicYN -- "N"
func (me XHasAttr_MajorTopicYN_TAttlistKeywordMajorTopicYN_N) MajorTopicYNDefault() TAttlistKeywordMajorTopicYN {
	return TAttlistKeywordMajorTopicYN("N")
}

type XHasAtts_AttlistKeyword struct {
	XHasAttr_MajorTopicYN_TAttlistKeywordMajorTopicYN_N
}

type TAttlistKeywordListOwner xsdt.Token

//	Returns true if the value of this enumerated TAttlistKeywordListOwner is "NASA".
func (me TAttlistKeywordListOwner) IsNasa() bool { return me.String() == "NASA" }

//	Returns true if the value of this enumerated TAttlistKeywordListOwner is "PIP".
func (me TAttlistKeywordListOwner) IsPip() bool { return me.String() == "PIP" }

//	Returns true if the value of this enumerated TAttlistKeywordListOwner is "HHS".
func (me TAttlistKeywordListOwner) IsHhs() bool { return me.String() == "HHS" }

//	Since TAttlistKeywordListOwner is just a simple String type, this merely returns the current string value.
func (me TAttlistKeywordListOwner) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistKeywordListOwner's alias type xsdt.Token.
func (me TAttlistKeywordListOwner) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistKeywordListOwner is "NLM".
func (me TAttlistKeywordListOwner) IsNlm() bool { return me.String() == "NLM" }

//	Returns true if the value of this enumerated TAttlistKeywordListOwner is "NLM-AUTO".
func (me TAttlistKeywordListOwner) IsNlmAuto() bool { return me.String() == "NLM-AUTO" }

//	Since TAttlistKeywordListOwner is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistKeywordListOwner) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Returns true if the value of this enumerated TAttlistKeywordListOwner is "KIE".
func (me TAttlistKeywordListOwner) IsKie() bool { return me.String() == "KIE" }

//	Returns true if the value of this enumerated TAttlistKeywordListOwner is "NOTNLM".
func (me TAttlistKeywordListOwner) IsNotnlm() bool { return me.String() == "NOTNLM" }

type XHasAttr_Owner_TAttlistKeywordListOwner_Nlm struct {
	Owner TAttlistKeywordListOwner `xml:"Owner,attr"`
}

//	Returns the default value for Owner -- "NLM"
func (me XHasAttr_Owner_TAttlistKeywordListOwner_Nlm) OwnerDefault() TAttlistKeywordListOwner {
	return TAttlistKeywordListOwner("NLM")
}

type XHasAtts_AttlistKeywordList struct {
	XHasAttr_Owner_TAttlistKeywordListOwner_Nlm
}

type XHasAtts_AttlistNameOfSubstance struct {
	XHasAttr_Ui_XsdtString_
}

type TAttlistOtherAbstractType xsdt.Token

//	Returns true if the value of this enumerated TAttlistOtherAbstractType is "AIDS".
func (me TAttlistOtherAbstractType) IsAids() bool { return me.String() == "AIDS" }

//	Returns true if the value of this enumerated TAttlistOtherAbstractType is "NASA".
func (me TAttlistOtherAbstractType) IsNasa() bool { return me.String() == "NASA" }

//	Returns true if the value of this enumerated TAttlistOtherAbstractType is "Publisher".
func (me TAttlistOtherAbstractType) IsPublisher() bool { return me.String() == "Publisher" }

//	This convenience method just performs a simple type conversion to TAttlistOtherAbstractType's alias type xsdt.Token.
func (me TAttlistOtherAbstractType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistOtherAbstractType is "AAMC".
func (me TAttlistOtherAbstractType) IsAamc() bool { return me.String() == "AAMC" }

//	Returns true if the value of this enumerated TAttlistOtherAbstractType is "KIE".
func (me TAttlistOtherAbstractType) IsKie() bool { return me.String() == "KIE" }

//	Returns true if the value of this enumerated TAttlistOtherAbstractType is "PIP".
func (me TAttlistOtherAbstractType) IsPip() bool { return me.String() == "PIP" }

//	Since TAttlistOtherAbstractType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistOtherAbstractType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistOtherAbstractType is just a simple String type, this merely returns the current string value.
func (me TAttlistOtherAbstractType) String() string { return xsdt.Token(me).String() }

type XHasAttr_Type_TAttlistOtherAbstractType_ struct {
	Type TAttlistOtherAbstractType `xml:"Type,attr"`
}

type XHasAttr_Language_XsdtString_Eng struct {
	Language xsdt.String `xml:"Language,attr"`
}

//	Returns the default value for Language -- "eng"
func (me XHasAttr_Language_XsdtString_Eng) LanguageDefault() xsdt.String { return xsdt.String("eng") }

type XHasAtts_AttlistOtherAbstract struct {
	XHasAttr_Type_TAttlistOtherAbstractType_

	XHasAttr_Language_XsdtString_Eng
}

type TAttlistOtherIDSource xsdt.Token

//	This convenience method just performs a simple type conversion to TAttlistOtherIDSource's alias type xsdt.Token.
func (me TAttlistOtherIDSource) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistOtherIDSource is "NASA".
func (me TAttlistOtherIDSource) IsNasa() bool { return me.String() == "NASA" }

//	Returns true if the value of this enumerated TAttlistOtherIDSource is "KIE".
func (me TAttlistOtherIDSource) IsKie() bool { return me.String() == "KIE" }

//	Returns true if the value of this enumerated TAttlistOtherIDSource is "CPC".
func (me TAttlistOtherIDSource) IsCpc() bool { return me.String() == "CPC" }

//	Returns true if the value of this enumerated TAttlistOtherIDSource is "NRCBL".
func (me TAttlistOtherIDSource) IsNrcbl() bool { return me.String() == "NRCBL" }

//	Since TAttlistOtherIDSource is just a simple String type, this merely returns the current string value.
func (me TAttlistOtherIDSource) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TAttlistOtherIDSource is "PIP".
func (me TAttlistOtherIDSource) IsPip() bool { return me.String() == "PIP" }

//	Returns true if the value of this enumerated TAttlistOtherIDSource is "POP".
func (me TAttlistOtherIDSource) IsPop() bool { return me.String() == "POP" }

//	Since TAttlistOtherIDSource is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistOtherIDSource) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Returns true if the value of this enumerated TAttlistOtherIDSource is "ARPL".
func (me TAttlistOtherIDSource) IsArpl() bool { return me.String() == "ARPL" }

//	Returns true if the value of this enumerated TAttlistOtherIDSource is "IND".
func (me TAttlistOtherIDSource) IsInd() bool { return me.String() == "IND" }

//	Returns true if the value of this enumerated TAttlistOtherIDSource is "CPFH".
func (me TAttlistOtherIDSource) IsCpfh() bool { return me.String() == "CPFH" }

//	Returns true if the value of this enumerated TAttlistOtherIDSource is "CLML".
func (me TAttlistOtherIDSource) IsClml() bool { return me.String() == "CLML" }

//	Returns true if the value of this enumerated TAttlistOtherIDSource is "NLM".
func (me TAttlistOtherIDSource) IsNlm() bool { return me.String() == "NLM" }

//	Returns true if the value of this enumerated TAttlistOtherIDSource is "QCIM".
func (me TAttlistOtherIDSource) IsQcim() bool { return me.String() == "QCIM" }

type XHasAttr_Source_TAttlistOtherIDSource_ struct {
	Source TAttlistOtherIDSource `xml:"Source,attr"`
}

type XHasAtts_AttlistOtherID struct {
	XHasAttr_Source_TAttlistOtherIDSource_
}

type XHasAttr_Version_XsdtString_ struct {
	Version xsdt.String `xml:"Version,attr"`
}

type XHasAtts_AttlistPmid struct {
	XHasAttr_Version_XsdtString_
}

type TAttlistQualifierNameMajorTopicYN xsdt.Token

//	Since TAttlistQualifierNameMajorTopicYN is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistQualifierNameMajorTopicYN) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistQualifierNameMajorTopicYN is just a simple String type, this merely returns the current string value.
func (me TAttlistQualifierNameMajorTopicYN) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistQualifierNameMajorTopicYN's alias type xsdt.Token.
func (me TAttlistQualifierNameMajorTopicYN) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistQualifierNameMajorTopicYN is "Y".
func (me TAttlistQualifierNameMajorTopicYN) IsY() bool { return me.String() == "Y" }

//	Returns true if the value of this enumerated TAttlistQualifierNameMajorTopicYN is "N".
func (me TAttlistQualifierNameMajorTopicYN) IsN() bool { return me.String() == "N" }

type XHasAttr_MajorTopicYN_TAttlistQualifierNameMajorTopicYN_N struct {
	MajorTopicYN TAttlistQualifierNameMajorTopicYN `xml:"MajorTopicYN,attr"`
}

//	Returns the default value for MajorTopicYN -- "N"
func (me XHasAttr_MajorTopicYN_TAttlistQualifierNameMajorTopicYN_N) MajorTopicYNDefault() TAttlistQualifierNameMajorTopicYN {
	return TAttlistQualifierNameMajorTopicYN("N")
}

type XHasAtts_AttlistQualifierName struct {
	XHasAttr_MajorTopicYN_TAttlistQualifierNameMajorTopicYN_N

	XHasAttr_Ui_XsdtString_
}

type TAttlistSupplMeshNameType xsdt.Token

//	Returns true if the value of this enumerated TAttlistSupplMeshNameType is "Protocol".
func (me TAttlistSupplMeshNameType) IsProtocol() bool { return me.String() == "Protocol" }

//	Since TAttlistSupplMeshNameType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistSupplMeshNameType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TAttlistSupplMeshNameType is just a simple String type, this merely returns the current string value.
func (me TAttlistSupplMeshNameType) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TAttlistSupplMeshNameType's alias type xsdt.Token.
func (me TAttlistSupplMeshNameType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistSupplMeshNameType is "Disease".
func (me TAttlistSupplMeshNameType) IsDisease() bool { return me.String() == "Disease" }

type XHasAttr_Type_TAttlistSupplMeshNameType_ struct {
	Type TAttlistSupplMeshNameType `xml:"Type,attr"`
}

type XHasAtts_AttlistSupplMeshName struct {
	XHasAttr_Type_TAttlistSupplMeshNameType_

	XHasAttr_Ui_XsdtString_
}

type XHasAttr_Part_XsdtString_ struct {
	Part xsdt.String `xml:"part,attr"`
}

type XHasAttr_Sec_XsdtString_ struct {
	Sec xsdt.String `xml:"sec,attr"`
}

type XHasAttr_Book_XsdtString_ struct {
	Book xsdt.String `xml:"book,attr"`
}

type XHasAtts_Booklinkatts struct {
	XHasAttr_Book_XsdtString_

	XHasAttr_Part_XsdtString_

	XHasAttr_Sec_XsdtString_
}

type XHasAtts_AttlistBookTitle struct {
	XHasAtts_Booklinkatts
}

type TAttlistLocationLabelType xsdt.Token

//	Since TAttlistLocationLabelType is just a simple String type, this merely returns the current string value.
func (me TAttlistLocationLabelType) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TAttlistLocationLabelType is "section".
func (me TAttlistLocationLabelType) IsSection() bool { return me.String() == "section" }

//	Returns true if the value of this enumerated TAttlistLocationLabelType is "figure".
func (me TAttlistLocationLabelType) IsFigure() bool { return me.String() == "figure" }

//	Returns true if the value of this enumerated TAttlistLocationLabelType is "box".
func (me TAttlistLocationLabelType) IsBox() bool { return me.String() == "box" }

//	Returns true if the value of this enumerated TAttlistLocationLabelType is "table".
func (me TAttlistLocationLabelType) IsTable() bool { return me.String() == "table" }

//	Since TAttlistLocationLabelType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAttlistLocationLabelType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TAttlistLocationLabelType's alias type xsdt.Token.
func (me TAttlistLocationLabelType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TAttlistLocationLabelType is "part".
func (me TAttlistLocationLabelType) IsPart() bool { return me.String() == "part" }

//	Returns true if the value of this enumerated TAttlistLocationLabelType is "chapter".
func (me TAttlistLocationLabelType) IsChapter() bool { return me.String() == "chapter" }

//	Returns true if the value of this enumerated TAttlistLocationLabelType is "appendix".
func (me TAttlistLocationLabelType) IsAppendix() bool { return me.String() == "appendix" }

type XHasAttr_Type_TAttlistLocationLabelType_ struct {
	Type TAttlistLocationLabelType `xml:"Type,attr"`
}

type XHasAtts_AttlistLocationLabel struct {
	XHasAttr_Type_TAttlistLocationLabelType_
}

type XHasAttr_ListType_XsdtString_ struct {
	ListType xsdt.String `xml:"ListType,attr"`
}

type XHasAtts_AttlistItemList struct {
	XHasAttr_ListType_XsdtString_
}

type XHasCdata struct {
	XCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XHasCdata function is not nil (ie. was set by outside code), calls it with this XHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasCdata instance.
func (me *XHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPmid struct {
	XHasCdata

	XHasAtts_AttlistPmid
}

//	If the WalkHandlers.TPmid function is not nil (ie. was set by outside code), calls it with this TPmid instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TPmid instance.
func (me *TPmid) Walk() (err error) {
	if fn := WalkHandlers.TPmid; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Pmid struct {
	Pmid *TPmid `xml:"PMID"`
}

//	If the WalkHandlers.XHasElem_Pmid function is not nil (ie. was set by outside code), calls it with this XHasElem_Pmid instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_Pmid instance.
func (me *XHasElem_Pmid) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Pmid; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Pmid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_NumberOfReferences struct {
	NumberOfReferences xsdt.String `xml:"NumberOfReferences"`
}

//	If the WalkHandlers.XHasElem_NumberOfReferences function is not nil (ie. was set by outside code), calls it with this XHasElem_NumberOfReferences instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_NumberOfReferences instance.
func (me *XHasElem_NumberOfReferences) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_NumberOfReferences; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_B struct {
	Bs []xsdt.String `xml:"b"`
}

//	If the WalkHandlers.XHasElems_B function is not nil (ie. was set by outside code), calls it with this XHasElems_B instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_B instance.
func (me *XHasElems_B) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_B; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_I struct {
	Is []xsdt.String `xml:"i"`
}

//	If the WalkHandlers.XHasElems_I function is not nil (ie. was set by outside code), calls it with this XHasElems_I instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_I instance.
func (me *XHasElems_I) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_I; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Sup struct {
	Sups []xsdt.String `xml:"sup"`
}

//	If the WalkHandlers.XHasElems_Sup function is not nil (ie. was set by outside code), calls it with this XHasElems_Sup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Sup instance.
func (me *XHasElems_Sup) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Sup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Sub struct {
	Subs []xsdt.String `xml:"sub"`
}

//	If the WalkHandlers.XHasElems_Sub function is not nil (ie. was set by outside code), calls it with this XHasElems_Sub instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Sub instance.
func (me *XHasElems_Sub) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Sub; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_U struct {
	Us []xsdt.String `xml:"u"`
}

//	If the WalkHandlers.XHasElems_U function is not nil (ie. was set by outside code), calls it with this XHasElems_U instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_U instance.
func (me *XHasElems_U) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_U; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Format struct {
	Formats []*Ttext `xml:"format"`

	XHasElems_B

	XHasElems_I

	XHasElems_Sup

	XHasElems_Sub

	XHasElems_U
}

//	If the WalkHandlers.XHasElems_Format function is not nil (ie. was set by outside code), calls it with this XHasElems_Format instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/1 field(s) belonging to this XHasElems_Format instance.
func (me *XHasElems_Format) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Format; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_B.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_I.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_Sup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_Sub.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_U.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Ttext struct {
	XHasCdata

	XHasElems_Format
}

//	If the WalkHandlers.Ttext function is not nil (ie. was set by outside code), calls it with this Ttext instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this Ttext instance.
func (me *Ttext) Walk() (err error) {
	if fn := WalkHandlers.Ttext; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_Format.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TKeyword struct {
	Ttext

	XHasAtts_AttlistKeyword
}

//	If the WalkHandlers.TKeyword function is not nil (ie. was set by outside code), calls it with this TKeyword instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TKeyword instance.
func (me *TKeyword) Walk() (err error) {
	if fn := WalkHandlers.TKeyword; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ttext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Keyword struct {
	Keywords []*TKeyword `xml:"Keyword"`
}

//	If the WalkHandlers.XHasElems_Keyword function is not nil (ie. was set by outside code), calls it with this XHasElems_Keyword instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Keyword instance.
func (me *XHasElems_Keyword) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Keyword; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Keywords {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TKeywordList struct {
	XHasElems_Keyword

	XHasAtts_AttlistKeywordList
}

//	If the WalkHandlers.TKeywordList function is not nil (ie. was set by outside code), calls it with this TKeywordList instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TKeywordList instance.
func (me *TKeywordList) Walk() (err error) {
	if fn := WalkHandlers.TKeywordList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_Keyword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_KeywordList struct {
	KeywordLists []*TKeywordList `xml:"KeywordList"`
}

//	If the WalkHandlers.XHasElems_KeywordList function is not nil (ie. was set by outside code), calls it with this XHasElems_KeywordList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_KeywordList instance.
func (me *XHasElems_KeywordList) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_KeywordList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.KeywordLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_LastName struct {
	LastName xsdt.String `xml:"LastName"`
}

//	If the WalkHandlers.XHasElem_LastName function is not nil (ie. was set by outside code), calls it with this XHasElem_LastName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_LastName instance.
func (me *XHasElem_LastName) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_LastName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_ForeName struct {
	ForeName xsdt.String `xml:"ForeName"`
}

//	If the WalkHandlers.XHasElem_ForeName function is not nil (ie. was set by outside code), calls it with this XHasElem_ForeName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_ForeName instance.
func (me *XHasElem_ForeName) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_ForeName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Initials struct {
	Initials xsdt.String `xml:"Initials"`
}

//	If the WalkHandlers.XHasElem_Initials function is not nil (ie. was set by outside code), calls it with this XHasElem_Initials instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_Initials instance.
func (me *XHasElem_Initials) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Initials; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Suffix struct {
	Suffix *Ttext `xml:"Suffix"`
}

//	If the WalkHandlers.XHasElem_Suffix function is not nil (ie. was set by outside code), calls it with this XHasElem_Suffix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_Suffix instance.
func (me *XHasElem_Suffix) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Suffix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Suffix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TIdentifier struct {
	XHasCdata

	XHasAtts_AttlistIdentifier
}

//	If the WalkHandlers.TIdentifier function is not nil (ie. was set by outside code), calls it with this TIdentifier instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TIdentifier instance.
func (me *TIdentifier) Walk() (err error) {
	if fn := WalkHandlers.TIdentifier; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Identifier struct {
	Identifiers []*TIdentifier `xml:"Identifier"`
}

//	If the WalkHandlers.XHasElems_Identifier function is not nil (ie. was set by outside code), calls it with this XHasElems_Identifier instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Identifier instance.
func (me *XHasElems_Identifier) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Identifier; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Identifiers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Affiliation struct {
	Affiliation *Ttext `xml:"Affiliation"`
}

//	If the WalkHandlers.XHasElem_Affiliation function is not nil (ie. was set by outside code), calls it with this XHasElem_Affiliation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_Affiliation instance.
func (me *XHasElem_Affiliation) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Affiliation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Affiliation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAffiliationInfo struct {
	XHasElem_Affiliation

	XHasElems_Identifier
}

//	If the WalkHandlers.TAffiliationInfo function is not nil (ie. was set by outside code), calls it with this TAffiliationInfo instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TAffiliationInfo instance.
func (me *TAffiliationInfo) Walk() (err error) {
	if fn := WalkHandlers.TAffiliationInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_Identifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Affiliation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_AffiliationInfo struct {
	AffiliationInfos []*TAffiliationInfo `xml:"AffiliationInfo"`
}

//	If the WalkHandlers.XHasElems_AffiliationInfo function is not nil (ie. was set by outside code), calls it with this XHasElems_AffiliationInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_AffiliationInfo instance.
func (me *XHasElems_AffiliationInfo) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_AffiliationInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AffiliationInfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TInvestigator struct {
	XHasElem_LastName

	XHasElem_ForeName

	XHasElem_Initials

	XHasElem_Suffix

	XHasElems_Identifier

	XHasElems_AffiliationInfo

	XHasAtts_AttlistInvestigator
}

//	If the WalkHandlers.TInvestigator function is not nil (ie. was set by outside code), calls it with this TInvestigator instance as the single argument. Then calls the Walk() method on 6/7 embed(s) and 0/0 field(s) belonging to this TInvestigator instance.
func (me *TInvestigator) Walk() (err error) {
	if fn := WalkHandlers.TInvestigator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_LastName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_ForeName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Initials.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Suffix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_Identifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_AffiliationInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Investigator struct {
	Investigators []*TInvestigator `xml:"Investigator"`
}

//	If the WalkHandlers.XHasElems_Investigator function is not nil (ie. was set by outside code), calls it with this XHasElems_Investigator instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Investigator instance.
func (me *XHasElems_Investigator) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Investigator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Investigators {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TInvestigatorList struct {
	XHasElems_Investigator
}

//	If the WalkHandlers.TInvestigatorList function is not nil (ie. was set by outside code), calls it with this TInvestigatorList instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TInvestigatorList instance.
func (me *TInvestigatorList) Walk() (err error) {
	if fn := WalkHandlers.TInvestigatorList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_Investigator.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_InvestigatorList struct {
	InvestigatorList *TInvestigatorList `xml:"InvestigatorList"`
}

//	If the WalkHandlers.XHasElem_InvestigatorList function is not nil (ie. was set by outside code), calls it with this XHasElem_InvestigatorList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_InvestigatorList instance.
func (me *XHasElem_InvestigatorList) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_InvestigatorList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InvestigatorList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_SpaceFlightMission struct {
	SpaceFlightMissions []xsdt.String `xml:"SpaceFlightMission"`
}

//	If the WalkHandlers.XHasElems_SpaceFlightMission function is not nil (ie. was set by outside code), calls it with this XHasElems_SpaceFlightMission instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_SpaceFlightMission instance.
func (me *XHasElems_SpaceFlightMission) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_SpaceFlightMission; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGeneralNote struct {
	XHasAtts_AttlistGeneralNote

	XHasCdata
}

//	If the WalkHandlers.TGeneralNote function is not nil (ie. was set by outside code), calls it with this TGeneralNote instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TGeneralNote instance.
func (me *TGeneralNote) Walk() (err error) {
	if fn := WalkHandlers.TGeneralNote; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_GeneralNote struct {
	GeneralNotes []*TGeneralNote `xml:"GeneralNote"`
}

//	If the WalkHandlers.XHasElems_GeneralNote function is not nil (ie. was set by outside code), calls it with this XHasElems_GeneralNote instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_GeneralNote instance.
func (me *XHasElems_GeneralNote) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_GeneralNote; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GeneralNotes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_RegistryNumber struct {
	RegistryNumber xsdt.String `xml:"RegistryNumber"`
}

//	If the WalkHandlers.XHasElem_RegistryNumber function is not nil (ie. was set by outside code), calls it with this XHasElem_RegistryNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_RegistryNumber instance.
func (me *XHasElem_RegistryNumber) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_RegistryNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TNameOfSubstance struct {
	XHasCdata

	XHasAtts_AttlistNameOfSubstance
}

//	If the WalkHandlers.TNameOfSubstance function is not nil (ie. was set by outside code), calls it with this TNameOfSubstance instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TNameOfSubstance instance.
func (me *TNameOfSubstance) Walk() (err error) {
	if fn := WalkHandlers.TNameOfSubstance; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_NameOfSubstance struct {
	NameOfSubstance *TNameOfSubstance `xml:"NameOfSubstance"`
}

//	If the WalkHandlers.XHasElem_NameOfSubstance function is not nil (ie. was set by outside code), calls it with this XHasElem_NameOfSubstance instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_NameOfSubstance instance.
func (me *XHasElem_NameOfSubstance) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_NameOfSubstance; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NameOfSubstance.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TChemical struct {
	XHasElem_RegistryNumber

	XHasElem_NameOfSubstance
}

//	If the WalkHandlers.TChemical function is not nil (ie. was set by outside code), calls it with this TChemical instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TChemical instance.
func (me *TChemical) Walk() (err error) {
	if fn := WalkHandlers.TChemical; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_RegistryNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_NameOfSubstance.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Chemical struct {
	Chemicals []*TChemical `xml:"Chemical"`
}

//	If the WalkHandlers.XHasElems_Chemical function is not nil (ie. was set by outside code), calls it with this XHasElems_Chemical instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Chemical instance.
func (me *XHasElems_Chemical) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Chemical; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Chemicals {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TChemicalList struct {
	XHasElems_Chemical
}

//	If the WalkHandlers.TChemicalList function is not nil (ie. was set by outside code), calls it with this TChemicalList instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TChemicalList instance.
func (me *TChemicalList) Walk() (err error) {
	if fn := WalkHandlers.TChemicalList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_Chemical.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_ChemicalList struct {
	ChemicalList *TChemicalList `xml:"ChemicalList"`
}

//	If the WalkHandlers.XHasElem_ChemicalList function is not nil (ie. was set by outside code), calls it with this XHasElem_ChemicalList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_ChemicalList instance.
func (me *XHasElem_ChemicalList) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_ChemicalList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ChemicalList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_CitationSubset struct {
	CitationSubsets []xsdt.String `xml:"CitationSubset"`
}

//	If the WalkHandlers.XHasElems_CitationSubset function is not nil (ie. was set by outside code), calls it with this XHasElems_CitationSubset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_CitationSubset instance.
func (me *XHasElems_CitationSubset) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_CitationSubset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_RefSource struct {
	RefSource xsdt.String `xml:"RefSource"`
}

//	If the WalkHandlers.XHasElem_RefSource function is not nil (ie. was set by outside code), calls it with this XHasElem_RefSource instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_RefSource instance.
func (me *XHasElem_RefSource) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_RefSource; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Note struct {
	Note xsdt.String `xml:"Note"`
}

//	If the WalkHandlers.XHasElem_Note function is not nil (ie. was set by outside code), calls it with this XHasElem_Note instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_Note instance.
func (me *XHasElem_Note) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Note; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TCommentsCorrections struct {
	XHasElem_RefSource

	XHasElem_Pmid

	XHasElem_Note

	XHasAtts_AttlistCommentsCorrections
}

//	If the WalkHandlers.TCommentsCorrections function is not nil (ie. was set by outside code), calls it with this TCommentsCorrections instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TCommentsCorrections instance.
func (me *TCommentsCorrections) Walk() (err error) {
	if fn := WalkHandlers.TCommentsCorrections; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_RefSource.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Pmid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_CommentsCorrections struct {
	CommentsCorrectionses []*TCommentsCorrections `xml:"CommentsCorrections"`
}

//	If the WalkHandlers.XHasElems_CommentsCorrections function is not nil (ie. was set by outside code), calls it with this XHasElems_CommentsCorrections instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_CommentsCorrections instance.
func (me *XHasElems_CommentsCorrections) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_CommentsCorrections; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CommentsCorrectionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TCommentsCorrectionsList struct {
	XHasElems_CommentsCorrections
}

//	If the WalkHandlers.TCommentsCorrectionsList function is not nil (ie. was set by outside code), calls it with this TCommentsCorrectionsList instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TCommentsCorrectionsList instance.
func (me *TCommentsCorrectionsList) Walk() (err error) {
	if fn := WalkHandlers.TCommentsCorrectionsList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_CommentsCorrections.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_CommentsCorrectionsList struct {
	CommentsCorrectionsList *TCommentsCorrectionsList `xml:"CommentsCorrectionsList"`
}

//	If the WalkHandlers.XHasElem_CommentsCorrectionsList function is not nil (ie. was set by outside code), calls it with this XHasElem_CommentsCorrectionsList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_CommentsCorrectionsList instance.
func (me *XHasElem_CommentsCorrectionsList) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_CommentsCorrectionsList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CommentsCorrectionsList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDescriptorName struct {
	XHasAtts_AttlistDescriptorName

	XHasCdata
}

//	If the WalkHandlers.TDescriptorName function is not nil (ie. was set by outside code), calls it with this TDescriptorName instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TDescriptorName instance.
func (me *TDescriptorName) Walk() (err error) {
	if fn := WalkHandlers.TDescriptorName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_DescriptorName struct {
	DescriptorName *TDescriptorName `xml:"DescriptorName"`
}

//	If the WalkHandlers.XHasElem_DescriptorName function is not nil (ie. was set by outside code), calls it with this XHasElem_DescriptorName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_DescriptorName instance.
func (me *XHasElem_DescriptorName) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_DescriptorName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DescriptorName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TQualifierName struct {
	XHasCdata

	XHasAtts_AttlistQualifierName
}

//	If the WalkHandlers.TQualifierName function is not nil (ie. was set by outside code), calls it with this TQualifierName instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TQualifierName instance.
func (me *TQualifierName) Walk() (err error) {
	if fn := WalkHandlers.TQualifierName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_QualifierName struct {
	QualifierNames []*TQualifierName `xml:"QualifierName"`
}

//	If the WalkHandlers.XHasElems_QualifierName function is not nil (ie. was set by outside code), calls it with this XHasElems_QualifierName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_QualifierName instance.
func (me *XHasElems_QualifierName) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_QualifierName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.QualifierNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TMeshHeading struct {
	XHasElems_QualifierName

	XHasElem_DescriptorName
}

//	If the WalkHandlers.TMeshHeading function is not nil (ie. was set by outside code), calls it with this TMeshHeading instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TMeshHeading instance.
func (me *TMeshHeading) Walk() (err error) {
	if fn := WalkHandlers.TMeshHeading; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_DescriptorName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_QualifierName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_MeshHeading struct {
	MeshHeadings []*TMeshHeading `xml:"MeshHeading"`
}

//	If the WalkHandlers.XHasElems_MeshHeading function is not nil (ie. was set by outside code), calls it with this XHasElems_MeshHeading instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_MeshHeading instance.
func (me *XHasElems_MeshHeading) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_MeshHeading; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MeshHeadings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TMeshHeadingList struct {
	XHasElems_MeshHeading
}

//	If the WalkHandlers.TMeshHeadingList function is not nil (ie. was set by outside code), calls it with this TMeshHeadingList instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TMeshHeadingList instance.
func (me *TMeshHeadingList) Walk() (err error) {
	if fn := WalkHandlers.TMeshHeadingList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_MeshHeading.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_MeshHeadingList struct {
	MeshHeadingList *TMeshHeadingList `xml:"MeshHeadingList"`
}

//	If the WalkHandlers.XHasElem_MeshHeadingList function is not nil (ie. was set by outside code), calls it with this XHasElem_MeshHeadingList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_MeshHeadingList instance.
func (me *XHasElem_MeshHeadingList) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_MeshHeadingList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MeshHeadingList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TOtherID struct {
	XHasAtts_AttlistOtherID

	XHasCdata
}

//	If the WalkHandlers.TOtherID function is not nil (ie. was set by outside code), calls it with this TOtherID instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TOtherID instance.
func (me *TOtherID) Walk() (err error) {
	if fn := WalkHandlers.TOtherID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_OtherID struct {
	OtherIDs []*TOtherID `xml:"OtherID"`
}

//	If the WalkHandlers.XHasElems_OtherID function is not nil (ie. was set by outside code), calls it with this XHasElems_OtherID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_OtherID instance.
func (me *XHasElems_OtherID) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_OtherID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OtherIDs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Year struct {
	Year xsdt.String `xml:"Year"`
}

//	If the WalkHandlers.XHasElem_Year function is not nil (ie. was set by outside code), calls it with this XHasElem_Year instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_Year instance.
func (me *XHasElem_Year) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Year; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Month struct {
	Month xsdt.String `xml:"Month"`
}

//	If the WalkHandlers.XHasElem_Month function is not nil (ie. was set by outside code), calls it with this XHasElem_Month instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_Month instance.
func (me *XHasElem_Month) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Month; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Day struct {
	Day xsdt.String `xml:"Day"`
}

//	If the WalkHandlers.XHasElem_Day function is not nil (ie. was set by outside code), calls it with this XHasElem_Day instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_Day instance.
func (me *XHasElem_Day) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Day; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDateCreated struct {
	XHasElem_Year

	XHasElem_Month

	XHasElem_Day
}

//	If the WalkHandlers.TDateCreated function is not nil (ie. was set by outside code), calls it with this TDateCreated instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TDateCreated instance.
func (me *TDateCreated) Walk() (err error) {
	if fn := WalkHandlers.TDateCreated; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_Day.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Year.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Month.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_DateCreated struct {
	DateCreated *TDateCreated `xml:"DateCreated"`
}

//	If the WalkHandlers.XHasElem_DateCreated function is not nil (ie. was set by outside code), calls it with this XHasElem_DateCreated instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_DateCreated instance.
func (me *XHasElem_DateCreated) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_DateCreated; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DateCreated.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_CopyrightInformation struct {
	CopyrightInformation xsdt.String `xml:"CopyrightInformation"`
}

//	If the WalkHandlers.XHasElem_CopyrightInformation function is not nil (ie. was set by outside code), calls it with this XHasElem_CopyrightInformation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_CopyrightInformation instance.
func (me *XHasElem_CopyrightInformation) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_CopyrightInformation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAbstractText struct {
	Ttext

	XHasAtts_AttlistAbstractText
}

//	If the WalkHandlers.TAbstractText function is not nil (ie. was set by outside code), calls it with this TAbstractText instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TAbstractText instance.
func (me *TAbstractText) Walk() (err error) {
	if fn := WalkHandlers.TAbstractText; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ttext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_AbstractText struct {
	AbstractTexts []*TAbstractText `xml:"AbstractText"`
}

//	If the WalkHandlers.XHasElems_AbstractText function is not nil (ie. was set by outside code), calls it with this XHasElems_AbstractText instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_AbstractText instance.
func (me *XHasElems_AbstractText) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_AbstractText; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AbstractTexts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAbstract struct {
	XHasElems_AbstractText

	XHasElem_CopyrightInformation
}

//	If the WalkHandlers.TAbstract function is not nil (ie. was set by outside code), calls it with this TAbstract instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TAbstract instance.
func (me *TAbstract) Walk() (err error) {
	if fn := WalkHandlers.TAbstract; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_AbstractText.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_CopyrightInformation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Abstract struct {
	Abstract *TAbstract `xml:"Abstract"`
}

//	If the WalkHandlers.XHasElem_Abstract function is not nil (ie. was set by outside code), calls it with this XHasElem_Abstract instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_Abstract instance.
func (me *XHasElem_Abstract) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Abstract; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Abstract.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_DataBankName struct {
	DataBankName xsdt.String `xml:"DataBankName"`
}

//	If the WalkHandlers.XHasElem_DataBankName function is not nil (ie. was set by outside code), calls it with this XHasElem_DataBankName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_DataBankName instance.
func (me *XHasElem_DataBankName) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_DataBankName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_AccessionNumber struct {
	AccessionNumbers []xsdt.String `xml:"AccessionNumber"`
}

//	If the WalkHandlers.XHasElems_AccessionNumber function is not nil (ie. was set by outside code), calls it with this XHasElems_AccessionNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_AccessionNumber instance.
func (me *XHasElems_AccessionNumber) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_AccessionNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAccessionNumberList struct {
	XHasElems_AccessionNumber
}

//	If the WalkHandlers.TAccessionNumberList function is not nil (ie. was set by outside code), calls it with this TAccessionNumberList instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TAccessionNumberList instance.
func (me *TAccessionNumberList) Walk() (err error) {
	if fn := WalkHandlers.TAccessionNumberList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_AccessionNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_AccessionNumberList struct {
	AccessionNumberList *TAccessionNumberList `xml:"AccessionNumberList"`
}

//	If the WalkHandlers.XHasElem_AccessionNumberList function is not nil (ie. was set by outside code), calls it with this XHasElem_AccessionNumberList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_AccessionNumberList instance.
func (me *XHasElem_AccessionNumberList) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_AccessionNumberList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AccessionNumberList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDataBank struct {
	XHasElem_DataBankName

	XHasElem_AccessionNumberList
}

//	If the WalkHandlers.TDataBank function is not nil (ie. was set by outside code), calls it with this TDataBank instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TDataBank instance.
func (me *TDataBank) Walk() (err error) {
	if fn := WalkHandlers.TDataBank; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_DataBankName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_AccessionNumberList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_DataBank struct {
	DataBanks []*TDataBank `xml:"DataBank"`
}

//	If the WalkHandlers.XHasElems_DataBank function is not nil (ie. was set by outside code), calls it with this XHasElems_DataBank instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_DataBank instance.
func (me *XHasElems_DataBank) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_DataBank; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DataBanks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDataBankList struct {
	XHasElems_DataBank

	XHasAtts_AttlistDataBankList
}

//	If the WalkHandlers.TDataBankList function is not nil (ie. was set by outside code), calls it with this TDataBankList instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TDataBankList instance.
func (me *TDataBankList) Walk() (err error) {
	if fn := WalkHandlers.TDataBankList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_DataBank.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_DataBankList struct {
	DataBankList *TDataBankList `xml:"DataBankList"`
}

//	If the WalkHandlers.XHasElem_DataBankList function is not nil (ie. was set by outside code), calls it with this XHasElem_DataBankList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_DataBankList instance.
func (me *XHasElem_DataBankList) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_DataBankList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DataBankList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPublicationType struct {
	XHasCdata

	XHasAtts_AttlistNameOfSubstance
}

//	If the WalkHandlers.TPublicationType function is not nil (ie. was set by outside code), calls it with this TPublicationType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TPublicationType instance.
func (me *TPublicationType) Walk() (err error) {
	if fn := WalkHandlers.TPublicationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_PublicationType struct {
	PublicationTypes []*TPublicationType `xml:"PublicationType"`
}

//	If the WalkHandlers.XHasElems_PublicationType function is not nil (ie. was set by outside code), calls it with this XHasElems_PublicationType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_PublicationType instance.
func (me *XHasElems_PublicationType) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_PublicationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PublicationTypes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPublicationTypeList struct {
	XHasElems_PublicationType
}

//	If the WalkHandlers.TPublicationTypeList function is not nil (ie. was set by outside code), calls it with this TPublicationTypeList instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TPublicationTypeList instance.
func (me *TPublicationTypeList) Walk() (err error) {
	if fn := WalkHandlers.TPublicationTypeList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_PublicationType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_PublicationTypeList struct {
	PublicationTypeList *TPublicationTypeList `xml:"PublicationTypeList"`
}

//	If the WalkHandlers.XHasElem_PublicationTypeList function is not nil (ie. was set by outside code), calls it with this XHasElem_PublicationTypeList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_PublicationTypeList instance.
func (me *XHasElem_PublicationTypeList) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_PublicationTypeList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PublicationTypeList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_VernacularTitle struct {
	VernacularTitle *Ttext `xml:"VernacularTitle"`
}

//	If the WalkHandlers.XHasElem_VernacularTitle function is not nil (ie. was set by outside code), calls it with this XHasElem_VernacularTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_VernacularTitle instance.
func (me *XHasElem_VernacularTitle) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_VernacularTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.VernacularTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TArticleDate struct {
	XHasAtts_AttlistArticleDate

	XHasElem_Year

	XHasElem_Month

	XHasElem_Day
}

//	If the WalkHandlers.TArticleDate function is not nil (ie. was set by outside code), calls it with this TArticleDate instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TArticleDate instance.
func (me *TArticleDate) Walk() (err error) {
	if fn := WalkHandlers.TArticleDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_Year.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Month.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Day.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_ArticleDate struct {
	ArticleDates []*TArticleDate `xml:"ArticleDate"`
}

//	If the WalkHandlers.XHasElems_ArticleDate function is not nil (ie. was set by outside code), calls it with this XHasElems_ArticleDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_ArticleDate instance.
func (me *XHasElems_ArticleDate) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_ArticleDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ArticleDates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TELocationID struct {
	XHasCdata

	XHasAtts_AttlistELocationID
}

//	If the WalkHandlers.TELocationID function is not nil (ie. was set by outside code), calls it with this TELocationID instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TELocationID instance.
func (me *TELocationID) Walk() (err error) {
	if fn := WalkHandlers.TELocationID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_ELocationID struct {
	ELocationIDs []*TELocationID `xml:"ELocationID"`
}

//	If the WalkHandlers.XHasElems_ELocationID function is not nil (ie. was set by outside code), calls it with this XHasElems_ELocationID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_ELocationID instance.
func (me *XHasElems_ELocationID) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_ELocationID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ELocationIDs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_ISOAbbreviation struct {
	ISOAbbreviation xsdt.String `xml:"ISOAbbreviation"`
}

//	If the WalkHandlers.XHasElem_ISOAbbreviation function is not nil (ie. was set by outside code), calls it with this XHasElem_ISOAbbreviation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_ISOAbbreviation instance.
func (me *XHasElem_ISOAbbreviation) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_ISOAbbreviation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TIssn struct {
	XHasCdata

	XHasAtts_AttlistIssn
}

//	If the WalkHandlers.TIssn function is not nil (ie. was set by outside code), calls it with this TIssn instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TIssn instance.
func (me *TIssn) Walk() (err error) {
	if fn := WalkHandlers.TIssn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Issn struct {
	Issn *TIssn `xml:"ISSN"`
}

//	If the WalkHandlers.XHasElem_Issn function is not nil (ie. was set by outside code), calls it with this XHasElem_Issn instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_Issn instance.
func (me *XHasElem_Issn) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Issn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Issn.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Volume struct {
	Volume xsdt.String `xml:"Volume"`
}

//	If the WalkHandlers.XHasElem_Volume function is not nil (ie. was set by outside code), calls it with this XHasElem_Volume instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_Volume instance.
func (me *XHasElem_Volume) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Volume; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Issue struct {
	Issue xsdt.String `xml:"Issue"`
}

//	If the WalkHandlers.XHasElem_Issue function is not nil (ie. was set by outside code), calls it with this XHasElem_Issue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_Issue instance.
func (me *XHasElem_Issue) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Issue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_MedlineDate struct {
	MedlineDate xsdt.String `xml:"MedlineDate"`
}

//	If the WalkHandlers.XHasElem_MedlineDate function is not nil (ie. was set by outside code), calls it with this XHasElem_MedlineDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_MedlineDate instance.
func (me *XHasElem_MedlineDate) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_MedlineDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Season struct {
	Season xsdt.String `xml:"Season"`
}

//	If the WalkHandlers.XHasElem_Season function is not nil (ie. was set by outside code), calls it with this XHasElem_Season instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_Season instance.
func (me *XHasElem_Season) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Season; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPubDate struct {
	XHasElem_Season

	XHasElem_Year

	XHasElem_Month

	XHasElem_Day

	XHasElem_MedlineDate
}

//	If the WalkHandlers.TPubDate function is not nil (ie. was set by outside code), calls it with this TPubDate instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TPubDate instance.
func (me *TPubDate) Walk() (err error) {
	if fn := WalkHandlers.TPubDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_MedlineDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Season.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Year.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Month.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Day.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_PubDate struct {
	PubDate *TPubDate `xml:"PubDate"`
}

//	If the WalkHandlers.XHasElem_PubDate function is not nil (ie. was set by outside code), calls it with this XHasElem_PubDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_PubDate instance.
func (me *XHasElem_PubDate) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_PubDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PubDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TJournalIssue struct {
	XHasElem_Volume

	XHasElem_Issue

	XHasElem_PubDate

	XHasAtts_AttlistJournalIssue
}

//	If the WalkHandlers.TJournalIssue function is not nil (ie. was set by outside code), calls it with this TJournalIssue instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TJournalIssue instance.
func (me *TJournalIssue) Walk() (err error) {
	if fn := WalkHandlers.TJournalIssue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_Volume.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Issue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_PubDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_JournalIssue struct {
	JournalIssue *TJournalIssue `xml:"JournalIssue"`
}

//	If the WalkHandlers.XHasElem_JournalIssue function is not nil (ie. was set by outside code), calls it with this XHasElem_JournalIssue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_JournalIssue instance.
func (me *XHasElem_JournalIssue) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_JournalIssue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.JournalIssue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Title struct {
	Title xsdt.String `xml:"Title"`
}

//	If the WalkHandlers.XHasElem_Title function is not nil (ie. was set by outside code), calls it with this XHasElem_Title instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_Title instance.
func (me *XHasElem_Title) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Title; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TJournal struct {
	XHasElem_Issn

	XHasElem_JournalIssue

	XHasElem_Title

	XHasElem_ISOAbbreviation
}

//	If the WalkHandlers.TJournal function is not nil (ie. was set by outside code), calls it with this TJournal instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TJournal instance.
func (me *TJournal) Walk() (err error) {
	if fn := WalkHandlers.TJournal; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_Issn.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_JournalIssue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_ISOAbbreviation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Journal struct {
	Journal *TJournal `xml:"Journal"`
}

//	If the WalkHandlers.XHasElem_Journal function is not nil (ie. was set by outside code), calls it with this XHasElem_Journal instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_Journal instance.
func (me *XHasElem_Journal) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Journal; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Journal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TArticleTitle struct {
	Ttext

	XHasAtts_AttlistBookTitle
}

//	If the WalkHandlers.TArticleTitle function is not nil (ie. was set by outside code), calls it with this TArticleTitle instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TArticleTitle instance.
func (me *TArticleTitle) Walk() (err error) {
	if fn := WalkHandlers.TArticleTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ttext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_ArticleTitle struct {
	ArticleTitle *TArticleTitle `xml:"ArticleTitle"`
}

//	If the WalkHandlers.XHasElem_ArticleTitle function is not nil (ie. was set by outside code), calls it with this XHasElem_ArticleTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_ArticleTitle instance.
func (me *XHasElem_ArticleTitle) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_ArticleTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ArticleTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_CollectiveName struct {
	CollectiveName *Ttext `xml:"CollectiveName"`
}

//	If the WalkHandlers.XHasElem_CollectiveName function is not nil (ie. was set by outside code), calls it with this XHasElem_CollectiveName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_CollectiveName instance.
func (me *XHasElem_CollectiveName) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_CollectiveName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CollectiveName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAuthor struct {
	XHasElems_Identifier

	XHasElems_AffiliationInfo

	XHasElem_LastName

	XHasElem_ForeName

	XHasElem_Initials

	XHasElem_Suffix

	XHasAtts_AttlistAuthor

	XHasElem_CollectiveName
}

//	If the WalkHandlers.TAuthor function is not nil (ie. was set by outside code), calls it with this TAuthor instance as the single argument. Then calls the Walk() method on 7/8 embed(s) and 0/0 field(s) belonging to this TAuthor instance.
func (me *TAuthor) Walk() (err error) {
	if fn := WalkHandlers.TAuthor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_ForeName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Initials.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Suffix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_CollectiveName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_Identifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_AffiliationInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_LastName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Author struct {
	Authors []*TAuthor `xml:"Author"`
}

//	If the WalkHandlers.XHasElems_Author function is not nil (ie. was set by outside code), calls it with this XHasElems_Author instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Author instance.
func (me *XHasElems_Author) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Author; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Authors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAuthorList struct {
	XHasElems_Author

	XHasAtts_AttlistAuthorList
}

//	If the WalkHandlers.TAuthorList function is not nil (ie. was set by outside code), calls it with this TAuthorList instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TAuthorList instance.
func (me *TAuthorList) Walk() (err error) {
	if fn := WalkHandlers.TAuthorList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_AuthorList struct {
	AuthorList *TAuthorList `xml:"AuthorList"`
}

//	If the WalkHandlers.XHasElem_AuthorList function is not nil (ie. was set by outside code), calls it with this XHasElem_AuthorList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_AuthorList instance.
func (me *XHasElem_AuthorList) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_AuthorList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthorList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Language struct {
	Languages []xsdt.String `xml:"Language"`
}

//	If the WalkHandlers.XHasElems_Language function is not nil (ie. was set by outside code), calls it with this XHasElems_Language instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Language instance.
func (me *XHasElems_Language) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Language; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_GrantID struct {
	GrantID xsdt.String `xml:"GrantID"`
}

//	If the WalkHandlers.XHasElem_GrantID function is not nil (ie. was set by outside code), calls it with this XHasElem_GrantID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_GrantID instance.
func (me *XHasElem_GrantID) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_GrantID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Acronym struct {
	Acronym xsdt.String `xml:"Acronym"`
}

//	If the WalkHandlers.XHasElem_Acronym function is not nil (ie. was set by outside code), calls it with this XHasElem_Acronym instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_Acronym instance.
func (me *XHasElem_Acronym) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Acronym; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Agency struct {
	Agency xsdt.String `xml:"Agency"`
}

//	If the WalkHandlers.XHasElem_Agency function is not nil (ie. was set by outside code), calls it with this XHasElem_Agency instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_Agency instance.
func (me *XHasElem_Agency) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Agency; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Country struct {
	Country xsdt.String `xml:"Country"`
}

//	If the WalkHandlers.XHasElem_Country function is not nil (ie. was set by outside code), calls it with this XHasElem_Country instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_Country instance.
func (me *XHasElem_Country) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Country; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGrant struct {
	XHasElem_GrantID

	XHasElem_Acronym

	XHasElem_Agency

	XHasElem_Country
}

//	If the WalkHandlers.TGrant function is not nil (ie. was set by outside code), calls it with this TGrant instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TGrant instance.
func (me *TGrant) Walk() (err error) {
	if fn := WalkHandlers.TGrant; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_GrantID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Acronym.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Agency.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Country.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Grant struct {
	Grants []*TGrant `xml:"Grant"`
}

//	If the WalkHandlers.XHasElems_Grant function is not nil (ie. was set by outside code), calls it with this XHasElems_Grant instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Grant instance.
func (me *XHasElems_Grant) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Grant; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Grants {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGrantList struct {
	XHasElems_Grant

	XHasAtts_AttlistGrantList
}

//	If the WalkHandlers.TGrantList function is not nil (ie. was set by outside code), calls it with this TGrantList instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TGrantList instance.
func (me *TGrantList) Walk() (err error) {
	if fn := WalkHandlers.TGrantList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_Grant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_GrantList struct {
	GrantList *TGrantList `xml:"GrantList"`
}

//	If the WalkHandlers.XHasElem_GrantList function is not nil (ie. was set by outside code), calls it with this XHasElem_GrantList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_GrantList instance.
func (me *XHasElem_GrantList) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_GrantList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GrantList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_EndPage struct {
	EndPage xsdt.String `xml:"EndPage"`
}

//	If the WalkHandlers.XHasElem_EndPage function is not nil (ie. was set by outside code), calls it with this XHasElem_EndPage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_EndPage instance.
func (me *XHasElem_EndPage) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_EndPage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_MedlinePgn struct {
	MedlinePgn xsdt.String `xml:"MedlinePgn"`
}

//	If the WalkHandlers.XHasElem_MedlinePgn function is not nil (ie. was set by outside code), calls it with this XHasElem_MedlinePgn instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_MedlinePgn instance.
func (me *XHasElem_MedlinePgn) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_MedlinePgn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_StartPage struct {
	StartPage xsdt.String `xml:"StartPage"`
}

//	If the WalkHandlers.XHasElem_StartPage function is not nil (ie. was set by outside code), calls it with this XHasElem_StartPage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_StartPage instance.
func (me *XHasElem_StartPage) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_StartPage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPagination struct {
	XHasElem_MedlinePgn

	XHasElem_StartPage

	XHasElem_EndPage
}

//	If the WalkHandlers.TPagination function is not nil (ie. was set by outside code), calls it with this TPagination instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TPagination instance.
func (me *TPagination) Walk() (err error) {
	if fn := WalkHandlers.TPagination; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_MedlinePgn.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_StartPage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_EndPage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Pagination struct {
	Pagination *TPagination `xml:"Pagination"`
}

//	If the WalkHandlers.XHasElem_Pagination function is not nil (ie. was set by outside code), calls it with this XHasElem_Pagination instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_Pagination instance.
func (me *XHasElem_Pagination) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Pagination; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Pagination.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TArticle struct {
	XHasElem_AuthorList

	XHasElems_Language

	XHasElem_GrantList

	XHasElem_Pagination

	XHasElems_ELocationID

	XHasElem_Journal

	XHasElem_ArticleTitle

	XHasElem_VernacularTitle

	XHasElems_ArticleDate

	XHasAtts_AttlistArticle

	XHasElem_Abstract

	XHasElem_DataBankList

	XHasElem_PublicationTypeList
}

//	If the WalkHandlers.TArticle function is not nil (ie. was set by outside code), calls it with this TArticle instance as the single argument. Then calls the Walk() method on 12/13 embed(s) and 0/0 field(s) belonging to this TArticle instance.
func (me *TArticle) Walk() (err error) {
	if fn := WalkHandlers.TArticle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_Abstract.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_DataBankList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_PublicationTypeList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_VernacularTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_ArticleDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Pagination.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_ELocationID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Journal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_ArticleTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_AuthorList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_Language.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_GrantList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Article struct {
	Article *TArticle `xml:"Article"`
}

//	If the WalkHandlers.XHasElem_Article function is not nil (ie. was set by outside code), calls it with this XHasElem_Article instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_Article instance.
func (me *XHasElem_Article) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Article; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Article.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSupplMeshName struct {
	XHasCdata

	XHasAtts_AttlistSupplMeshName
}

//	If the WalkHandlers.TSupplMeshName function is not nil (ie. was set by outside code), calls it with this TSupplMeshName instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TSupplMeshName instance.
func (me *TSupplMeshName) Walk() (err error) {
	if fn := WalkHandlers.TSupplMeshName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_SupplMeshName struct {
	SupplMeshNames []*TSupplMeshName `xml:"SupplMeshName"`
}

//	If the WalkHandlers.XHasElems_SupplMeshName function is not nil (ie. was set by outside code), calls it with this XHasElems_SupplMeshName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_SupplMeshName instance.
func (me *XHasElems_SupplMeshName) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_SupplMeshName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SupplMeshNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSupplMeshList struct {
	XHasElems_SupplMeshName
}

//	If the WalkHandlers.TSupplMeshList function is not nil (ie. was set by outside code), calls it with this TSupplMeshList instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TSupplMeshList instance.
func (me *TSupplMeshList) Walk() (err error) {
	if fn := WalkHandlers.TSupplMeshList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_SupplMeshName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_SupplMeshList struct {
	SupplMeshList *TSupplMeshList `xml:"SupplMeshList"`
}

//	If the WalkHandlers.XHasElem_SupplMeshList function is not nil (ie. was set by outside code), calls it with this XHasElem_SupplMeshList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_SupplMeshList instance.
func (me *XHasElem_SupplMeshList) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_SupplMeshList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SupplMeshList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPersonalNameSubject struct {
	XHasElem_ForeName

	XHasElem_Initials

	XHasElem_Suffix

	XHasElem_LastName
}

//	If the WalkHandlers.TPersonalNameSubject function is not nil (ie. was set by outside code), calls it with this TPersonalNameSubject instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TPersonalNameSubject instance.
func (me *TPersonalNameSubject) Walk() (err error) {
	if fn := WalkHandlers.TPersonalNameSubject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_LastName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_ForeName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Initials.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Suffix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_PersonalNameSubject struct {
	PersonalNameSubjects []*TPersonalNameSubject `xml:"PersonalNameSubject"`
}

//	If the WalkHandlers.XHasElems_PersonalNameSubject function is not nil (ie. was set by outside code), calls it with this XHasElems_PersonalNameSubject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_PersonalNameSubject instance.
func (me *XHasElems_PersonalNameSubject) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_PersonalNameSubject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PersonalNameSubjects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPersonalNameSubjectList struct {
	XHasElems_PersonalNameSubject
}

//	If the WalkHandlers.TPersonalNameSubjectList function is not nil (ie. was set by outside code), calls it with this TPersonalNameSubjectList instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TPersonalNameSubjectList instance.
func (me *TPersonalNameSubjectList) Walk() (err error) {
	if fn := WalkHandlers.TPersonalNameSubjectList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_PersonalNameSubject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_PersonalNameSubjectList struct {
	PersonalNameSubjectList *TPersonalNameSubjectList `xml:"PersonalNameSubjectList"`
}

//	If the WalkHandlers.XHasElem_PersonalNameSubjectList function is not nil (ie. was set by outside code), calls it with this XHasElem_PersonalNameSubjectList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_PersonalNameSubjectList instance.
func (me *XHasElem_PersonalNameSubjectList) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_PersonalNameSubjectList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PersonalNameSubjectList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TOtherAbstract struct {
	XHasElems_AbstractText

	XHasElem_CopyrightInformation

	XHasAtts_AttlistOtherAbstract
}

//	If the WalkHandlers.TOtherAbstract function is not nil (ie. was set by outside code), calls it with this TOtherAbstract instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TOtherAbstract instance.
func (me *TOtherAbstract) Walk() (err error) {
	if fn := WalkHandlers.TOtherAbstract; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_CopyrightInformation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_AbstractText.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_OtherAbstract struct {
	OtherAbstracts []*TOtherAbstract `xml:"OtherAbstract"`
}

//	If the WalkHandlers.XHasElems_OtherAbstract function is not nil (ie. was set by outside code), calls it with this XHasElems_OtherAbstract instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_OtherAbstract instance.
func (me *XHasElems_OtherAbstract) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_OtherAbstract; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OtherAbstracts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDateCompleted struct {
	XHasElem_Day

	XHasElem_Year

	XHasElem_Month
}

//	If the WalkHandlers.TDateCompleted function is not nil (ie. was set by outside code), calls it with this TDateCompleted instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TDateCompleted instance.
func (me *TDateCompleted) Walk() (err error) {
	if fn := WalkHandlers.TDateCompleted; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_Day.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Year.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Month.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_DateCompleted struct {
	DateCompleted *TDateCompleted `xml:"DateCompleted"`
}

//	If the WalkHandlers.XHasElem_DateCompleted function is not nil (ie. was set by outside code), calls it with this XHasElem_DateCompleted instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_DateCompleted instance.
func (me *XHasElem_DateCompleted) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_DateCompleted; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DateCompleted.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDateRevised struct {
	XHasElem_Year

	XHasElem_Month

	XHasElem_Day
}

//	If the WalkHandlers.TDateRevised function is not nil (ie. was set by outside code), calls it with this TDateRevised instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TDateRevised instance.
func (me *TDateRevised) Walk() (err error) {
	if fn := WalkHandlers.TDateRevised; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_Year.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Month.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Day.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_DateRevised struct {
	DateRevised *TDateRevised `xml:"DateRevised"`
}

//	If the WalkHandlers.XHasElem_DateRevised function is not nil (ie. was set by outside code), calls it with this XHasElem_DateRevised instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_DateRevised instance.
func (me *XHasElem_DateRevised) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_DateRevised; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DateRevised.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_MedlineTA struct {
	MedlineTA xsdt.String `xml:"MedlineTA"`
}

//	If the WalkHandlers.XHasElem_MedlineTA function is not nil (ie. was set by outside code), calls it with this XHasElem_MedlineTA instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_MedlineTA instance.
func (me *XHasElem_MedlineTA) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_MedlineTA; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_NlmUniqueID struct {
	NlmUniqueID xsdt.String `xml:"NlmUniqueID"`
}

//	If the WalkHandlers.XHasElem_NlmUniqueID function is not nil (ie. was set by outside code), calls it with this XHasElem_NlmUniqueID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_NlmUniqueID instance.
func (me *XHasElem_NlmUniqueID) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_NlmUniqueID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_ISSNLinking struct {
	ISSNLinking xsdt.String `xml:"ISSNLinking"`
}

//	If the WalkHandlers.XHasElem_ISSNLinking function is not nil (ie. was set by outside code), calls it with this XHasElem_ISSNLinking instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_ISSNLinking instance.
func (me *XHasElem_ISSNLinking) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_ISSNLinking; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TMedlineJournalInfo struct {
	XHasElem_MedlineTA

	XHasElem_NlmUniqueID

	XHasElem_ISSNLinking

	XHasElem_Country
}

//	If the WalkHandlers.TMedlineJournalInfo function is not nil (ie. was set by outside code), calls it with this TMedlineJournalInfo instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TMedlineJournalInfo instance.
func (me *TMedlineJournalInfo) Walk() (err error) {
	if fn := WalkHandlers.TMedlineJournalInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_Country.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_MedlineTA.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_NlmUniqueID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_ISSNLinking.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_MedlineJournalInfo struct {
	MedlineJournalInfo *TMedlineJournalInfo `xml:"MedlineJournalInfo"`
}

//	If the WalkHandlers.XHasElem_MedlineJournalInfo function is not nil (ie. was set by outside code), calls it with this XHasElem_MedlineJournalInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_MedlineJournalInfo instance.
func (me *XHasElem_MedlineJournalInfo) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_MedlineJournalInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MedlineJournalInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_GeneSymbol struct {
	GeneSymbols []xsdt.String `xml:"GeneSymbol"`
}

//	If the WalkHandlers.XHasElems_GeneSymbol function is not nil (ie. was set by outside code), calls it with this XHasElems_GeneSymbol instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_GeneSymbol instance.
func (me *XHasElems_GeneSymbol) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_GeneSymbol; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGeneSymbolList struct {
	XHasElems_GeneSymbol
}

//	If the WalkHandlers.TGeneSymbolList function is not nil (ie. was set by outside code), calls it with this TGeneSymbolList instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TGeneSymbolList instance.
func (me *TGeneSymbolList) Walk() (err error) {
	if fn := WalkHandlers.TGeneSymbolList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_GeneSymbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_GeneSymbolList struct {
	GeneSymbolList *TGeneSymbolList `xml:"GeneSymbolList"`
}

//	If the WalkHandlers.XHasElem_GeneSymbolList function is not nil (ie. was set by outside code), calls it with this XHasElem_GeneSymbolList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_GeneSymbolList instance.
func (me *XHasElem_GeneSymbolList) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_GeneSymbolList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GeneSymbolList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TMedlineCitation struct {
	XHasElem_ChemicalList

	XHasElems_CitationSubset

	XHasElem_CommentsCorrectionsList

	XHasElem_MeshHeadingList

	XHasElems_SpaceFlightMission

	XHasElems_GeneralNote

	XHasElem_DateCreated

	XHasElem_Article

	XHasElem_SupplMeshList

	XHasElem_PersonalNameSubjectList

	XHasElems_OtherID

	XHasElem_DateCompleted

	XHasElem_DateRevised

	XHasElem_MedlineJournalInfo

	XHasElem_GeneSymbolList

	XHasElems_OtherAbstract

	XHasElem_Pmid

	XHasElem_NumberOfReferences

	XHasElems_KeywordList

	XHasElem_InvestigatorList

	XHasAtts_AttlistMedlineCitation
}

//	If the WalkHandlers.TMedlineCitation function is not nil (ie. was set by outside code), calls it with this TMedlineCitation instance as the single argument. Then calls the Walk() method on 20/21 embed(s) and 0/0 field(s) belonging to this TMedlineCitation instance.
func (me *TMedlineCitation) Walk() (err error) {
	if fn := WalkHandlers.TMedlineCitation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_OtherID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_DateCreated.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Article.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_SupplMeshList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_PersonalNameSubjectList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_OtherAbstract.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_DateCompleted.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_DateRevised.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_MedlineJournalInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_GeneSymbolList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Pmid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_NumberOfReferences.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_KeywordList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_InvestigatorList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_SpaceFlightMission.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_GeneralNote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_ChemicalList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_CitationSubset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_CommentsCorrectionsList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_MeshHeadingList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_MedlineCitation struct {
	MedlineCitation *TMedlineCitation `xml:"MedlineCitation"`
}

//	If the WalkHandlers.XHasElem_MedlineCitation function is not nil (ie. was set by outside code), calls it with this XHasElem_MedlineCitation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_MedlineCitation instance.
func (me *XHasElem_MedlineCitation) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_MedlineCitation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MedlineCitation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Hour struct {
	Hour xsdt.String `xml:"Hour"`
}

//	If the WalkHandlers.XHasElem_Hour function is not nil (ie. was set by outside code), calls it with this XHasElem_Hour instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_Hour instance.
func (me *XHasElem_Hour) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Hour; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Minute struct {
	Minute xsdt.String `xml:"Minute"`
}

//	If the WalkHandlers.XHasElem_Minute function is not nil (ie. was set by outside code), calls it with this XHasElem_Minute instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_Minute instance.
func (me *XHasElem_Minute) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Minute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Second struct {
	Second xsdt.String `xml:"Second"`
}

//	If the WalkHandlers.XHasElem_Second function is not nil (ie. was set by outside code), calls it with this XHasElem_Second instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_Second instance.
func (me *XHasElem_Second) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Second; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TnormalDate struct {
	XHasElem_Month

	XHasElem_Day

	XHasElem_Hour

	XHasElem_Minute

	XHasElem_Second

	XHasElem_Year
}

//	If the WalkHandlers.TnormalDate function is not nil (ie. was set by outside code), calls it with this TnormalDate instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TnormalDate instance.
func (me *TnormalDate) Walk() (err error) {
	if fn := WalkHandlers.TnormalDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_Year.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Month.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Day.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Hour.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Minute.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Second.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPubMedPubDate struct {
	TnormalDate

	XHasAtts_AttlistPubMedPubDate
}

//	If the WalkHandlers.TPubMedPubDate function is not nil (ie. was set by outside code), calls it with this TPubMedPubDate instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TPubMedPubDate instance.
func (me *TPubMedPubDate) Walk() (err error) {
	if fn := WalkHandlers.TPubMedPubDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TnormalDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_PubMedPubDate struct {
	PubMedPubDates []*TPubMedPubDate `xml:"PubMedPubDate"`
}

//	If the WalkHandlers.XHasElems_PubMedPubDate function is not nil (ie. was set by outside code), calls it with this XHasElems_PubMedPubDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_PubMedPubDate instance.
func (me *XHasElems_PubMedPubDate) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_PubMedPubDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PubMedPubDates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type THistory struct {
	XHasElems_PubMedPubDate
}

//	If the WalkHandlers.THistory function is not nil (ie. was set by outside code), calls it with this THistory instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this THistory instance.
func (me *THistory) Walk() (err error) {
	if fn := WalkHandlers.THistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_PubMedPubDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_History struct {
	History *THistory `xml:"History"`
}

//	If the WalkHandlers.XHasElem_History function is not nil (ie. was set by outside code), calls it with this XHasElem_History instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_History instance.
func (me *XHasElem_History) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_History; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.History.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_PublicationStatus struct {
	PublicationStatus xsdt.String `xml:"PublicationStatus"`
}

//	If the WalkHandlers.XHasElem_PublicationStatus function is not nil (ie. was set by outside code), calls it with this XHasElem_PublicationStatus instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_PublicationStatus instance.
func (me *XHasElem_PublicationStatus) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_PublicationStatus; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TArticleId struct {
	XHasCdata

	XHasAtts_AttlistArticleId
}

//	If the WalkHandlers.TArticleId function is not nil (ie. was set by outside code), calls it with this TArticleId instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TArticleId instance.
func (me *TArticleId) Walk() (err error) {
	if fn := WalkHandlers.TArticleId; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_ArticleId struct {
	ArticleIds []*TArticleId `xml:"ArticleId"`
}

//	If the WalkHandlers.XHasElems_ArticleId function is not nil (ie. was set by outside code), calls it with this XHasElems_ArticleId instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_ArticleId instance.
func (me *XHasElems_ArticleId) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_ArticleId; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ArticleIds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TArticleIdList struct {
	XHasElems_ArticleId
}

//	If the WalkHandlers.TArticleIdList function is not nil (ie. was set by outside code), calls it with this TArticleIdList instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TArticleIdList instance.
func (me *TArticleIdList) Walk() (err error) {
	if fn := WalkHandlers.TArticleIdList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_ArticleId.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_ArticleIdList struct {
	ArticleIdList *TArticleIdList `xml:"ArticleIdList"`
}

//	If the WalkHandlers.XHasElem_ArticleIdList function is not nil (ie. was set by outside code), calls it with this XHasElem_ArticleIdList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_ArticleIdList instance.
func (me *XHasElem_ArticleIdList) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_ArticleIdList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ArticleIdList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TParam struct {
	Ttext

	XHasAtts_AttlistParam
}

//	If the WalkHandlers.TParam function is not nil (ie. was set by outside code), calls it with this TParam instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TParam instance.
func (me *TParam) Walk() (err error) {
	if fn := WalkHandlers.TParam; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ttext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Param struct {
	Params []*TParam `xml:"Param"`
}

//	If the WalkHandlers.XHasElems_Param function is not nil (ie. was set by outside code), calls it with this XHasElems_Param instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Param instance.
func (me *XHasElems_Param) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Param; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Params {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TObject struct {
	XHasElems_Param

	XHasAtts_AttlistObject
}

//	If the WalkHandlers.TObject function is not nil (ie. was set by outside code), calls it with this TObject instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TObject instance.
func (me *TObject) Walk() (err error) {
	if fn := WalkHandlers.TObject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Object struct {
	Objects []*TObject `xml:"Object"`
}

//	If the WalkHandlers.XHasElems_Object function is not nil (ie. was set by outside code), calls it with this XHasElems_Object instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Object instance.
func (me *XHasElems_Object) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Object; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Objects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TObjectList struct {
	XHasElems_Object
}

//	If the WalkHandlers.TObjectList function is not nil (ie. was set by outside code), calls it with this TObjectList instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TObjectList instance.
func (me *TObjectList) Walk() (err error) {
	if fn := WalkHandlers.TObjectList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_Object.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_ObjectList struct {
	ObjectList *TObjectList `xml:"ObjectList"`
}

//	If the WalkHandlers.XHasElem_ObjectList function is not nil (ie. was set by outside code), calls it with this XHasElem_ObjectList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_ObjectList instance.
func (me *XHasElem_ObjectList) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_ObjectList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ObjectList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPubmedData struct {
	XHasElem_History

	XHasElem_PublicationStatus

	XHasElem_ArticleIdList

	XHasElem_ObjectList
}

//	If the WalkHandlers.TPubmedData function is not nil (ie. was set by outside code), calls it with this TPubmedData instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TPubmedData instance.
func (me *TPubmedData) Walk() (err error) {
	if fn := WalkHandlers.TPubmedData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_History.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_PublicationStatus.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_ArticleIdList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_ObjectList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_PubmedData struct {
	PubmedData *TPubmedData `xml:"PubmedData"`
}

//	If the WalkHandlers.XHasElem_PubmedData function is not nil (ie. was set by outside code), calls it with this XHasElem_PubmedData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_PubmedData instance.
func (me *XHasElem_PubmedData) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_PubmedData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PubmedData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPubmedArticle struct {
	XHasElem_MedlineCitation

	XHasElem_PubmedData
}

//	If the WalkHandlers.TPubmedArticle function is not nil (ie. was set by outside code), calls it with this TPubmedArticle instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TPubmedArticle instance.
func (me *TPubmedArticle) Walk() (err error) {
	if fn := WalkHandlers.TPubmedArticle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_PubmedData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_MedlineCitation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_PubmedArticle struct {
	PubmedArticles []*TPubmedArticle `xml:"PubmedArticle"`
}

//	If the WalkHandlers.XHasElems_PubmedArticle function is not nil (ie. was set by outside code), calls it with this XHasElems_PubmedArticle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_PubmedArticle instance.
func (me *XHasElems_PubmedArticle) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_PubmedArticle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PubmedArticles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TLocationLabel struct {
	XHasCdata

	XHasAtts_AttlistLocationLabel
}

//	If the WalkHandlers.TLocationLabel function is not nil (ie. was set by outside code), calls it with this TLocationLabel instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TLocationLabel instance.
func (me *TLocationLabel) Walk() (err error) {
	if fn := WalkHandlers.TLocationLabel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_LocationLabel struct {
	LocationLabels []*TLocationLabel `xml:"LocationLabel"`
}

//	If the WalkHandlers.XHasElems_LocationLabel function is not nil (ie. was set by outside code), calls it with this XHasElems_LocationLabel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_LocationLabel instance.
func (me *XHasElems_LocationLabel) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_LocationLabel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LocationLabels {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_AuthorList struct {
	AuthorLists []*TAuthorList `xml:"AuthorList"`
}

//	If the WalkHandlers.XHasElems_AuthorList function is not nil (ie. was set by outside code), calls it with this XHasElems_AuthorList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_AuthorList instance.
func (me *XHasElems_AuthorList) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_AuthorList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthorLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TContributionDate struct {
	XHasElem_Day

	XHasElem_Season

	XHasElem_Year

	XHasElem_Month
}

//	If the WalkHandlers.TContributionDate function is not nil (ie. was set by outside code), calls it with this TContributionDate instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TContributionDate instance.
func (me *TContributionDate) Walk() (err error) {
	if fn := WalkHandlers.TContributionDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_Year.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Month.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Day.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Season.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_ContributionDate struct {
	ContributionDate *TContributionDate `xml:"ContributionDate"`
}

//	If the WalkHandlers.XHasElem_ContributionDate function is not nil (ie. was set by outside code), calls it with this XHasElem_ContributionDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_ContributionDate instance.
func (me *XHasElem_ContributionDate) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_ContributionDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ContributionDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Edition struct {
	Edition xsdt.String `xml:"Edition"`
}

//	If the WalkHandlers.XHasElem_Edition function is not nil (ie. was set by outside code), calls it with this XHasElem_Edition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_Edition instance.
func (me *XHasElem_Edition) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Edition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TCollectionTitle struct {
	XHasAtts_AttlistBookTitle

	Ttext
}

//	If the WalkHandlers.TCollectionTitle function is not nil (ie. was set by outside code), calls it with this TCollectionTitle instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TCollectionTitle instance.
func (me *TCollectionTitle) Walk() (err error) {
	if fn := WalkHandlers.TCollectionTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ttext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_CollectionTitle struct {
	CollectionTitle *TCollectionTitle `xml:"CollectionTitle"`
}

//	If the WalkHandlers.XHasElem_CollectionTitle function is not nil (ie. was set by outside code), calls it with this XHasElem_CollectionTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_CollectionTitle instance.
func (me *XHasElem_CollectionTitle) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_CollectionTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CollectionTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_ReportNumber struct {
	ReportNumber xsdt.String `xml:"ReportNumber"`
}

//	If the WalkHandlers.XHasElem_ReportNumber function is not nil (ie. was set by outside code), calls it with this XHasElem_ReportNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_ReportNumber instance.
func (me *XHasElem_ReportNumber) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_ReportNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TBeginningDate struct {
	XHasElem_Season

	XHasElem_Year

	XHasElem_Month

	XHasElem_Day
}

//	If the WalkHandlers.TBeginningDate function is not nil (ie. was set by outside code), calls it with this TBeginningDate instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TBeginningDate instance.
func (me *TBeginningDate) Walk() (err error) {
	if fn := WalkHandlers.TBeginningDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_Season.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Year.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Month.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Day.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_BeginningDate struct {
	BeginningDate *TBeginningDate `xml:"BeginningDate"`
}

//	If the WalkHandlers.XHasElem_BeginningDate function is not nil (ie. was set by outside code), calls it with this XHasElem_BeginningDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_BeginningDate instance.
func (me *XHasElem_BeginningDate) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_BeginningDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BeginningDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TEndingDate struct {
	XHasElem_Season

	XHasElem_Year

	XHasElem_Month

	XHasElem_Day
}

//	If the WalkHandlers.TEndingDate function is not nil (ie. was set by outside code), calls it with this TEndingDate instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TEndingDate instance.
func (me *TEndingDate) Walk() (err error) {
	if fn := WalkHandlers.TEndingDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_Day.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Season.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Year.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Month.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_EndingDate struct {
	EndingDate *TEndingDate `xml:"EndingDate"`
}

//	If the WalkHandlers.XHasElem_EndingDate function is not nil (ie. was set by outside code), calls it with this XHasElem_EndingDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_EndingDate instance.
func (me *XHasElem_EndingDate) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_EndingDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EndingDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_VolumeTitle struct {
	VolumeTitle *Ttext `xml:"VolumeTitle"`
}

//	If the WalkHandlers.XHasElem_VolumeTitle function is not nil (ie. was set by outside code), calls it with this XHasElem_VolumeTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_VolumeTitle instance.
func (me *XHasElem_VolumeTitle) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_VolumeTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.VolumeTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Isbn struct {
	Isbns []xsdt.String `xml:"Isbn"`
}

//	If the WalkHandlers.XHasElems_Isbn function is not nil (ie. was set by outside code), calls it with this XHasElems_Isbn instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Isbn instance.
func (me *XHasElems_Isbn) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Isbn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Medium struct {
	Medium xsdt.String `xml:"Medium"`
}

//	If the WalkHandlers.XHasElem_Medium function is not nil (ie. was set by outside code), calls it with this XHasElem_Medium instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_Medium instance.
func (me *XHasElem_Medium) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Medium; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TBookTitle struct {
	Ttext

	XHasAtts_AttlistBookTitle
}

//	If the WalkHandlers.TBookTitle function is not nil (ie. was set by outside code), calls it with this TBookTitle instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TBookTitle instance.
func (me *TBookTitle) Walk() (err error) {
	if fn := WalkHandlers.TBookTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ttext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_BookTitle struct {
	BookTitle *TBookTitle `xml:"BookTitle"`
}

//	If the WalkHandlers.XHasElem_BookTitle function is not nil (ie. was set by outside code), calls it with this XHasElem_BookTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_BookTitle instance.
func (me *XHasElem_BookTitle) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_BookTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BookTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_PublisherName struct {
	PublisherName *Ttext `xml:"PublisherName"`
}

//	If the WalkHandlers.XHasElem_PublisherName function is not nil (ie. was set by outside code), calls it with this XHasElem_PublisherName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_PublisherName instance.
func (me *XHasElem_PublisherName) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_PublisherName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PublisherName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_PublisherLocation struct {
	PublisherLocation xsdt.String `xml:"PublisherLocation"`
}

//	If the WalkHandlers.XHasElem_PublisherLocation function is not nil (ie. was set by outside code), calls it with this XHasElem_PublisherLocation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_PublisherLocation instance.
func (me *XHasElem_PublisherLocation) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_PublisherLocation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPublisher struct {
	XHasElem_PublisherName

	XHasElem_PublisherLocation
}

//	If the WalkHandlers.TPublisher function is not nil (ie. was set by outside code), calls it with this TPublisher instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TPublisher instance.
func (me *TPublisher) Walk() (err error) {
	if fn := WalkHandlers.TPublisher; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_PublisherName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_PublisherLocation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Publisher struct {
	Publisher *TPublisher `xml:"Publisher"`
}

//	If the WalkHandlers.XHasElem_Publisher function is not nil (ie. was set by outside code), calls it with this XHasElem_Publisher instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_Publisher instance.
func (me *XHasElem_Publisher) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Publisher; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Publisher.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TBook struct {
	XHasElem_BookTitle

	XHasElem_EndingDate

	XHasElem_Volume

	XHasElem_VolumeTitle

	XHasElems_Isbn

	XHasElems_ELocationID

	XHasElem_Medium

	XHasElem_Publisher

	XHasElem_PubDate

	XHasElems_AuthorList

	XHasElem_BeginningDate

	XHasElem_Edition

	XHasElem_CollectionTitle

	XHasElem_ReportNumber
}

//	If the WalkHandlers.TBook function is not nil (ie. was set by outside code), calls it with this TBook instance as the single argument. Then calls the Walk() method on 14/14 embed(s) and 0/0 field(s) belonging to this TBook instance.
func (me *TBook) Walk() (err error) {
	if fn := WalkHandlers.TBook; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_AuthorList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_BeginningDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Edition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_CollectionTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_ReportNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_ELocationID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Medium.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_BookTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_EndingDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Volume.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_VolumeTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_Isbn.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Publisher.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_PubDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Book struct {
	Book *TBook `xml:"Book"`
}

//	If the WalkHandlers.XHasElem_Book function is not nil (ie. was set by outside code), calls it with this XHasElem_Book instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_Book instance.
func (me *XHasElem_Book) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Book; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Book.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_LocationLabel struct {
	LocationLabel *TLocationLabel `xml:"LocationLabel"`
}

//	If the WalkHandlers.XHasElem_LocationLabel function is not nil (ie. was set by outside code), calls it with this XHasElem_LocationLabel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_LocationLabel instance.
func (me *XHasElem_LocationLabel) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_LocationLabel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LocationLabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSectionTitle struct {
	Ttext

	XHasAtts_AttlistBookTitle
}

//	If the WalkHandlers.TSectionTitle function is not nil (ie. was set by outside code), calls it with this TSectionTitle instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TSectionTitle instance.
func (me *TSectionTitle) Walk() (err error) {
	if fn := WalkHandlers.TSectionTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ttext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_SectionTitle struct {
	SectionTitle *TSectionTitle `xml:"SectionTitle"`
}

//	If the WalkHandlers.XHasElem_SectionTitle function is not nil (ie. was set by outside code), calls it with this XHasElem_SectionTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_SectionTitle instance.
func (me *XHasElem_SectionTitle) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_SectionTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SectionTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSection struct {
	XHasElem_LocationLabel

	XHasElem_SectionTitle

	XHasElems_Section
}

//	If the WalkHandlers.TSection function is not nil (ie. was set by outside code), calls it with this TSection instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TSection instance.
func (me *TSection) Walk() (err error) {
	if fn := WalkHandlers.TSection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_LocationLabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_SectionTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Section struct {
	Sections []*TSection `xml:"Section"`
}

//	If the WalkHandlers.XHasElems_Section function is not nil (ie. was set by outside code), calls it with this XHasElems_Section instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Section instance.
func (me *XHasElems_Section) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Section; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Sections {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSections struct {
	XHasElems_Section
}

//	If the WalkHandlers.TSections function is not nil (ie. was set by outside code), calls it with this TSections instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TSections instance.
func (me *TSections) Walk() (err error) {
	if fn := WalkHandlers.TSections; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_Section.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Sections struct {
	Sections *TSections `xml:"Sections"`
}

//	If the WalkHandlers.XHasElem_Sections function is not nil (ie. was set by outside code), calls it with this XHasElem_Sections instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_Sections instance.
func (me *XHasElem_Sections) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Sections; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sections.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Item struct {
	Items []xsdt.String `xml:"Item"`
}

//	If the WalkHandlers.XHasElems_Item function is not nil (ie. was set by outside code), calls it with this XHasElems_Item instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Item instance.
func (me *XHasElems_Item) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Item; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TItemList struct {
	XHasElems_Item

	XHasAtts_AttlistItemList
}

//	If the WalkHandlers.TItemList function is not nil (ie. was set by outside code), calls it with this TItemList instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TItemList instance.
func (me *TItemList) Walk() (err error) {
	if fn := WalkHandlers.TItemList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_Item.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_ItemList struct {
	ItemLists []*TItemList `xml:"ItemList"`
}

//	If the WalkHandlers.XHasElems_ItemList function is not nil (ie. was set by outside code), calls it with this XHasElems_ItemList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_ItemList instance.
func (me *XHasElems_ItemList) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_ItemList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ItemLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_CitationString struct {
	CitationString *Ttext `xml:"CitationString"`
}

//	If the WalkHandlers.XHasElem_CitationString function is not nil (ie. was set by outside code), calls it with this XHasElem_CitationString instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_CitationString instance.
func (me *XHasElem_CitationString) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_CitationString; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CitationString.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TBookDocument struct {
	XHasElems_KeywordList

	XHasElem_ArticleIdList

	XHasElem_Abstract

	XHasElem_Sections

	XHasElem_DateRevised

	XHasElems_ItemList

	XHasElem_Pagination

	XHasElems_PublicationType

	XHasElem_CitationString

	XHasElem_ArticleTitle

	XHasElems_Language

	XHasElems_LocationLabel

	XHasElem_VernacularTitle

	XHasElems_AuthorList

	XHasElem_ContributionDate

	XHasElem_GrantList

	XHasElem_Pmid

	XHasElem_Book
}

//	If the WalkHandlers.TBookDocument function is not nil (ie. was set by outside code), calls it with this TBookDocument instance as the single argument. Then calls the Walk() method on 18/18 embed(s) and 0/0 field(s) belonging to this TBookDocument instance.
func (me *TBookDocument) Walk() (err error) {
	if fn := WalkHandlers.TBookDocument; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_GrantList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Pmid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Book.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_LocationLabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_VernacularTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_AuthorList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_ContributionDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_ArticleIdList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Abstract.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_KeywordList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Pagination.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_PublicationType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Sections.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_DateRevised.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_ItemList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_ArticleTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_Language.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_CitationString.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_BookDocument struct {
	BookDocument *TBookDocument `xml:"BookDocument"`
}

//	If the WalkHandlers.XHasElem_BookDocument function is not nil (ie. was set by outside code), calls it with this XHasElem_BookDocument instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_BookDocument instance.
func (me *XHasElem_BookDocument) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_BookDocument; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BookDocument.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPubmedBookData struct {
	XHasElem_History

	XHasElem_PublicationStatus

	XHasElem_ArticleIdList

	XHasElem_ObjectList
}

//	If the WalkHandlers.TPubmedBookData function is not nil (ie. was set by outside code), calls it with this TPubmedBookData instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TPubmedBookData instance.
func (me *TPubmedBookData) Walk() (err error) {
	if fn := WalkHandlers.TPubmedBookData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_History.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_PublicationStatus.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_ArticleIdList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_ObjectList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_PubmedBookData struct {
	PubmedBookData *TPubmedBookData `xml:"PubmedBookData"`
}

//	If the WalkHandlers.XHasElem_PubmedBookData function is not nil (ie. was set by outside code), calls it with this XHasElem_PubmedBookData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_PubmedBookData instance.
func (me *XHasElem_PubmedBookData) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_PubmedBookData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PubmedBookData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPubmedBookArticle struct {
	XHasElem_BookDocument

	XHasElem_PubmedBookData
}

//	If the WalkHandlers.TPubmedBookArticle function is not nil (ie. was set by outside code), calls it with this TPubmedBookArticle instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TPubmedBookArticle instance.
func (me *TPubmedBookArticle) Walk() (err error) {
	if fn := WalkHandlers.TPubmedBookArticle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_PubmedBookData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_BookDocument.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_PubmedBookArticle struct {
	PubmedBookArticles []*TPubmedBookArticle `xml:"PubmedBookArticle"`
}

//	If the WalkHandlers.XHasElems_PubmedBookArticle function is not nil (ie. was set by outside code), calls it with this XHasElems_PubmedBookArticle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_PubmedBookArticle instance.
func (me *XHasElems_PubmedBookArticle) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_PubmedBookArticle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PubmedBookArticles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPubmedArticleSet struct {
	XHasElems_PubmedArticle

	XHasElems_PubmedBookArticle
}

//	If the WalkHandlers.TPubmedArticleSet function is not nil (ie. was set by outside code), calls it with this TPubmedArticleSet instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TPubmedArticleSet instance.
func (me *TPubmedArticleSet) Walk() (err error) {
	if fn := WalkHandlers.TPubmedArticleSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_PubmedArticle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElems_PubmedBookArticle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_PubmedArticleSet struct {
	PubmedArticleSet *TPubmedArticleSet `xml:"PubmedArticleSet"`
}

//	If the WalkHandlers.XHasElem_PubmedArticleSet function is not nil (ie. was set by outside code), calls it with this XHasElem_PubmedArticleSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_PubmedArticleSet instance.
func (me *XHasElem_PubmedArticleSet) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_PubmedArticleSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PubmedArticleSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_PubmedArticleSet struct {
	PubmedArticleSets []*TPubmedArticleSet `xml:"PubmedArticleSet"`
}

//	If the WalkHandlers.XHasElems_PubmedArticleSet function is not nil (ie. was set by outside code), calls it with this XHasElems_PubmedArticleSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_PubmedArticleSet instance.
func (me *XHasElems_PubmedArticleSet) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_PubmedArticleSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PubmedArticleSets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_PubmedArticle struct {
	PubmedArticle *TPubmedArticle `xml:"PubmedArticle"`
}

//	If the WalkHandlers.XHasElem_PubmedArticle function is not nil (ie. was set by outside code), calls it with this XHasElem_PubmedArticle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_PubmedArticle instance.
func (me *XHasElem_PubmedArticle) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_PubmedArticle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PubmedArticle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_PubmedData struct {
	PubmedDatas []*TPubmedData `xml:"PubmedData"`
}

//	If the WalkHandlers.XHasElems_PubmedData function is not nil (ie. was set by outside code), calls it with this XHasElems_PubmedData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_PubmedData instance.
func (me *XHasElems_PubmedData) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_PubmedData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PubmedDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_PubMedPubDate struct {
	PubMedPubDate *TPubMedPubDate `xml:"PubMedPubDate"`
}

//	If the WalkHandlers.XHasElem_PubMedPubDate function is not nil (ie. was set by outside code), calls it with this XHasElem_PubMedPubDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_PubMedPubDate instance.
func (me *XHasElem_PubMedPubDate) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_PubMedPubDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PubMedPubDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_PublicationStatus struct {
	PublicationStatuses []xsdt.String `xml:"PublicationStatus"`
}

//	If the WalkHandlers.XHasElems_PublicationStatus function is not nil (ie. was set by outside code), calls it with this XHasElems_PublicationStatus instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_PublicationStatus instance.
func (me *XHasElems_PublicationStatus) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_PublicationStatus; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_ArticleIdList struct {
	ArticleIdLists []*TArticleIdList `xml:"ArticleIdList"`
}

//	If the WalkHandlers.XHasElems_ArticleIdList function is not nil (ie. was set by outside code), calls it with this XHasElems_ArticleIdList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_ArticleIdList instance.
func (me *XHasElems_ArticleIdList) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_ArticleIdList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ArticleIdLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_ArticleId struct {
	ArticleId *TArticleId `xml:"ArticleId"`
}

//	If the WalkHandlers.XHasElem_ArticleId function is not nil (ie. was set by outside code), calls it with this XHasElem_ArticleId instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_ArticleId instance.
func (me *XHasElem_ArticleId) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_ArticleId; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ArticleId.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_History struct {
	Histories []*THistory `xml:"History"`
}

//	If the WalkHandlers.XHasElems_History function is not nil (ie. was set by outside code), calls it with this XHasElems_History instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_History instance.
func (me *XHasElems_History) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_History; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Histories {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TUrl struct {
	XHasCdata

	XHasAtts_AttlistUrl
}

//	If the WalkHandlers.TUrl function is not nil (ie. was set by outside code), calls it with this TUrl instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TUrl instance.
func (me *TUrl) Walk() (err error) {
	if fn := WalkHandlers.TUrl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Url struct {
	Url *TUrl `xml:"URL"`
}

//	If the WalkHandlers.XHasElem_Url function is not nil (ie. was set by outside code), calls it with this XHasElem_Url instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_Url instance.
func (me *XHasElem_Url) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Url; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Url.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Url struct {
	Urls []*TUrl `xml:"URL"`
}

//	If the WalkHandlers.XHasElems_Url function is not nil (ie. was set by outside code), calls it with this XHasElems_Url instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Url instance.
func (me *XHasElems_Url) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Url; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Urls {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_ObjectList struct {
	ObjectLists []*TObjectList `xml:"ObjectList"`
}

//	If the WalkHandlers.XHasElems_ObjectList function is not nil (ie. was set by outside code), calls it with this XHasElems_ObjectList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_ObjectList instance.
func (me *XHasElems_ObjectList) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_ObjectList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ObjectLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Object struct {
	Object *TObject `xml:"Object"`
}

//	If the WalkHandlers.XHasElem_Object function is not nil (ie. was set by outside code), calls it with this XHasElem_Object instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_Object instance.
func (me *XHasElem_Object) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Object; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Object.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Param struct {
	Param *TParam `xml:"Param"`
}

//	If the WalkHandlers.XHasElem_Param function is not nil (ie. was set by outside code), calls it with this XHasElem_Param instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_Param instance.
func (me *XHasElem_Param) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Param; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Hour struct {
	Hours []xsdt.String `xml:"Hour"`
}

//	If the WalkHandlers.XHasElems_Hour function is not nil (ie. was set by outside code), calls it with this XHasElems_Hour instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Hour instance.
func (me *XHasElems_Hour) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Hour; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Minute struct {
	Minutes []xsdt.String `xml:"Minute"`
}

//	If the WalkHandlers.XHasElems_Minute function is not nil (ie. was set by outside code), calls it with this XHasElems_Minute instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Minute instance.
func (me *XHasElems_Minute) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Minute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Second struct {
	Seconds []xsdt.String `xml:"Second"`
}

//	If the WalkHandlers.XHasElems_Second function is not nil (ie. was set by outside code), calls it with this XHasElems_Second instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Second instance.
func (me *XHasElems_Second) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Second; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Sup struct {
	Sup xsdt.String `xml:"sup"`
}

//	If the WalkHandlers.XHasElem_Sup function is not nil (ie. was set by outside code), calls it with this XHasElem_Sup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_Sup instance.
func (me *XHasElem_Sup) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Sup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Sub struct {
	Sub xsdt.String `xml:"sub"`
}

//	If the WalkHandlers.XHasElem_Sub function is not nil (ie. was set by outside code), calls it with this XHasElem_Sub instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_Sub instance.
func (me *XHasElem_Sub) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Sub; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_U struct {
	U xsdt.String `xml:"u"`
}

//	If the WalkHandlers.XHasElem_U function is not nil (ie. was set by outside code), calls it with this XHasElem_U instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_U instance.
func (me *XHasElem_U) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_U; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_B struct {
	B xsdt.String `xml:"b"`
}

//	If the WalkHandlers.XHasElem_B function is not nil (ie. was set by outside code), calls it with this XHasElem_B instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_B instance.
func (me *XHasElem_B) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_B; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_I struct {
	I xsdt.String `xml:"i"`
}

//	If the WalkHandlers.XHasElem_I function is not nil (ie. was set by outside code), calls it with this XHasElem_I instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_I instance.
func (me *XHasElem_I) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_I; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Format struct {
	Format *Ttext `xml:"format"`

	XHasElem_B

	XHasElem_I

	XHasElem_Sup

	XHasElem_Sub

	XHasElem_U
}

//	If the WalkHandlers.XHasElem_Format function is not nil (ie. was set by outside code), calls it with this XHasElem_Format instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 1/1 field(s) belonging to this XHasElem_Format instance.
func (me *XHasElem_Format) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Format; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElem_B.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_I.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Sup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_Sub.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_U.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Format.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_MedlineCitation struct {
	MedlineCitations []*TMedlineCitation `xml:"MedlineCitation"`
}

//	If the WalkHandlers.XHasElems_MedlineCitation function is not nil (ie. was set by outside code), calls it with this XHasElems_MedlineCitation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_MedlineCitation instance.
func (me *XHasElems_MedlineCitation) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_MedlineCitation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MedlineCitations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Pmid struct {
	Pmids []*TPmid `xml:"PMID"`
}

//	If the WalkHandlers.XHasElems_Pmid function is not nil (ie. was set by outside code), calls it with this XHasElems_Pmid instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Pmid instance.
func (me *XHasElems_Pmid) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Pmid; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Pmids {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDeleteCitation struct {
	XHasElems_Pmid
}

//	If the WalkHandlers.TDeleteCitation function is not nil (ie. was set by outside code), calls it with this TDeleteCitation instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TDeleteCitation instance.
func (me *TDeleteCitation) Walk() (err error) {
	if fn := WalkHandlers.TDeleteCitation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_Pmid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_DeleteCitation struct {
	DeleteCitation *TDeleteCitation `xml:"DeleteCitation"`
}

//	If the WalkHandlers.XHasElem_DeleteCitation function is not nil (ie. was set by outside code), calls it with this XHasElem_DeleteCitation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_DeleteCitation instance.
func (me *XHasElem_DeleteCitation) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_DeleteCitation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DeleteCitation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TMedlineCitationSet struct {
	XHasElems_MedlineCitation

	XHasElem_DeleteCitation
}

//	If the WalkHandlers.TMedlineCitationSet function is not nil (ie. was set by outside code), calls it with this TMedlineCitationSet instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TMedlineCitationSet instance.
func (me *TMedlineCitationSet) Walk() (err error) {
	if fn := WalkHandlers.TMedlineCitationSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_MedlineCitation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_DeleteCitation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_MedlineCitationSet struct {
	MedlineCitationSet *TMedlineCitationSet `xml:"MedlineCitationSet"`
}

//	If the WalkHandlers.XHasElem_MedlineCitationSet function is not nil (ie. was set by outside code), calls it with this XHasElem_MedlineCitationSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_MedlineCitationSet instance.
func (me *XHasElem_MedlineCitationSet) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_MedlineCitationSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MedlineCitationSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_MedlineCitationSet struct {
	MedlineCitationSets []*TMedlineCitationSet `xml:"MedlineCitationSet"`
}

//	If the WalkHandlers.XHasElems_MedlineCitationSet function is not nil (ie. was set by outside code), calls it with this XHasElems_MedlineCitationSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_MedlineCitationSet instance.
func (me *XHasElems_MedlineCitationSet) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_MedlineCitationSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MedlineCitationSets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Abstract struct {
	Abstracts []*TAbstract `xml:"Abstract"`
}

//	If the WalkHandlers.XHasElems_Abstract function is not nil (ie. was set by outside code), calls it with this XHasElems_Abstract instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Abstract instance.
func (me *XHasElems_Abstract) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Abstract; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Abstracts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_AbstractText struct {
	AbstractText *TAbstractText `xml:"AbstractText"`
}

//	If the WalkHandlers.XHasElem_AbstractText function is not nil (ie. was set by outside code), calls it with this XHasElem_AbstractText instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_AbstractText instance.
func (me *XHasElem_AbstractText) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_AbstractText; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AbstractText.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_AccessionNumber struct {
	AccessionNumber xsdt.String `xml:"AccessionNumber"`
}

//	If the WalkHandlers.XHasElem_AccessionNumber function is not nil (ie. was set by outside code), calls it with this XHasElem_AccessionNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_AccessionNumber instance.
func (me *XHasElem_AccessionNumber) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_AccessionNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_AccessionNumberList struct {
	AccessionNumberLists []*TAccessionNumberList `xml:"AccessionNumberList"`
}

//	If the WalkHandlers.XHasElems_AccessionNumberList function is not nil (ie. was set by outside code), calls it with this XHasElems_AccessionNumberList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_AccessionNumberList instance.
func (me *XHasElems_AccessionNumberList) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_AccessionNumberList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AccessionNumberLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Acronym struct {
	Acronyms []xsdt.String `xml:"Acronym"`
}

//	If the WalkHandlers.XHasElems_Acronym function is not nil (ie. was set by outside code), calls it with this XHasElems_Acronym instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Acronym instance.
func (me *XHasElems_Acronym) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Acronym; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Affiliation struct {
	Affiliations []*Ttext `xml:"Affiliation"`
}

//	If the WalkHandlers.XHasElems_Affiliation function is not nil (ie. was set by outside code), calls it with this XHasElems_Affiliation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Affiliation instance.
func (me *XHasElems_Affiliation) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Affiliation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Affiliations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_AffiliationInfo struct {
	AffiliationInfo *TAffiliationInfo `xml:"AffiliationInfo"`
}

//	If the WalkHandlers.XHasElem_AffiliationInfo function is not nil (ie. was set by outside code), calls it with this XHasElem_AffiliationInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_AffiliationInfo instance.
func (me *XHasElem_AffiliationInfo) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_AffiliationInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AffiliationInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Agency struct {
	Agencies []xsdt.String `xml:"Agency"`
}

//	If the WalkHandlers.XHasElems_Agency function is not nil (ie. was set by outside code), calls it with this XHasElems_Agency instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Agency instance.
func (me *XHasElems_Agency) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Agency; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Article struct {
	Articles []*TArticle `xml:"Article"`
}

//	If the WalkHandlers.XHasElems_Article function is not nil (ie. was set by outside code), calls it with this XHasElems_Article instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Article instance.
func (me *XHasElems_Article) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Article; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Articles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_ArticleDate struct {
	ArticleDate *TArticleDate `xml:"ArticleDate"`
}

//	If the WalkHandlers.XHasElem_ArticleDate function is not nil (ie. was set by outside code), calls it with this XHasElem_ArticleDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_ArticleDate instance.
func (me *XHasElem_ArticleDate) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_ArticleDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ArticleDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_ArticleTitle struct {
	ArticleTitles []*TArticleTitle `xml:"ArticleTitle"`
}

//	If the WalkHandlers.XHasElems_ArticleTitle function is not nil (ie. was set by outside code), calls it with this XHasElems_ArticleTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_ArticleTitle instance.
func (me *XHasElems_ArticleTitle) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_ArticleTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ArticleTitles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Author struct {
	Author *TAuthor `xml:"Author"`
}

//	If the WalkHandlers.XHasElem_Author function is not nil (ie. was set by outside code), calls it with this XHasElem_Author instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_Author instance.
func (me *XHasElem_Author) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Author; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Author.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Chemical struct {
	Chemical *TChemical `xml:"Chemical"`
}

//	If the WalkHandlers.XHasElem_Chemical function is not nil (ie. was set by outside code), calls it with this XHasElem_Chemical instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_Chemical instance.
func (me *XHasElem_Chemical) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Chemical; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Chemical.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_ChemicalList struct {
	ChemicalLists []*TChemicalList `xml:"ChemicalList"`
}

//	If the WalkHandlers.XHasElems_ChemicalList function is not nil (ie. was set by outside code), calls it with this XHasElems_ChemicalList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_ChemicalList instance.
func (me *XHasElems_ChemicalList) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_ChemicalList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ChemicalLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_CitationSubset struct {
	CitationSubset xsdt.String `xml:"CitationSubset"`
}

//	If the WalkHandlers.XHasElem_CitationSubset function is not nil (ie. was set by outside code), calls it with this XHasElem_CitationSubset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_CitationSubset instance.
func (me *XHasElem_CitationSubset) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_CitationSubset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_CollectiveName struct {
	CollectiveNames []*Ttext `xml:"CollectiveName"`
}

//	If the WalkHandlers.XHasElems_CollectiveName function is not nil (ie. was set by outside code), calls it with this XHasElems_CollectiveName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_CollectiveName instance.
func (me *XHasElems_CollectiveName) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_CollectiveName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CollectiveNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_CommentsCorrections struct {
	CommentsCorrections *TCommentsCorrections `xml:"CommentsCorrections"`
}

//	If the WalkHandlers.XHasElem_CommentsCorrections function is not nil (ie. was set by outside code), calls it with this XHasElem_CommentsCorrections instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_CommentsCorrections instance.
func (me *XHasElem_CommentsCorrections) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_CommentsCorrections; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CommentsCorrections.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_CommentsCorrectionsList struct {
	CommentsCorrectionsLists []*TCommentsCorrectionsList `xml:"CommentsCorrectionsList"`
}

//	If the WalkHandlers.XHasElems_CommentsCorrectionsList function is not nil (ie. was set by outside code), calls it with this XHasElems_CommentsCorrectionsList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_CommentsCorrectionsList instance.
func (me *XHasElems_CommentsCorrectionsList) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_CommentsCorrectionsList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CommentsCorrectionsLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_CopyrightInformation struct {
	CopyrightInformations []xsdt.String `xml:"CopyrightInformation"`
}

//	If the WalkHandlers.XHasElems_CopyrightInformation function is not nil (ie. was set by outside code), calls it with this XHasElems_CopyrightInformation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_CopyrightInformation instance.
func (me *XHasElems_CopyrightInformation) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_CopyrightInformation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Country struct {
	Countries []xsdt.String `xml:"Country"`
}

//	If the WalkHandlers.XHasElems_Country function is not nil (ie. was set by outside code), calls it with this XHasElems_Country instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Country instance.
func (me *XHasElems_Country) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Country; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_DataBank struct {
	DataBank *TDataBank `xml:"DataBank"`
}

//	If the WalkHandlers.XHasElem_DataBank function is not nil (ie. was set by outside code), calls it with this XHasElem_DataBank instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_DataBank instance.
func (me *XHasElem_DataBank) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_DataBank; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DataBank.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_DataBankList struct {
	DataBankLists []*TDataBankList `xml:"DataBankList"`
}

//	If the WalkHandlers.XHasElems_DataBankList function is not nil (ie. was set by outside code), calls it with this XHasElems_DataBankList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_DataBankList instance.
func (me *XHasElems_DataBankList) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_DataBankList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DataBankLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_DataBankName struct {
	DataBankNames []xsdt.String `xml:"DataBankName"`
}

//	If the WalkHandlers.XHasElems_DataBankName function is not nil (ie. was set by outside code), calls it with this XHasElems_DataBankName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_DataBankName instance.
func (me *XHasElems_DataBankName) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_DataBankName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_DateCompleted struct {
	DateCompleteds []*TDateCompleted `xml:"DateCompleted"`
}

//	If the WalkHandlers.XHasElems_DateCompleted function is not nil (ie. was set by outside code), calls it with this XHasElems_DateCompleted instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_DateCompleted instance.
func (me *XHasElems_DateCompleted) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_DateCompleted; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DateCompleteds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_DateCreated struct {
	DateCreateds []*TDateCreated `xml:"DateCreated"`
}

//	If the WalkHandlers.XHasElems_DateCreated function is not nil (ie. was set by outside code), calls it with this XHasElems_DateCreated instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_DateCreated instance.
func (me *XHasElems_DateCreated) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_DateCreated; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DateCreateds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_DateRevised struct {
	DateReviseds []*TDateRevised `xml:"DateRevised"`
}

//	If the WalkHandlers.XHasElems_DateRevised function is not nil (ie. was set by outside code), calls it with this XHasElems_DateRevised instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_DateRevised instance.
func (me *XHasElems_DateRevised) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_DateRevised; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DateReviseds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Day struct {
	Days []xsdt.String `xml:"Day"`
}

//	If the WalkHandlers.XHasElems_Day function is not nil (ie. was set by outside code), calls it with this XHasElems_Day instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Day instance.
func (me *XHasElems_Day) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Day; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_DescriptorName struct {
	DescriptorNames []*TDescriptorName `xml:"DescriptorName"`
}

//	If the WalkHandlers.XHasElems_DescriptorName function is not nil (ie. was set by outside code), calls it with this XHasElems_DescriptorName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_DescriptorName instance.
func (me *XHasElems_DescriptorName) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_DescriptorName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DescriptorNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_ELocationID struct {
	ELocationID *TELocationID `xml:"ELocationID"`
}

//	If the WalkHandlers.XHasElem_ELocationID function is not nil (ie. was set by outside code), calls it with this XHasElem_ELocationID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_ELocationID instance.
func (me *XHasElem_ELocationID) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_ELocationID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ELocationID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_EndPage struct {
	EndPages []xsdt.String `xml:"EndPage"`
}

//	If the WalkHandlers.XHasElems_EndPage function is not nil (ie. was set by outside code), calls it with this XHasElems_EndPage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_EndPage instance.
func (me *XHasElems_EndPage) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_EndPage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_ForeName struct {
	ForeNames []xsdt.String `xml:"ForeName"`
}

//	If the WalkHandlers.XHasElems_ForeName function is not nil (ie. was set by outside code), calls it with this XHasElems_ForeName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_ForeName instance.
func (me *XHasElems_ForeName) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_ForeName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_GeneSymbol struct {
	GeneSymbol xsdt.String `xml:"GeneSymbol"`
}

//	If the WalkHandlers.XHasElem_GeneSymbol function is not nil (ie. was set by outside code), calls it with this XHasElem_GeneSymbol instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_GeneSymbol instance.
func (me *XHasElem_GeneSymbol) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_GeneSymbol; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_GeneSymbolList struct {
	GeneSymbolLists []*TGeneSymbolList `xml:"GeneSymbolList"`
}

//	If the WalkHandlers.XHasElems_GeneSymbolList function is not nil (ie. was set by outside code), calls it with this XHasElems_GeneSymbolList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_GeneSymbolList instance.
func (me *XHasElems_GeneSymbolList) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_GeneSymbolList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GeneSymbolLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_GeneralNote struct {
	GeneralNote *TGeneralNote `xml:"GeneralNote"`
}

//	If the WalkHandlers.XHasElem_GeneralNote function is not nil (ie. was set by outside code), calls it with this XHasElem_GeneralNote instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_GeneralNote instance.
func (me *XHasElem_GeneralNote) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_GeneralNote; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GeneralNote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Grant struct {
	Grant *TGrant `xml:"Grant"`
}

//	If the WalkHandlers.XHasElem_Grant function is not nil (ie. was set by outside code), calls it with this XHasElem_Grant instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_Grant instance.
func (me *XHasElem_Grant) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Grant; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Grant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_GrantID struct {
	GrantIDs []xsdt.String `xml:"GrantID"`
}

//	If the WalkHandlers.XHasElems_GrantID function is not nil (ie. was set by outside code), calls it with this XHasElems_GrantID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_GrantID instance.
func (me *XHasElems_GrantID) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_GrantID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_GrantList struct {
	GrantLists []*TGrantList `xml:"GrantList"`
}

//	If the WalkHandlers.XHasElems_GrantList function is not nil (ie. was set by outside code), calls it with this XHasElems_GrantList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_GrantList instance.
func (me *XHasElems_GrantList) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_GrantList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GrantLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Identifier struct {
	Identifier *TIdentifier `xml:"Identifier"`
}

//	If the WalkHandlers.XHasElem_Identifier function is not nil (ie. was set by outside code), calls it with this XHasElem_Identifier instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_Identifier instance.
func (me *XHasElem_Identifier) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Identifier; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Identifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_ISOAbbreviation struct {
	ISOAbbreviations []xsdt.String `xml:"ISOAbbreviation"`
}

//	If the WalkHandlers.XHasElems_ISOAbbreviation function is not nil (ie. was set by outside code), calls it with this XHasElems_ISOAbbreviation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_ISOAbbreviation instance.
func (me *XHasElems_ISOAbbreviation) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_ISOAbbreviation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Issn struct {
	Issns []*TIssn `xml:"ISSN"`
}

//	If the WalkHandlers.XHasElems_Issn function is not nil (ie. was set by outside code), calls it with this XHasElems_Issn instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Issn instance.
func (me *XHasElems_Issn) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Issn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Issns {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_ISSNLinking struct {
	ISSNLinkings []xsdt.String `xml:"ISSNLinking"`
}

//	If the WalkHandlers.XHasElems_ISSNLinking function is not nil (ie. was set by outside code), calls it with this XHasElems_ISSNLinking instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_ISSNLinking instance.
func (me *XHasElems_ISSNLinking) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_ISSNLinking; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Initials struct {
	Initialses []xsdt.String `xml:"Initials"`
}

//	If the WalkHandlers.XHasElems_Initials function is not nil (ie. was set by outside code), calls it with this XHasElems_Initials instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Initials instance.
func (me *XHasElems_Initials) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Initials; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Investigator struct {
	Investigator *TInvestigator `xml:"Investigator"`
}

//	If the WalkHandlers.XHasElem_Investigator function is not nil (ie. was set by outside code), calls it with this XHasElem_Investigator instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_Investigator instance.
func (me *XHasElem_Investigator) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Investigator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Investigator.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_InvestigatorList struct {
	InvestigatorLists []*TInvestigatorList `xml:"InvestigatorList"`
}

//	If the WalkHandlers.XHasElems_InvestigatorList function is not nil (ie. was set by outside code), calls it with this XHasElems_InvestigatorList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_InvestigatorList instance.
func (me *XHasElems_InvestigatorList) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_InvestigatorList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.InvestigatorLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Issue struct {
	Issues []xsdt.String `xml:"Issue"`
}

//	If the WalkHandlers.XHasElems_Issue function is not nil (ie. was set by outside code), calls it with this XHasElems_Issue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Issue instance.
func (me *XHasElems_Issue) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Issue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Journal struct {
	Journals []*TJournal `xml:"Journal"`
}

//	If the WalkHandlers.XHasElems_Journal function is not nil (ie. was set by outside code), calls it with this XHasElems_Journal instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Journal instance.
func (me *XHasElems_Journal) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Journal; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Journals {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_JournalIssue struct {
	JournalIssues []*TJournalIssue `xml:"JournalIssue"`
}

//	If the WalkHandlers.XHasElems_JournalIssue function is not nil (ie. was set by outside code), calls it with this XHasElems_JournalIssue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_JournalIssue instance.
func (me *XHasElems_JournalIssue) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_JournalIssue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.JournalIssues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Keyword struct {
	Keyword *TKeyword `xml:"Keyword"`
}

//	If the WalkHandlers.XHasElem_Keyword function is not nil (ie. was set by outside code), calls it with this XHasElem_Keyword instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_Keyword instance.
func (me *XHasElem_Keyword) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Keyword; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Keyword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_KeywordList struct {
	KeywordList *TKeywordList `xml:"KeywordList"`
}

//	If the WalkHandlers.XHasElem_KeywordList function is not nil (ie. was set by outside code), calls it with this XHasElem_KeywordList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_KeywordList instance.
func (me *XHasElem_KeywordList) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_KeywordList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.KeywordList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Language struct {
	Language xsdt.String `xml:"Language"`
}

//	If the WalkHandlers.XHasElem_Language function is not nil (ie. was set by outside code), calls it with this XHasElem_Language instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_Language instance.
func (me *XHasElem_Language) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Language; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_LastName struct {
	LastNames []xsdt.String `xml:"LastName"`
}

//	If the WalkHandlers.XHasElems_LastName function is not nil (ie. was set by outside code), calls it with this XHasElems_LastName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_LastName instance.
func (me *XHasElems_LastName) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_LastName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_MedlineDate struct {
	MedlineDates []xsdt.String `xml:"MedlineDate"`
}

//	If the WalkHandlers.XHasElems_MedlineDate function is not nil (ie. was set by outside code), calls it with this XHasElems_MedlineDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_MedlineDate instance.
func (me *XHasElems_MedlineDate) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_MedlineDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_MedlineJournalInfo struct {
	MedlineJournalInfos []*TMedlineJournalInfo `xml:"MedlineJournalInfo"`
}

//	If the WalkHandlers.XHasElems_MedlineJournalInfo function is not nil (ie. was set by outside code), calls it with this XHasElems_MedlineJournalInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_MedlineJournalInfo instance.
func (me *XHasElems_MedlineJournalInfo) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_MedlineJournalInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MedlineJournalInfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_MedlinePgn struct {
	MedlinePgns []xsdt.String `xml:"MedlinePgn"`
}

//	If the WalkHandlers.XHasElems_MedlinePgn function is not nil (ie. was set by outside code), calls it with this XHasElems_MedlinePgn instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_MedlinePgn instance.
func (me *XHasElems_MedlinePgn) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_MedlinePgn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_MedlineTA struct {
	MedlineTAs []xsdt.String `xml:"MedlineTA"`
}

//	If the WalkHandlers.XHasElems_MedlineTA function is not nil (ie. was set by outside code), calls it with this XHasElems_MedlineTA instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_MedlineTA instance.
func (me *XHasElems_MedlineTA) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_MedlineTA; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_MeshHeading struct {
	MeshHeading *TMeshHeading `xml:"MeshHeading"`
}

//	If the WalkHandlers.XHasElem_MeshHeading function is not nil (ie. was set by outside code), calls it with this XHasElem_MeshHeading instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_MeshHeading instance.
func (me *XHasElem_MeshHeading) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_MeshHeading; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MeshHeading.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_MeshHeadingList struct {
	MeshHeadingLists []*TMeshHeadingList `xml:"MeshHeadingList"`
}

//	If the WalkHandlers.XHasElems_MeshHeadingList function is not nil (ie. was set by outside code), calls it with this XHasElems_MeshHeadingList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_MeshHeadingList instance.
func (me *XHasElems_MeshHeadingList) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_MeshHeadingList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MeshHeadingLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Month struct {
	Months []xsdt.String `xml:"Month"`
}

//	If the WalkHandlers.XHasElems_Month function is not nil (ie. was set by outside code), calls it with this XHasElems_Month instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Month instance.
func (me *XHasElems_Month) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Month; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_NameOfSubstance struct {
	NameOfSubstances []*TNameOfSubstance `xml:"NameOfSubstance"`
}

//	If the WalkHandlers.XHasElems_NameOfSubstance function is not nil (ie. was set by outside code), calls it with this XHasElems_NameOfSubstance instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_NameOfSubstance instance.
func (me *XHasElems_NameOfSubstance) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_NameOfSubstance; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NameOfSubstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_NlmUniqueID struct {
	NlmUniqueIDs []xsdt.String `xml:"NlmUniqueID"`
}

//	If the WalkHandlers.XHasElems_NlmUniqueID function is not nil (ie. was set by outside code), calls it with this XHasElems_NlmUniqueID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_NlmUniqueID instance.
func (me *XHasElems_NlmUniqueID) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_NlmUniqueID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Note struct {
	Notes []xsdt.String `xml:"Note"`
}

//	If the WalkHandlers.XHasElems_Note function is not nil (ie. was set by outside code), calls it with this XHasElems_Note instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Note instance.
func (me *XHasElems_Note) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Note; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_NumberOfReferences struct {
	NumberOfReferenceses []xsdt.String `xml:"NumberOfReferences"`
}

//	If the WalkHandlers.XHasElems_NumberOfReferences function is not nil (ie. was set by outside code), calls it with this XHasElems_NumberOfReferences instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_NumberOfReferences instance.
func (me *XHasElems_NumberOfReferences) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_NumberOfReferences; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_OtherAbstract struct {
	OtherAbstract *TOtherAbstract `xml:"OtherAbstract"`
}

//	If the WalkHandlers.XHasElem_OtherAbstract function is not nil (ie. was set by outside code), calls it with this XHasElem_OtherAbstract instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_OtherAbstract instance.
func (me *XHasElem_OtherAbstract) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_OtherAbstract; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OtherAbstract.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_OtherID struct {
	OtherID *TOtherID `xml:"OtherID"`
}

//	If the WalkHandlers.XHasElem_OtherID function is not nil (ie. was set by outside code), calls it with this XHasElem_OtherID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_OtherID instance.
func (me *XHasElem_OtherID) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_OtherID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OtherID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Pagination struct {
	Paginations []*TPagination `xml:"Pagination"`
}

//	If the WalkHandlers.XHasElems_Pagination function is not nil (ie. was set by outside code), calls it with this XHasElems_Pagination instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Pagination instance.
func (me *XHasElems_Pagination) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Pagination; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Paginations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_PersonalNameSubject struct {
	PersonalNameSubject *TPersonalNameSubject `xml:"PersonalNameSubject"`
}

//	If the WalkHandlers.XHasElem_PersonalNameSubject function is not nil (ie. was set by outside code), calls it with this XHasElem_PersonalNameSubject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_PersonalNameSubject instance.
func (me *XHasElem_PersonalNameSubject) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_PersonalNameSubject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PersonalNameSubject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_PersonalNameSubjectList struct {
	PersonalNameSubjectLists []*TPersonalNameSubjectList `xml:"PersonalNameSubjectList"`
}

//	If the WalkHandlers.XHasElems_PersonalNameSubjectList function is not nil (ie. was set by outside code), calls it with this XHasElems_PersonalNameSubjectList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_PersonalNameSubjectList instance.
func (me *XHasElems_PersonalNameSubjectList) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_PersonalNameSubjectList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PersonalNameSubjectLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_PubDate struct {
	PubDates []*TPubDate `xml:"PubDate"`
}

//	If the WalkHandlers.XHasElems_PubDate function is not nil (ie. was set by outside code), calls it with this XHasElems_PubDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_PubDate instance.
func (me *XHasElems_PubDate) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_PubDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PubDates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_PublicationType struct {
	PublicationType *TPublicationType `xml:"PublicationType"`
}

//	If the WalkHandlers.XHasElem_PublicationType function is not nil (ie. was set by outside code), calls it with this XHasElem_PublicationType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_PublicationType instance.
func (me *XHasElem_PublicationType) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_PublicationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PublicationType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_PublicationTypeList struct {
	PublicationTypeLists []*TPublicationTypeList `xml:"PublicationTypeList"`
}

//	If the WalkHandlers.XHasElems_PublicationTypeList function is not nil (ie. was set by outside code), calls it with this XHasElems_PublicationTypeList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_PublicationTypeList instance.
func (me *XHasElems_PublicationTypeList) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_PublicationTypeList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PublicationTypeLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_QualifierName struct {
	QualifierName *TQualifierName `xml:"QualifierName"`
}

//	If the WalkHandlers.XHasElem_QualifierName function is not nil (ie. was set by outside code), calls it with this XHasElem_QualifierName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_QualifierName instance.
func (me *XHasElem_QualifierName) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_QualifierName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.QualifierName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_RefSource struct {
	RefSources []xsdt.String `xml:"RefSource"`
}

//	If the WalkHandlers.XHasElems_RefSource function is not nil (ie. was set by outside code), calls it with this XHasElems_RefSource instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_RefSource instance.
func (me *XHasElems_RefSource) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_RefSource; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_RegistryNumber struct {
	RegistryNumbers []xsdt.String `xml:"RegistryNumber"`
}

//	If the WalkHandlers.XHasElems_RegistryNumber function is not nil (ie. was set by outside code), calls it with this XHasElems_RegistryNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_RegistryNumber instance.
func (me *XHasElems_RegistryNumber) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_RegistryNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Season struct {
	Seasons []xsdt.String `xml:"Season"`
}

//	If the WalkHandlers.XHasElems_Season function is not nil (ie. was set by outside code), calls it with this XHasElems_Season instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Season instance.
func (me *XHasElems_Season) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Season; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_SpaceFlightMission struct {
	SpaceFlightMission xsdt.String `xml:"SpaceFlightMission"`
}

//	If the WalkHandlers.XHasElem_SpaceFlightMission function is not nil (ie. was set by outside code), calls it with this XHasElem_SpaceFlightMission instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_SpaceFlightMission instance.
func (me *XHasElem_SpaceFlightMission) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_SpaceFlightMission; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_StartPage struct {
	StartPages []xsdt.String `xml:"StartPage"`
}

//	If the WalkHandlers.XHasElems_StartPage function is not nil (ie. was set by outside code), calls it with this XHasElems_StartPage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_StartPage instance.
func (me *XHasElems_StartPage) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_StartPage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Suffix struct {
	Suffixs []*Ttext `xml:"Suffix"`
}

//	If the WalkHandlers.XHasElems_Suffix function is not nil (ie. was set by outside code), calls it with this XHasElems_Suffix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Suffix instance.
func (me *XHasElems_Suffix) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Suffix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Suffixs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_SupplMeshList struct {
	SupplMeshLists []*TSupplMeshList `xml:"SupplMeshList"`
}

//	If the WalkHandlers.XHasElems_SupplMeshList function is not nil (ie. was set by outside code), calls it with this XHasElems_SupplMeshList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_SupplMeshList instance.
func (me *XHasElems_SupplMeshList) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_SupplMeshList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SupplMeshLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_SupplMeshName struct {
	SupplMeshName *TSupplMeshName `xml:"SupplMeshName"`
}

//	If the WalkHandlers.XHasElem_SupplMeshName function is not nil (ie. was set by outside code), calls it with this XHasElem_SupplMeshName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_SupplMeshName instance.
func (me *XHasElem_SupplMeshName) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_SupplMeshName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SupplMeshName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Title struct {
	Titles []xsdt.String `xml:"Title"`
}

//	If the WalkHandlers.XHasElems_Title function is not nil (ie. was set by outside code), calls it with this XHasElems_Title instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Title instance.
func (me *XHasElems_Title) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Title; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_VernacularTitle struct {
	VernacularTitles []*Ttext `xml:"VernacularTitle"`
}

//	If the WalkHandlers.XHasElems_VernacularTitle function is not nil (ie. was set by outside code), calls it with this XHasElems_VernacularTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_VernacularTitle instance.
func (me *XHasElems_VernacularTitle) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_VernacularTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.VernacularTitles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Volume struct {
	Volumes []xsdt.String `xml:"Volume"`
}

//	If the WalkHandlers.XHasElems_Volume function is not nil (ie. was set by outside code), calls it with this XHasElems_Volume instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Volume instance.
func (me *XHasElems_Volume) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Volume; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Year struct {
	Years []xsdt.String `xml:"Year"`
}

//	If the WalkHandlers.XHasElems_Year function is not nil (ie. was set by outside code), calls it with this XHasElems_Year instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Year instance.
func (me *XHasElems_Year) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Year; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_DeleteCitation struct {
	DeleteCitations []*TDeleteCitation `xml:"DeleteCitation"`
}

//	If the WalkHandlers.XHasElems_DeleteCitation function is not nil (ie. was set by outside code), calls it with this XHasElems_DeleteCitation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_DeleteCitation instance.
func (me *XHasElems_DeleteCitation) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_DeleteCitation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DeleteCitations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_BookDocument struct {
	BookDocuments []*TBookDocument `xml:"BookDocument"`
}

//	If the WalkHandlers.XHasElems_BookDocument function is not nil (ie. was set by outside code), calls it with this XHasElems_BookDocument instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_BookDocument instance.
func (me *XHasElems_BookDocument) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_BookDocument; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BookDocuments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDeleteDocument struct {
	XHasElems_Pmid
}

//	If the WalkHandlers.TDeleteDocument function is not nil (ie. was set by outside code), calls it with this TDeleteDocument instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TDeleteDocument instance.
func (me *TDeleteDocument) Walk() (err error) {
	if fn := WalkHandlers.TDeleteDocument; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_Pmid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_DeleteDocument struct {
	DeleteDocument *TDeleteDocument `xml:"DeleteDocument"`
}

//	If the WalkHandlers.XHasElem_DeleteDocument function is not nil (ie. was set by outside code), calls it with this XHasElem_DeleteDocument instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_DeleteDocument instance.
func (me *XHasElem_DeleteDocument) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_DeleteDocument; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DeleteDocument.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TBookDocumentSet struct {
	XHasElems_BookDocument

	XHasElem_DeleteDocument
}

//	If the WalkHandlers.TBookDocumentSet function is not nil (ie. was set by outside code), calls it with this TBookDocumentSet instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TBookDocumentSet instance.
func (me *TBookDocumentSet) Walk() (err error) {
	if fn := WalkHandlers.TBookDocumentSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_BookDocument.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XHasElem_DeleteDocument.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_BookDocumentSet struct {
	BookDocumentSet *TBookDocumentSet `xml:"BookDocumentSet"`
}

//	If the WalkHandlers.XHasElem_BookDocumentSet function is not nil (ie. was set by outside code), calls it with this XHasElem_BookDocumentSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_BookDocumentSet instance.
func (me *XHasElem_BookDocumentSet) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_BookDocumentSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BookDocumentSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_BookDocumentSet struct {
	BookDocumentSets []*TBookDocumentSet `xml:"BookDocumentSet"`
}

//	If the WalkHandlers.XHasElems_BookDocumentSet function is not nil (ie. was set by outside code), calls it with this XHasElems_BookDocumentSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_BookDocumentSet instance.
func (me *XHasElems_BookDocumentSet) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_BookDocumentSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BookDocumentSets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Book struct {
	Books []*TBook `xml:"Book"`
}

//	If the WalkHandlers.XHasElems_Book function is not nil (ie. was set by outside code), calls it with this XHasElems_Book instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Book instance.
func (me *XHasElems_Book) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Book; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Books {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Publisher struct {
	Publishers []*TPublisher `xml:"Publisher"`
}

//	If the WalkHandlers.XHasElems_Publisher function is not nil (ie. was set by outside code), calls it with this XHasElems_Publisher instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Publisher instance.
func (me *XHasElems_Publisher) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Publisher; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Publishers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_PublisherName struct {
	PublisherNames []*Ttext `xml:"PublisherName"`
}

//	If the WalkHandlers.XHasElems_PublisherName function is not nil (ie. was set by outside code), calls it with this XHasElems_PublisherName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_PublisherName instance.
func (me *XHasElems_PublisherName) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_PublisherName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PublisherNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_PublisherLocation struct {
	PublisherLocations []xsdt.String `xml:"PublisherLocation"`
}

//	If the WalkHandlers.XHasElems_PublisherLocation function is not nil (ie. was set by outside code), calls it with this XHasElems_PublisherLocation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_PublisherLocation instance.
func (me *XHasElems_PublisherLocation) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_PublisherLocation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_BookTitle struct {
	BookTitles []*TBookTitle `xml:"BookTitle"`
}

//	If the WalkHandlers.XHasElems_BookTitle function is not nil (ie. was set by outside code), calls it with this XHasElems_BookTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_BookTitle instance.
func (me *XHasElems_BookTitle) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_BookTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BookTitles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_ContributionDate struct {
	ContributionDates []*TContributionDate `xml:"ContributionDate"`
}

//	If the WalkHandlers.XHasElems_ContributionDate function is not nil (ie. was set by outside code), calls it with this XHasElems_ContributionDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_ContributionDate instance.
func (me *XHasElems_ContributionDate) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_ContributionDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ContributionDates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_BeginningDate struct {
	BeginningDates []*TBeginningDate `xml:"BeginningDate"`
}

//	If the WalkHandlers.XHasElems_BeginningDate function is not nil (ie. was set by outside code), calls it with this XHasElems_BeginningDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_BeginningDate instance.
func (me *XHasElems_BeginningDate) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_BeginningDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BeginningDates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_EndingDate struct {
	EndingDates []*TEndingDate `xml:"EndingDate"`
}

//	If the WalkHandlers.XHasElems_EndingDate function is not nil (ie. was set by outside code), calls it with this XHasElems_EndingDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_EndingDate instance.
func (me *XHasElems_EndingDate) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_EndingDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EndingDates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_VolumeTitle struct {
	VolumeTitles []*Ttext `xml:"VolumeTitle"`
}

//	If the WalkHandlers.XHasElems_VolumeTitle function is not nil (ie. was set by outside code), calls it with this XHasElems_VolumeTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_VolumeTitle instance.
func (me *XHasElems_VolumeTitle) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_VolumeTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.VolumeTitles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Edition struct {
	Editions []xsdt.String `xml:"Edition"`
}

//	If the WalkHandlers.XHasElems_Edition function is not nil (ie. was set by outside code), calls it with this XHasElems_Edition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Edition instance.
func (me *XHasElems_Edition) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Edition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_CollectionTitle struct {
	CollectionTitles []*TCollectionTitle `xml:"CollectionTitle"`
}

//	If the WalkHandlers.XHasElems_CollectionTitle function is not nil (ie. was set by outside code), calls it with this XHasElems_CollectionTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_CollectionTitle instance.
func (me *XHasElems_CollectionTitle) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_CollectionTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CollectionTitles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Isbn struct {
	Isbn xsdt.String `xml:"Isbn"`
}

//	If the WalkHandlers.XHasElem_Isbn function is not nil (ie. was set by outside code), calls it with this XHasElem_Isbn instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_Isbn instance.
func (me *XHasElem_Isbn) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Isbn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Medium struct {
	Mediums []xsdt.String `xml:"Medium"`
}

//	If the WalkHandlers.XHasElems_Medium function is not nil (ie. was set by outside code), calls it with this XHasElems_Medium instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Medium instance.
func (me *XHasElems_Medium) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Medium; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_ReportNumber struct {
	ReportNumbers []xsdt.String `xml:"ReportNumber"`
}

//	If the WalkHandlers.XHasElems_ReportNumber function is not nil (ie. was set by outside code), calls it with this XHasElems_ReportNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_ReportNumber instance.
func (me *XHasElems_ReportNumber) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_ReportNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_ContractNumber struct {
	ContractNumber xsdt.String `xml:"ContractNumber"`
}

//	If the WalkHandlers.XHasElem_ContractNumber function is not nil (ie. was set by outside code), calls it with this XHasElem_ContractNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_ContractNumber instance.
func (me *XHasElem_ContractNumber) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_ContractNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_ContractNumber struct {
	ContractNumbers []xsdt.String `xml:"ContractNumber"`
}

//	If the WalkHandlers.XHasElems_ContractNumber function is not nil (ie. was set by outside code), calls it with this XHasElems_ContractNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_ContractNumber instance.
func (me *XHasElems_ContractNumber) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_ContractNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_CitationString struct {
	CitationStrings []*Ttext `xml:"CitationString"`
}

//	If the WalkHandlers.XHasElems_CitationString function is not nil (ie. was set by outside code), calls it with this XHasElems_CitationString instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_CitationString instance.
func (me *XHasElems_CitationString) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_CitationString; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CitationStrings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_DeleteDocument struct {
	DeleteDocuments []*TDeleteDocument `xml:"DeleteDocument"`
}

//	If the WalkHandlers.XHasElems_DeleteDocument function is not nil (ie. was set by outside code), calls it with this XHasElems_DeleteDocument instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_DeleteDocument instance.
func (me *XHasElems_DeleteDocument) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_DeleteDocument; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DeleteDocuments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_PubmedBookArticle struct {
	PubmedBookArticle *TPubmedBookArticle `xml:"PubmedBookArticle"`
}

//	If the WalkHandlers.XHasElem_PubmedBookArticle function is not nil (ie. was set by outside code), calls it with this XHasElem_PubmedBookArticle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_PubmedBookArticle instance.
func (me *XHasElem_PubmedBookArticle) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_PubmedBookArticle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PubmedBookArticle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_PubmedBookData struct {
	PubmedBookDatas []*TPubmedBookData `xml:"PubmedBookData"`
}

//	If the WalkHandlers.XHasElems_PubmedBookData function is not nil (ie. was set by outside code), calls it with this XHasElems_PubmedBookData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_PubmedBookData instance.
func (me *XHasElems_PubmedBookData) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_PubmedBookData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PubmedBookDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_Sections struct {
	Sectionses []*TSections `xml:"Sections"`
}

//	If the WalkHandlers.XHasElems_Sections function is not nil (ie. was set by outside code), calls it with this XHasElems_Sections instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_Sections instance.
func (me *XHasElems_Sections) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_Sections; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Sectionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Section struct {
	Section *TSection `xml:"Section"`
}

//	If the WalkHandlers.XHasElem_Section function is not nil (ie. was set by outside code), calls it with this XHasElem_Section instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_Section instance.
func (me *XHasElem_Section) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Section; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Section.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_SectionTitle struct {
	SectionTitles []*TSectionTitle `xml:"SectionTitle"`
}

//	If the WalkHandlers.XHasElems_SectionTitle function is not nil (ie. was set by outside code), calls it with this XHasElems_SectionTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_SectionTitle instance.
func (me *XHasElems_SectionTitle) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_SectionTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SectionTitles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPubmedBookArticleSet struct {
	XHasElems_PubmedBookArticle
}

//	If the WalkHandlers.TPubmedBookArticleSet function is not nil (ie. was set by outside code), calls it with this TPubmedBookArticleSet instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TPubmedBookArticleSet instance.
func (me *TPubmedBookArticleSet) Walk() (err error) {
	if fn := WalkHandlers.TPubmedBookArticleSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XHasElems_PubmedBookArticle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_PubmedBookArticleSet struct {
	PubmedBookArticleSet *TPubmedBookArticleSet `xml:"PubmedBookArticleSet"`
}

//	If the WalkHandlers.XHasElem_PubmedBookArticleSet function is not nil (ie. was set by outside code), calls it with this XHasElem_PubmedBookArticleSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_PubmedBookArticleSet instance.
func (me *XHasElem_PubmedBookArticleSet) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_PubmedBookArticleSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PubmedBookArticleSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElems_PubmedBookArticleSet struct {
	PubmedBookArticleSets []*TPubmedBookArticleSet `xml:"PubmedBookArticleSet"`
}

//	If the WalkHandlers.XHasElems_PubmedBookArticleSet function is not nil (ie. was set by outside code), calls it with this XHasElems_PubmedBookArticleSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElems_PubmedBookArticleSet instance.
func (me *XHasElems_PubmedBookArticleSet) Walk() (err error) {
	if fn := WalkHandlers.XHasElems_PubmedBookArticleSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PubmedBookArticleSets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_ItemList struct {
	ItemList *TItemList `xml:"ItemList"`
}

//	If the WalkHandlers.XHasElem_ItemList function is not nil (ie. was set by outside code), calls it with this XHasElem_ItemList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XHasElem_ItemList instance.
func (me *XHasElem_ItemList) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_ItemList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ItemList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XHasElem_Item struct {
	Item xsdt.String `xml:"Item"`
}

//	If the WalkHandlers.XHasElem_Item function is not nil (ie. was set by outside code), calls it with this XHasElem_Item instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XHasElem_Item instance.
func (me *XHasElem_Item) Walk() (err error) {
	if fn := WalkHandlers.XHasElem_Item; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPubStatusUnion5 xsdt.Token

//	Since TPubStatusUnion5 is just a simple String type, this merely sets the current value from the specified string.
func (me *TPubStatusUnion5) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TPubStatusUnion5 is just a simple String type, this merely returns the current string value.
func (me TPubStatusUnion5) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TPubStatusUnion5's alias type xsdt.Token.
func (me TPubStatusUnion5) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TPubStatusUnion5 is "aheadofprint".
func (me TPubStatusUnion5) IsAheadofprint() bool { return me.String() == "aheadofprint" }

type TPubStatusUnion3 xsdt.Token

//	Since TPubStatusUnion3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TPubStatusUnion3) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TPubStatusUnion3 is just a simple String type, this merely returns the current string value.
func (me TPubStatusUnion3) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TPubStatusUnion3's alias type xsdt.Token.
func (me TPubStatusUnion3) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TPubStatusUnion3 is "ppublish".
func (me TPubStatusUnion3) IsPpublish() bool { return me.String() == "ppublish" }

type TPubStatusUnion xsdt.Token

//	Returns true if the value of this enumerated TPubStatusUnion is "received".
func (me TPubStatusUnion) IsReceived() bool { return me.String() == "received" }

//	Since TPubStatusUnion is just a simple String type, this merely sets the current value from the specified string.
func (me *TPubStatusUnion) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TPubStatusUnion is just a simple String type, this merely returns the current string value.
func (me TPubStatusUnion) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TPubStatusUnion's alias type xsdt.Token.
func (me TPubStatusUnion) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type TpubStatusInt xsdt.Token

//	Returns true if the value of this enumerated TpubStatusInt is "pmc".
func (me TpubStatusInt) IsPmc() bool { return me.String() == "pmc" }

//	Returns true if the value of this enumerated TpubStatusInt is "pmcr".
func (me TpubStatusInt) IsPmcr() bool { return me.String() == "pmcr" }

//	Returns true if the value of this enumerated TpubStatusInt is "pubmedr".
func (me TpubStatusInt) IsPubmedr() bool { return me.String() == "pubmedr" }

//	Returns true if the value of this enumerated TpubStatusInt is "medliner".
func (me TpubStatusInt) IsMedliner() bool { return me.String() == "medliner" }

//	Returns true if the value of this enumerated TpubStatusInt is "entrez".
func (me TpubStatusInt) IsEntrez() bool { return me.String() == "entrez" }

//	Returns true if the value of this enumerated TpubStatusInt is "pmc-release".
func (me TpubStatusInt) IsPmcRelease() bool { return me.String() == "pmc-release" }

//	Since TpubStatusInt is just a simple String type, this merely sets the current value from the specified string.
func (me *TpubStatusInt) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TpubStatusInt is just a simple String type, this merely returns the current string value.
func (me TpubStatusInt) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TpubStatusInt is "premedline".
func (me TpubStatusInt) IsPremedline() bool { return me.String() == "premedline" }

//	Returns true if the value of this enumerated TpubStatusInt is "medline".
func (me TpubStatusInt) IsMedline() bool { return me.String() == "medline" }

//	This convenience method just performs a simple type conversion to TpubStatusInt's alias type xsdt.Token.
func (me TpubStatusInt) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TpubStatusInt is "pubmed".
func (me TpubStatusInt) IsPubmed() bool { return me.String() == "pubmed" }

type TPubStatusUnion4 xsdt.Token

//	Since TPubStatusUnion4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TPubStatusUnion4) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TPubStatusUnion4 is just a simple String type, this merely returns the current string value.
func (me TPubStatusUnion4) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TPubStatusUnion4's alias type xsdt.Token.
func (me TPubStatusUnion4) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TPubStatusUnion4 is "revised".
func (me TPubStatusUnion4) IsRevised() bool { return me.String() == "revised" }

type TPubStatusUnion1 xsdt.Token

//	Since TPubStatusUnion1 is just a simple String type, this merely returns the current string value.
func (me TPubStatusUnion1) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TPubStatusUnion1's alias type xsdt.Token.
func (me TPubStatusUnion1) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TPubStatusUnion1 is "accepted".
func (me TPubStatusUnion1) IsAccepted() bool { return me.String() == "accepted" }

//	Since TPubStatusUnion1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TPubStatusUnion1) Set(s string) { (*xsdt.Token)(me).Set(s) }

type TPubStatusUnion2 xsdt.Token

//	Since TPubStatusUnion2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TPubStatusUnion2) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TPubStatusUnion2 is just a simple String type, this merely returns the current string value.
func (me TPubStatusUnion2) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TPubStatusUnion2's alias type xsdt.Token.
func (me TPubStatusUnion2) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TPubStatusUnion2 is "epublish".
func (me TPubStatusUnion2) IsEpublish() bool { return me.String() == "epublish" }

type TPubStatusUnion6 xsdt.Token

//	Since TPubStatusUnion6 is just a simple String type, this merely sets the current value from the specified string.
func (me *TPubStatusUnion6) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TPubStatusUnion6 is just a simple String type, this merely returns the current string value.
func (me TPubStatusUnion6) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TPubStatusUnion6's alias type xsdt.Token.
func (me TPubStatusUnion6) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TPubStatusUnion6 is "retracted".
func (me TPubStatusUnion6) IsRetracted() bool { return me.String() == "retracted" }

type TPubStatusUnion7 xsdt.Token

//	TpubStatus is an XSD union-type of several types. This is a simple type conversion to TPubStatusUnion6, but keep in mind the actual value may or may not be a valid TPubStatusUnion6 value.
func (me TpubStatus) ToTPubStatusUnion6() TPubStatusUnion6 { return TPubStatusUnion6(me) }

//	Since TPubStatusUnion7 is just a simple String type, this merely sets the current value from the specified string.
func (me *TPubStatusUnion7) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TPubStatusUnion7 is just a simple String type, this merely returns the current string value.
func (me TPubStatusUnion7) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TPubStatusUnion7's alias type xsdt.Token.
func (me TPubStatusUnion7) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	TpubStatus is an XSD union-type of several types. This is a simple type conversion to TPubStatusUnion, but keep in mind the actual value may or may not be a valid TPubStatusUnion value.
func (me TpubStatus) ToTPubStatusUnion() TPubStatusUnion { return TPubStatusUnion(me) }

//	TpubStatus is an XSD union-type of several types. This is a simple type conversion to TPubStatusUnion1, but keep in mind the actual value may or may not be a valid TPubStatusUnion1 value.
func (me TpubStatus) ToTPubStatusUnion1() TPubStatusUnion1 { return TPubStatusUnion1(me) }

//	TpubStatus is an XSD union-type of several types. This is a simple type conversion to TPubStatusUnion2, but keep in mind the actual value may or may not be a valid TPubStatusUnion2 value.
func (me TpubStatus) ToTPubStatusUnion2() TPubStatusUnion2 { return TPubStatusUnion2(me) }

//	TpubStatus is an XSD union-type of several types. This is a simple type conversion to TPubStatusUnion3, but keep in mind the actual value may or may not be a valid TPubStatusUnion3 value.
func (me TpubStatus) ToTPubStatusUnion3() TPubStatusUnion3 { return TPubStatusUnion3(me) }

//	TpubStatus is an XSD union-type of several types. This is a simple type conversion to TPubStatusUnion7, but keep in mind the actual value may or may not be a valid TPubStatusUnion7 value.
func (me TpubStatus) ToTPubStatusUnion7() TPubStatusUnion7 { return TPubStatusUnion7(me) }

//	Returns true if the value of this enumerated TPubStatusUnion7 is "ecollection".
func (me TPubStatusUnion7) IsEcollection() bool { return me.String() == "ecollection" }

//	TpubStatus is an XSD union-type of several types. This is a simple type conversion to TpubStatusInt, but keep in mind the actual value may or may not be a valid TpubStatusInt value.
func (me TpubStatus) ToTpubStatusInt() TpubStatusInt { return TpubStatusInt(me) }

//	TpubStatus is an XSD union-type of several types. This is a simple type conversion to TPubStatusUnion4, but keep in mind the actual value may or may not be a valid TPubStatusUnion4 value.
func (me TpubStatus) ToTPubStatusUnion4() TPubStatusUnion4 { return TPubStatusUnion4(me) }

//	TpubStatus is an XSD union-type of several types. This is a simple type conversion to TPubStatusUnion5, but keep in mind the actual value may or may not be a valid TPubStatusUnion5 value.
func (me TpubStatus) ToTPubStatusUnion5() TPubStatusUnion5 { return TPubStatusUnion5(me) }

type TArtIdTypeUnion4 xsdt.Token

//	Since TArtIdTypeUnion4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TArtIdTypeUnion4) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TArtIdTypeUnion4 is just a simple String type, this merely returns the current string value.
func (me TArtIdTypeUnion4) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TArtIdTypeUnion4's alias type xsdt.Token.
func (me TArtIdTypeUnion4) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TArtIdTypeUnion4 is "pmc".
func (me TArtIdTypeUnion4) IsPmc() bool { return me.String() == "pmc" }

type TArtIdTypeUnion3 xsdt.Token

//	Since TArtIdTypeUnion3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TArtIdTypeUnion3) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TArtIdTypeUnion3 is just a simple String type, this merely returns the current string value.
func (me TArtIdTypeUnion3) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TArtIdTypeUnion3's alias type xsdt.Token.
func (me TArtIdTypeUnion3) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TArtIdTypeUnion3 is "pmpid".
func (me TArtIdTypeUnion3) IsPmpid() bool { return me.String() == "pmpid" }

type TartIdTypeInt xsdt.Token

//	This convenience method just performs a simple type conversion to TartIdTypeInt's alias type xsdt.Token.
func (me TartIdTypeInt) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TartIdTypeInt is "pubmed".
func (me TartIdTypeInt) IsPubmed() bool { return me.String() == "pubmed" }

//	Returns true if the value of this enumerated TartIdTypeInt is "medline".
func (me TartIdTypeInt) IsMedline() bool { return me.String() == "medline" }

//	Returns true if the value of this enumerated TartIdTypeInt is "pmcid".
func (me TartIdTypeInt) IsPmcid() bool { return me.String() == "pmcid" }

//	Returns true if the value of this enumerated TartIdTypeInt is "pmcbook".
func (me TartIdTypeInt) IsPmcbook() bool { return me.String() == "pmcbook" }

//	Returns true if the value of this enumerated TartIdTypeInt is "bookaccession".
func (me TartIdTypeInt) IsBookaccession() bool { return me.String() == "bookaccession" }

//	Since TartIdTypeInt is just a simple String type, this merely sets the current value from the specified string.
func (me *TartIdTypeInt) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TartIdTypeInt is just a simple String type, this merely returns the current string value.
func (me TartIdTypeInt) String() string { return xsdt.Token(me).String() }

type TArtIdTypeUnion xsdt.Token

//	Since TArtIdTypeUnion is just a simple String type, this merely sets the current value from the specified string.
func (me *TArtIdTypeUnion) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TArtIdTypeUnion is just a simple String type, this merely returns the current string value.
func (me TArtIdTypeUnion) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TArtIdTypeUnion's alias type xsdt.Token.
func (me TArtIdTypeUnion) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TArtIdTypeUnion is "doi".
func (me TArtIdTypeUnion) IsDoi() bool { return me.String() == "doi" }

type TArtIdTypeUnion1 xsdt.Token

//	Since TArtIdTypeUnion1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TArtIdTypeUnion1) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TArtIdTypeUnion1 is just a simple String type, this merely returns the current string value.
func (me TArtIdTypeUnion1) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TArtIdTypeUnion1's alias type xsdt.Token.
func (me TArtIdTypeUnion1) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TArtIdTypeUnion1 is "pii".
func (me TArtIdTypeUnion1) IsPii() bool { return me.String() == "pii" }

type TArtIdTypeUnion2 xsdt.Token

//	Since TArtIdTypeUnion2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TArtIdTypeUnion2) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TArtIdTypeUnion2 is just a simple String type, this merely returns the current string value.
func (me TArtIdTypeUnion2) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TArtIdTypeUnion2's alias type xsdt.Token.
func (me TArtIdTypeUnion2) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TArtIdTypeUnion2 is "pmcpid".
func (me TArtIdTypeUnion2) IsPmcpid() bool { return me.String() == "pmcpid" }

type TArtIdTypeUnion5 xsdt.Token

//	Since TArtIdTypeUnion5 is just a simple String type, this merely sets the current value from the specified string.
func (me *TArtIdTypeUnion5) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TArtIdTypeUnion5 is just a simple String type, this merely returns the current string value.
func (me TArtIdTypeUnion5) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TArtIdTypeUnion5's alias type xsdt.Token.
func (me TArtIdTypeUnion5) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TArtIdTypeUnion5 is "mid".
func (me TArtIdTypeUnion5) IsMid() bool { return me.String() == "mid" }

type TArtIdTypeUnion6 xsdt.Token

//	TartIdType is an XSD union-type of several types. This is a simple type conversion to TArtIdTypeUnion6, but keep in mind the actual value may or may not be a valid TArtIdTypeUnion6 value.
func (me TartIdType) ToTArtIdTypeUnion6() TArtIdTypeUnion6 { return TArtIdTypeUnion6(me) }

//	Since TArtIdTypeUnion6 is just a simple String type, this merely sets the current value from the specified string.
func (me *TArtIdTypeUnion6) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Returns true if the value of this enumerated TArtIdTypeUnion6 is "sici".
func (me TArtIdTypeUnion6) IsSici() bool { return me.String() == "sici" }

//	TartIdType is an XSD union-type of several types. This is a simple type conversion to TArtIdTypeUnion3, but keep in mind the actual value may or may not be a valid TArtIdTypeUnion3 value.
func (me TartIdType) ToTArtIdTypeUnion3() TArtIdTypeUnion3 { return TArtIdTypeUnion3(me) }

//	TartIdType is an XSD union-type of several types. This is a simple type conversion to TArtIdTypeUnion4, but keep in mind the actual value may or may not be a valid TArtIdTypeUnion4 value.
func (me TartIdType) ToTArtIdTypeUnion4() TArtIdTypeUnion4 { return TArtIdTypeUnion4(me) }

//	TartIdType is an XSD union-type of several types. This is a simple type conversion to TArtIdTypeUnion5, but keep in mind the actual value may or may not be a valid TArtIdTypeUnion5 value.
func (me TartIdType) ToTArtIdTypeUnion5() TArtIdTypeUnion5 { return TArtIdTypeUnion5(me) }

//	TartIdType is an XSD union-type of several types. This is a simple type conversion to TArtIdTypeUnion2, but keep in mind the actual value may or may not be a valid TArtIdTypeUnion2 value.
func (me TartIdType) ToTArtIdTypeUnion2() TArtIdTypeUnion2 { return TArtIdTypeUnion2(me) }

//	Since TArtIdTypeUnion6 is just a simple String type, this merely returns the current string value.
func (me TArtIdTypeUnion6) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TArtIdTypeUnion6's alias type xsdt.Token.
func (me TArtIdTypeUnion6) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	TartIdType is an XSD union-type of several types. This is a simple type conversion to TartIdTypeInt, but keep in mind the actual value may or may not be a valid TartIdTypeInt value.
func (me TartIdType) ToTartIdTypeInt() TartIdTypeInt { return TartIdTypeInt(me) }

//	TartIdType is an XSD union-type of several types. This is a simple type conversion to TArtIdTypeUnion, but keep in mind the actual value may or may not be a valid TArtIdTypeUnion value.
func (me TartIdType) ToTArtIdTypeUnion() TArtIdTypeUnion { return TArtIdTypeUnion(me) }

//	TartIdType is an XSD union-type of several types. This is a simple type conversion to TArtIdTypeUnion1, but keep in mind the actual value may or may not be a valid TArtIdTypeUnion1 value.
func (me TartIdType) ToTArtIdTypeUnion1() TArtIdTypeUnion1 { return TArtIdTypeUnion1(me) }

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 357 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XWalkHandlers{}
)

//	Provides 357 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XWalkHandlers struct {
	XHasElem_Isbn                     func(*XHasElem_Isbn, bool) error
	TGeneralNote                      func(*TGeneralNote, bool) error
	TChemicalList                     func(*TChemicalList, bool) error
	XHasElem_DataBankName             func(*XHasElem_DataBankName, bool) error
	TPublicationType                  func(*TPublicationType, bool) error
	XHasElem_B                        func(*XHasElem_B, bool) error
	XHasElems_AccessionNumberList     func(*XHasElems_AccessionNumberList, bool) error
	XHasElems_GeneSymbolList          func(*XHasElems_GeneSymbolList, bool) error
	XHasElem_PubmedBookArticle        func(*XHasElem_PubmedBookArticle, bool) error
	XHasElem_Section                  func(*XHasElem_Section, bool) error
	TCommentsCorrections              func(*TCommentsCorrections, bool) error
	XHasElem_ArticleTitle             func(*XHasElem_ArticleTitle, bool) error
	XHasElem_SupplMeshList            func(*XHasElem_SupplMeshList, bool) error
	XHasElems_Month                   func(*XHasElems_Month, bool) error
	XHasElem_Volume                   func(*XHasElem_Volume, bool) error
	TPubmedArticle                    func(*TPubmedArticle, bool) error
	TBeginningDate                    func(*TBeginningDate, bool) error
	TSectionTitle                     func(*TSectionTitle, bool) error
	XHasElems_Abstract                func(*XHasElems_Abstract, bool) error
	TBookDocumentSet                  func(*TBookDocumentSet, bool) error
	TIssn                             func(*TIssn, bool) error
	TMedlineJournalInfo               func(*TMedlineJournalInfo, bool) error
	XHasElem_BookDocumentSet          func(*XHasElem_BookDocumentSet, bool) error
	XHasElems_Sections                func(*XHasElems_Sections, bool) error
	XHasElems_I                       func(*XHasElems_I, bool) error
	XHasElem_MedlinePgn               func(*XHasElem_MedlinePgn, bool) error
	TnormalDate                       func(*TnormalDate, bool) error
	XHasElems_Identifier              func(*XHasElems_Identifier, bool) error
	XHasElem_PublicationTypeList      func(*XHasElem_PublicationTypeList, bool) error
	XHasElem_Country                  func(*XHasElem_Country, bool) error
	XHasElems_Note                    func(*XHasElems_Note, bool) error
	XHasCdata                         func(*XHasCdata, bool) error
	XHasElems_KeywordList             func(*XHasElems_KeywordList, bool) error
	XHasElem_Day                      func(*XHasElem_Day, bool) error
	XHasElems_ELocationID             func(*XHasElems_ELocationID, bool) error
	TPubDate                          func(*TPubDate, bool) error
	XHasElem_Hour                     func(*XHasElem_Hour, bool) error
	XHasElem_AbstractText             func(*XHasElem_AbstractText, bool) error
	XHasElem_ReportNumber             func(*XHasElem_ReportNumber, bool) error
	XHasElem_PubmedBookData           func(*XHasElem_PubmedBookData, bool) error
	XHasElems_PubmedData              func(*XHasElems_PubmedData, bool) error
	TPagination                       func(*TPagination, bool) error
	XHasElems_ISSNLinking             func(*XHasElems_ISSNLinking, bool) error
	XHasElems_SpaceFlightMission      func(*XHasElems_SpaceFlightMission, bool) error
	TJournalIssue                     func(*TJournalIssue, bool) error
	XHasElems_Pagination              func(*XHasElems_Pagination, bool) error
	XHasElem_Pmid                     func(*XHasElem_Pmid, bool) error
	XHasElem_Abstract                 func(*XHasElem_Abstract, bool) error
	XHasElem_Season                   func(*XHasElem_Season, bool) error
	TGeneSymbolList                   func(*TGeneSymbolList, bool) error
	XHasElem_Edition                  func(*XHasElem_Edition, bool) error
	XHasElems_MeshHeadingList         func(*XHasElems_MeshHeadingList, bool) error
	XHasElem_OtherAbstract            func(*XHasElem_OtherAbstract, bool) error
	XHasElems_CitationSubset          func(*XHasElems_CitationSubset, bool) error
	XHasElems_Hour                    func(*XHasElems_Hour, bool) error
	XHasElems_BookDocument            func(*XHasElems_BookDocument, bool) error
	XHasElems_Investigator            func(*XHasElems_Investigator, bool) error
	TPubMedPubDate                    func(*TPubMedPubDate, bool) error
	XHasElems_Second                  func(*XHasElems_Second, bool) error
	XHasElems_Initials                func(*XHasElems_Initials, bool) error
	XHasElem_Investigator             func(*XHasElem_Investigator, bool) error
	XHasElems_PersonalNameSubjectList func(*XHasElems_PersonalNameSubjectList, bool) error
	XHasElem_SupplMeshName            func(*XHasElem_SupplMeshName, bool) error
	XHasElem_ItemList                 func(*XHasElem_ItemList, bool) error
	XHasElems_GrantID                 func(*XHasElems_GrantID, bool) error
	TChemical                         func(*TChemical, bool) error
	XHasElems_QualifierName           func(*XHasElems_QualifierName, bool) error
	TAbstractText                     func(*TAbstractText, bool) error
	TPersonalNameSubjectList          func(*TPersonalNameSubjectList, bool) error
	XHasElem_Second                   func(*XHasElem_Second, bool) error
	XHasElem_ContributionDate         func(*XHasElem_ContributionDate, bool) error
	XHasElem_Sub                      func(*XHasElem_Sub, bool) error
	XHasElems_MedlineTA               func(*XHasElems_MedlineTA, bool) error
	XHasElems_Edition                 func(*XHasElems_Edition, bool) error
	XHasElem_NumberOfReferences       func(*XHasElem_NumberOfReferences, bool) error
	XHasElems_Format                  func(*XHasElems_Format, bool) error
	XHasElems_SupplMeshName           func(*XHasElems_SupplMeshName, bool) error
	XHasElem_BeginningDate            func(*XHasElem_BeginningDate, bool) error
	XHasElem_Param                    func(*XHasElem_Param, bool) error
	XHasElems_Minute                  func(*XHasElems_Minute, bool) error
	XHasElems_MedlineCitationSet      func(*XHasElems_MedlineCitationSet, bool) error
	XHasElem_QualifierName            func(*XHasElem_QualifierName, bool) error
	XHasElems_GeneralNote             func(*XHasElems_GeneralNote, bool) error
	XHasElems_AbstractText            func(*XHasElems_AbstractText, bool) error
	XHasElem_VernacularTitle          func(*XHasElem_VernacularTitle, bool) error
	XHasElem_ISOAbbreviation          func(*XHasElem_ISOAbbreviation, bool) error
	TPersonalNameSubject              func(*TPersonalNameSubject, bool) error
	TOtherAbstract                    func(*TOtherAbstract, bool) error
	XHasElem_ELocationID              func(*XHasElem_ELocationID, bool) error
	TDeleteDocument                   func(*TDeleteDocument, bool) error
	XHasElems_CitationString          func(*XHasElems_CitationString, bool) error
	XHasElem_CitationString           func(*XHasElem_CitationString, bool) error
	XHasElems_ChemicalList            func(*XHasElems_ChemicalList, bool) error
	XHasElem_Grant                    func(*XHasElem_Grant, bool) error
	XHasElem_EndPage                  func(*XHasElem_EndPage, bool) error
	XHasElem_Medium                   func(*XHasElem_Medium, bool) error
	XHasElem_PublicationStatus        func(*XHasElem_PublicationStatus, bool) error
	XHasElems_U                       func(*XHasElems_U, bool) error
	TKeyword                          func(*TKeyword, bool) error
	TAccessionNumberList              func(*TAccessionNumberList, bool) error
	XHasElem_AccessionNumberList      func(*XHasElem_AccessionNumberList, bool) error
	XHasElem_Issn                     func(*XHasElem_Issn, bool) error
	TAuthor                           func(*TAuthor, bool) error
	XHasElem_Article                  func(*XHasElem_Article, bool) error
	XHasElems_Param                   func(*XHasElems_Param, bool) error
	XHasElem_DateCreated              func(*XHasElem_DateCreated, bool) error
	XHasElem_MedlineDate              func(*XHasElem_MedlineDate, bool) error
	XHasElems_Grant                   func(*XHasElems_Grant, bool) error
	XHasElem_DateRevised              func(*XHasElem_DateRevised, bool) error
	XHasElems_Url                     func(*XHasElems_Url, bool) error
	XHasElem_CitationSubset           func(*XHasElem_CitationSubset, bool) error
	XHasElems_ISOAbbreviation         func(*XHasElems_ISOAbbreviation, bool) error
	XHasElems_Title                   func(*XHasElems_Title, bool) error
	XHasElem_ForeName                 func(*XHasElem_ForeName, bool) error
	XHasElem_AuthorList               func(*XHasElem_AuthorList, bool) error
	XHasElem_SectionTitle             func(*XHasElem_SectionTitle, bool) error
	XHasElem_AccessionNumber          func(*XHasElem_AccessionNumber, bool) error
	XHasElems_Article                 func(*XHasElems_Article, bool) error
	XHasElem_RefSource                func(*XHasElem_RefSource, bool) error
	XHasElem_Journal                  func(*XHasElem_Journal, bool) error
	XHasElems_Item                    func(*XHasElems_Item, bool) error
	XHasElems_Issue                   func(*XHasElems_Issue, bool) error
	XHasElems_PubDate                 func(*XHasElems_PubDate, bool) error
	XHasElem_NlmUniqueID              func(*XHasElem_NlmUniqueID, bool) error
	XHasElems_PublicationStatus       func(*XHasElems_PublicationStatus, bool) error
	XHasElem_GeneSymbol               func(*XHasElem_GeneSymbol, bool) error
	XHasElems_Suffix                  func(*XHasElems_Suffix, bool) error
	TAffiliationInfo                  func(*TAffiliationInfo, bool) error
	XHasElem_Minute                   func(*XHasElem_Minute, bool) error
	XHasElems_MedlineDate             func(*XHasElems_MedlineDate, bool) error
	XHasElem_Affiliation              func(*XHasElem_Affiliation, bool) error
	XHasElem_DescriptorName           func(*XHasElem_DescriptorName, bool) error
	XHasElem_SpaceFlightMission       func(*XHasElem_SpaceFlightMission, bool) error
	TPmid                             func(*TPmid, bool) error
	TInvestigatorList                 func(*TInvestigatorList, bool) error
	TArticle                          func(*TArticle, bool) error
	TSupplMeshName                    func(*TSupplMeshName, bool) error
	TSupplMeshList                    func(*TSupplMeshList, bool) error
	XHasElems_PubmedBookArticle       func(*XHasElems_PubmedBookArticle, bool) error
	XHasElem_DataBank                 func(*XHasElem_DataBank, bool) error
	XHasElem_ContractNumber           func(*XHasElem_ContractNumber, bool) error
	TQualifierName                    func(*TQualifierName, bool) error
	TPubmedBookData                   func(*TPubmedBookData, bool) error
	XHasElem_Chemical                 func(*XHasElem_Chemical, bool) error
	XHasElem_Initials                 func(*XHasElem_Initials, bool) error
	XHasElem_MedlineCitation          func(*XHasElem_MedlineCitation, bool) error
	XHasElems_ArticleId               func(*XHasElems_ArticleId, bool) error
	TPubmedArticleSet                 func(*TPubmedArticleSet, bool) error
	XHasElems_JournalIssue            func(*XHasElems_JournalIssue, bool) error
	XHasElems_LastName                func(*XHasElems_LastName, bool) error
	TSection                          func(*TSection, bool) error
	TItemList                         func(*TItemList, bool) error
	XHasElem_U                        func(*XHasElem_U, bool) error
	XHasElem_AffiliationInfo          func(*XHasElem_AffiliationInfo, bool) error
	XHasElems_DateCreated             func(*XHasElems_DateCreated, bool) error
	XHasElems_NlmUniqueID             func(*XHasElems_NlmUniqueID, bool) error
	XHasElems_StartPage               func(*XHasElems_StartPage, bool) error
	XHasElem_Keyword                  func(*XHasElem_Keyword, bool) error
	XHasElems_AffiliationInfo         func(*XHasElems_AffiliationInfo, bool) error
	XHasElems_OtherAbstract           func(*XHasElems_OtherAbstract, bool) error
	TCollectionTitle                  func(*TCollectionTitle, bool) error
	XHasElem_PublisherLocation        func(*XHasElem_PublisherLocation, bool) error
	TBookDocument                     func(*TBookDocument, bool) error
	XHasElems_PubmedArticleSet        func(*XHasElems_PubmedArticleSet, bool) error
	XHasElems_Country                 func(*XHasElems_Country, bool) error
	XHasElem_MeshHeading              func(*XHasElem_MeshHeading, bool) error
	XHasElem_CopyrightInformation     func(*XHasElem_CopyrightInformation, bool) error
	XHasElems_ObjectList              func(*XHasElems_ObjectList, bool) error
	TDeleteCitation                   func(*TDeleteCitation, bool) error
	XHasElem_Author                   func(*XHasElem_Author, bool) error
	XHasElems_Journal                 func(*XHasElems_Journal, bool) error
	XHasElem_OtherID                  func(*XHasElem_OtherID, bool) error
	XHasElems_PubmedBookArticleSet    func(*XHasElems_PubmedBookArticleSet, bool) error
	XHasElems_CommentsCorrections     func(*XHasElems_CommentsCorrections, bool) error
	XHasElems_PublicationType         func(*XHasElems_PublicationType, bool) error
	XHasElem_Title                    func(*XHasElem_Title, bool) error
	XHasElem_Pagination               func(*XHasElem_Pagination, bool) error
	XHasElem_PublisherName            func(*XHasElem_PublisherName, bool) error
	XHasElem_BookDocument             func(*XHasElem_BookDocument, bool) error
	XHasElems_CopyrightInformation    func(*XHasElems_CopyrightInformation, bool) error
	XHasElems_MeshHeading             func(*XHasElems_MeshHeading, bool) error
	XHasElem_StartPage                func(*XHasElem_StartPage, bool) error
	TPubmedData                       func(*TPubmedData, bool) error
	XHasElem_KeywordList              func(*XHasElem_KeywordList, bool) error
	XHasElems_Sup                     func(*XHasElems_Sup, bool) error
	TAbstract                         func(*TAbstract, bool) error
	XHasElem_History                  func(*XHasElem_History, bool) error
	XHasElem_PubmedData               func(*XHasElem_PubmedData, bool) error
	XHasElem_I                        func(*XHasElem_I, bool) error
	XHasElems_PublisherName           func(*XHasElems_PublisherName, bool) error
	XHasElems_PublisherLocation       func(*XHasElems_PublisherLocation, bool) error
	XHasElem_DateCompleted            func(*XHasElem_DateCompleted, bool) error
	XHasElem_MedlineTA                func(*XHasElem_MedlineTA, bool) error
	XHasElems_Agency                  func(*XHasElems_Agency, bool) error
	XHasElems_CollectionTitle         func(*XHasElems_CollectionTitle, bool) error
	XHasElem_RegistryNumber           func(*XHasElem_RegistryNumber, bool) error
	TDataBankList                     func(*TDataBankList, bool) error
	XHasElem_ObjectList               func(*XHasElem_ObjectList, bool) error
	XHasElem_Sections                 func(*XHasElem_Sections, bool) error
	XHasElem_Sup                      func(*XHasElem_Sup, bool) error
	TMedlineCitationSet               func(*TMedlineCitationSet, bool) error
	XHasElems_EndPage                 func(*XHasElems_EndPage, bool) error
	TInvestigator                     func(*TInvestigator, bool) error
	TBook                             func(*TBook, bool) error
	XHasElem_Book                     func(*XHasElem_Book, bool) error
	XHasElems_Section                 func(*XHasElems_Section, bool) error
	XHasElems_Affiliation             func(*XHasElems_Affiliation, bool) error
	XHasElems_NumberOfReferences      func(*XHasElems_NumberOfReferences, bool) error
	XHasElems_BookDocumentSet         func(*XHasElems_BookDocumentSet, bool) error
	XHasElems_DateCompleted           func(*XHasElems_DateCompleted, bool) error
	XHasElem_InvestigatorList         func(*XHasElem_InvestigatorList, bool) error
	XHasElem_Note                     func(*XHasElem_Note, bool) error
	XHasElem_JournalIssue             func(*XHasElem_JournalIssue, bool) error
	XHasElem_PersonalNameSubjectList  func(*XHasElem_PersonalNameSubjectList, bool) error
	XHasElem_PubmedArticleSet         func(*XHasElem_PubmedArticleSet, bool) error
	XHasElem_PubmedArticle            func(*XHasElem_PubmedArticle, bool) error
	XHasElems_Pmid                    func(*XHasElems_Pmid, bool) error
	XHasElem_Language                 func(*XHasElem_Language, bool) error
	XHasElems_RegistryNumber          func(*XHasElems_RegistryNumber, bool) error
	XHasElems_Publisher               func(*XHasElems_Publisher, bool) error
	TPublicationTypeList              func(*TPublicationTypeList, bool) error
	THistory                          func(*THistory, bool) error
	XHasElem_Url                      func(*XHasElem_Url, bool) error
	XHasElem_DeleteCitation           func(*XHasElem_DeleteCitation, bool) error
	XHasElems_CommentsCorrectionsList func(*XHasElems_CommentsCorrectionsList, bool) error
	XHasElems_NameOfSubstance         func(*XHasElems_NameOfSubstance, bool) error
	XHasElem_PersonalNameSubject      func(*XHasElem_PersonalNameSubject, bool) error
	TPubmedBookArticleSet             func(*TPubmedBookArticleSet, bool) error
	XHasElem_GeneSymbolList           func(*XHasElem_GeneSymbolList, bool) error
	XHasElems_Object                  func(*XHasElems_Object, bool) error
	XHasElem_Format                   func(*XHasElem_Format, bool) error
	XHasElems_ForeName                func(*XHasElems_ForeName, bool) error
	XHasElems_InvestigatorList        func(*XHasElems_InvestigatorList, bool) error
	XHasElem_MeshHeadingList          func(*XHasElem_MeshHeadingList, bool) error
	XHasElems_Author                  func(*XHasElems_Author, bool) error
	XHasElem_GrantID                  func(*XHasElem_GrantID, bool) error
	XHasElems_Isbn                    func(*XHasElems_Isbn, bool) error
	XHasElems_ArticleIdList           func(*XHasElems_ArticleIdList, bool) error
	XHasElem_ArticleDate              func(*XHasElem_ArticleDate, bool) error
	XHasElems_GrantList               func(*XHasElems_GrantList, bool) error
	TKeywordList                      func(*TKeywordList, bool) error
	XHasElem_ISSNLinking              func(*XHasElem_ISSNLinking, bool) error
	XHasElems_DateRevised             func(*XHasElems_DateRevised, bool) error
	XHasElems_MedlineJournalInfo      func(*XHasElems_MedlineJournalInfo, bool) error
	XHasElems_PubmedBookData          func(*XHasElems_PubmedBookData, bool) error
	XHasElem_DataBankList             func(*XHasElem_DataBankList, bool) error
	XHasElems_History                 func(*XHasElems_History, bool) error
	XHasElems_SupplMeshList           func(*XHasElems_SupplMeshList, bool) error
	TObjectList                       func(*TObjectList, bool) error
	XHasElem_GeneralNote              func(*XHasElem_GeneralNote, bool) error
	XHasElems_ContractNumber          func(*XHasElems_ContractNumber, bool) error
	XHasElem_Month                    func(*XHasElem_Month, bool) error
	XHasElem_CollectiveName           func(*XHasElem_CollectiveName, bool) error
	XHasElem_PubMedPubDate            func(*XHasElem_PubMedPubDate, bool) error
	XHasElems_VernacularTitle         func(*XHasElems_VernacularTitle, bool) error
	XHasElems_BeginningDate           func(*XHasElems_BeginningDate, bool) error
	XHasElem_NameOfSubstance          func(*XHasElem_NameOfSubstance, bool) error
	XHasElem_CommentsCorrectionsList  func(*XHasElem_CommentsCorrectionsList, bool) error
	XHasElems_AccessionNumber         func(*XHasElems_AccessionNumber, bool) error
	XHasElem_MedlineJournalInfo       func(*XHasElem_MedlineJournalInfo, bool) error
	XHasElem_Issue                    func(*XHasElem_Issue, bool) error
	XHasElem_LocationLabel            func(*XHasElem_LocationLabel, bool) error
	XHasElems_DataBankName            func(*XHasElems_DataBankName, bool) error
	XHasElems_RefSource               func(*XHasElems_RefSource, bool) error
	XHasElems_Season                  func(*XHasElems_Season, bool) error
	XHasElems_VolumeTitle             func(*XHasElems_VolumeTitle, bool) error
	XHasElems_SectionTitle            func(*XHasElems_SectionTitle, bool) error
	XHasElem_Year                     func(*XHasElem_Year, bool) error
	XHasElems_PersonalNameSubject     func(*XHasElems_PersonalNameSubject, bool) error
	XHasElems_GeneSymbol              func(*XHasElems_GeneSymbol, bool) error
	TParam                            func(*TParam, bool) error
	XHasElem_CollectionTitle          func(*XHasElem_CollectionTitle, bool) error
	XHasElem_PublicationType          func(*XHasElem_PublicationType, bool) error
	XHasElem_PubmedBookArticleSet     func(*XHasElem_PubmedBookArticleSet, bool) error
	XHasElems_DataBank                func(*XHasElems_DataBank, bool) error
	TELocationID                      func(*TELocationID, bool) error
	TArticleTitle                     func(*TArticleTitle, bool) error
	TGrantList                        func(*TGrantList, bool) error
	TEndingDate                       func(*TEndingDate, bool) error
	XHasElems_DeleteDocument          func(*XHasElems_DeleteDocument, bool) error
	TGrant                            func(*TGrant, bool) error
	TArticleId                        func(*TArticleId, bool) error
	XHasElem_ArticleIdList            func(*XHasElem_ArticleIdList, bool) error
	TObject                           func(*TObject, bool) error
	XHasElems_MedlineCitation         func(*XHasElems_MedlineCitation, bool) error
	TMeshHeading                      func(*TMeshHeading, bool) error
	XHasElem_BookTitle                func(*XHasElem_BookTitle, bool) error
	TPublisher                        func(*TPublisher, bool) error
	TSections                         func(*TSections, bool) error
	XHasElem_ArticleId                func(*XHasElem_ArticleId, bool) error
	XHasElems_Medium                  func(*XHasElems_Medium, bool) error
	TMeshHeadingList                  func(*TMeshHeadingList, bool) error
	XHasElem_Publisher                func(*XHasElem_Publisher, bool) error
	XHasElems_Day                     func(*XHasElems_Day, bool) error
	XHasElems_Issn                    func(*XHasElems_Issn, bool) error
	XHasElem_Acronym                  func(*XHasElem_Acronym, bool) error
	XHasElem_Agency                   func(*XHasElem_Agency, bool) error
	TPubmedBookArticle                func(*TPubmedBookArticle, bool) error
	TUrl                              func(*TUrl, bool) error
	XHasElems_ContributionDate        func(*XHasElems_ContributionDate, bool) error
	TCommentsCorrectionsList          func(*TCommentsCorrectionsList, bool) error
	TDataBank                         func(*TDataBank, bool) error
	XHasElems_ArticleDate             func(*XHasElems_ArticleDate, bool) error
	TDateCompleted                    func(*TDateCompleted, bool) error
	TDateRevised                      func(*TDateRevised, bool) error
	TLocationLabel                    func(*TLocationLabel, bool) error
	XHasElems_AuthorList              func(*XHasElems_AuthorList, bool) error
	XHasElems_Language                func(*XHasElems_Language, bool) error
	TIdentifier                       func(*TIdentifier, bool) error
	TDateCreated                      func(*TDateCreated, bool) error
	XHasElems_PubmedArticle           func(*XHasElems_PubmedArticle, bool) error
	TContributionDate                 func(*TContributionDate, bool) error
	XHasElem_Identifier               func(*XHasElem_Identifier, bool) error
	XHasElems_Book                    func(*XHasElems_Book, bool) error
	Ttext                             func(*Ttext, bool) error
	XHasElem_MedlineCitationSet       func(*XHasElem_MedlineCitationSet, bool) error
	XHasElems_CollectiveName          func(*XHasElems_CollectiveName, bool) error
	XHasElem_LastName                 func(*XHasElem_LastName, bool) error
	XHasElem_Suffix                   func(*XHasElem_Suffix, bool) error
	XHasElems_Chemical                func(*XHasElems_Chemical, bool) error
	XHasElem_GrantList                func(*XHasElem_GrantList, bool) error
	XHasElems_LocationLabel           func(*XHasElems_LocationLabel, bool) error
	XHasElems_ArticleTitle            func(*XHasElems_ArticleTitle, bool) error
	XHasElem_DeleteDocument           func(*XHasElem_DeleteDocument, bool) error
	XHasElems_B                       func(*XHasElems_B, bool) error
	XHasElems_Sub                     func(*XHasElems_Sub, bool) error
	TJournal                          func(*TJournal, bool) error
	TBookTitle                        func(*TBookTitle, bool) error
	XHasElems_Acronym                 func(*XHasElems_Acronym, bool) error
	XHasElems_DescriptorName          func(*XHasElems_DescriptorName, bool) error
	XHasElems_DeleteCitation          func(*XHasElems_DeleteCitation, bool) error
	XHasElems_ReportNumber            func(*XHasElems_ReportNumber, bool) error
	XHasElem_Item                     func(*XHasElem_Item, bool) error
	TMedlineCitation                  func(*TMedlineCitation, bool) error
	XHasElems_PubMedPubDate           func(*XHasElems_PubMedPubDate, bool) error
	XHasElem_VolumeTitle              func(*XHasElem_VolumeTitle, bool) error
	XHasElem_Object                   func(*XHasElem_Object, bool) error
	XHasElems_DataBankList            func(*XHasElems_DataBankList, bool) error
	XHasElems_Volume                  func(*XHasElems_Volume, bool) error
	XHasElems_Year                    func(*XHasElems_Year, bool) error
	TNameOfSubstance                  func(*TNameOfSubstance, bool) error
	TAuthorList                       func(*TAuthorList, bool) error
	TArticleIdList                    func(*TArticleIdList, bool) error
	XHasElem_EndingDate               func(*XHasElem_EndingDate, bool) error
	XHasElem_ChemicalList             func(*XHasElem_ChemicalList, bool) error
	TDescriptorName                   func(*TDescriptorName, bool) error
	TOtherID                          func(*TOtherID, bool) error
	XHasElems_OtherID                 func(*XHasElems_OtherID, bool) error
	TArticleDate                      func(*TArticleDate, bool) error
	XHasElems_PublicationTypeList     func(*XHasElems_PublicationTypeList, bool) error
	XHasElems_EndingDate              func(*XHasElems_EndingDate, bool) error
	XHasElems_Keyword                 func(*XHasElems_Keyword, bool) error
	XHasElem_PubDate                  func(*XHasElem_PubDate, bool) error
	XHasElems_ItemList                func(*XHasElems_ItemList, bool) error
	XHasElem_CommentsCorrections      func(*XHasElem_CommentsCorrections, bool) error
	XHasElems_MedlinePgn              func(*XHasElems_MedlinePgn, bool) error
	XHasElems_BookTitle               func(*XHasElems_BookTitle, bool) error
}
